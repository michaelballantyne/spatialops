 ; Copyright (c) 2011 The University of Utah
 ;
 ; Permission is hereby granted, free of charge, to any person obtaining a copy
 ; of this software and associated documentation files (the "Software"), to
 ; deal in the Software without restriction, including without limitation the
 ; rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ; sell copies of the Software, and to permit persons to whom the Software is
 ; furnished to do so, subject to the following conditions:
 ;
 ; The above copyright notice and this permission notice shall be included in
 ; all copies or substantial portions of the Software.
 ;
 ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ; IN THE SOFTWARE.

(let* ([id (lambda (x) x)]
       [l literal-chunk]
       [c concat-chunk]
       [b between-chunk]
       [b/a between/attach-chunk]
       [n namespace-define-chunk]
       [i (lambda chunks (between/attach-chunk semi-colon-chunk
                                               blank-line-chunk
                                               chunks))]
       [d described-smts-chunk]
       [p paren-list-chunk]
       [m macro-define-chunk]
       [s space-chunk]
       [typedef typedef-smt-chunk]
       [tpl-pmtr (lambda (pmtr) (c typename-chunk s pmtr))]
       [VG-chunk 'ValidGhost]
       [fc function-call-chunk]
       [mfc member-function-call-chunk]
       [fcn-def function-define-chunk]
       [v-fcn-def void-function-define-chunk]
       [r-fcn-def returning-function-define-chunk]
       [fcn-dcl function-declare-chunk]
       [constize constize-chunk]
       [s-fcn-dcl static-function-declare-chunk]
       [tpl-def template-define-chunk]
       [tpl-srt-dcl template-struct-declare-chunk]
       [tpl-srt-def template-struct-define-chunk]
       [tpl-use template-use-chunk]
       [sec-def section-define-chunk]
       [scope scope-resolution-operator-chunk]
       [NCF-chunk 'NeboConstField]
       [NF-chunk 'NeboField]
       [pp-header-file-chunk-with-license
        (lambda (file-name file-setup . chunks)
          (c (b new-line-chunk
                "/*"
                " * Copyright (c) 2011 The University of Utah"
                " *"
                " * Permission is hereby granted, free of charge, to any person obtaining a copy"
                " * of this software and associated documentation files (the \"Software\"), to"
                " * deal in the Software without restriction, including without limitation the"
                " * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or"
                " * sell copies of the Software, and to permit persons to whom the Software is"
                " * furnished to do so, subject to the following conditions:"
                " *"
                " * The above copyright notice and this permission notice shall be included in"
                " * all copies or substantial portions of the Software."
                " *"
                " * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"
                " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"
                " * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE"
                " * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"
                " * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING"
                " * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS"
                " * IN THE SOFTWARE."
                " */")
             blank-line-chunk
             (pp-header-file-chunk file-name file-setup chunks)))]
       )
  ; beginnning of file
  (pp-header-file-chunk-with-license
   'SpatialOps_FieldExpressionsFDStencil_2_h
   (between-chunk blank-line-chunk
                  (pp-includes-chunk 'spatialops/structured/FVStaggeredFieldTypes.h
                                     'spatialops/FieldExpressions.h
                                     'spatialops/structured/stencil/FDStencil2.h)
                  (comment-env-chunk (pp-include-chunk 'iostream))
                  (pp-conditional-ifdef-chunk
                   'STENCIL_THREADS
                   (between-chunk new-line-chunk
                                  (pp-includes-chunk 'vector
                                                     'boost/bind.hpp
                                                     'spatialops/ThreadPool.h
                                                     'spatialops/structured/IntVec.h
                                                     'boost/interprocess/sync/interprocess_semaphore.hpp)
                                  "namespace BI = boost::interprocess;")))
   (n 'SpatialOps
      (n 'structured
         (tpl-def (list (c typename-chunk s 'OperatorType)
                        (c typename-chunk s 'FieldType)
                        (c typename-chunk s 'DirVec))
                  (v-fcn-def 'fd_stencil_2_apply_to_field_sequential_execute_internal
                             (list (b s
                                      'FieldType
                                      const-chunk
                                      "&"
                                      'src)
                                   (b s
                                      'FieldType
                                      "&"
                                      'dest)
                                   (b s
                                      'double
                                      const-chunk
                                      'low)
                                   (b s
                                      'double
                                      const-chunk
                                      'high))
                             (list (b s
                                      const-chunk
                                      'MemoryWindow
                                      "&"
                                      'w
                                      "="
                                      (mfc 'src
                                           'window_with_ghost))
                                   (b s
                                      const-chunk
                                      'IntVec
                                      'shift
                                      "="
                                      (fc (scope 'DirVec 'int_vec))
                                      "+"
                                      (fc (scope 'DirVec 'int_vec)))
                                   (b s
                                      const-chunk
                                      'MemoryWindow
                                      (fc 'ws1
                                          (mfc 'w
                                               'glob_dim)
                                          (mfc 'w
                                               'offset)
                                          (b s
                                             (mfc 'w
                                                  'extent)
                                             "-"
                                             'shift)
                                          (mfc 'w
                                               'has_bc
                                               "0")
                                          (mfc 'w
                                               'has_bc
                                               "1")
                                          (mfc 'w
                                               'has_bc
                                               "2")))
                                   (b s
                                      const-chunk
                                      'MemoryWindow
                                      (fc 'ws2
                                          (mfc 'w
                                               'glob_dim)
                                          (b s
                                             (mfc 'w
                                                  'offset)
                                             "+"
                                             'shift)
                                          (b s
                                             (mfc 'w
                                                  'extent)
                                             "-"
                                             'shift)
                                          (mfc 'w
                                               'has_bc
                                               "0")
                                          (mfc 'w
                                               'has_bc
                                               "1")
                                          (mfc 'w
                                               'has_bc
                                               "2")))
                                   (b s
                                      const-chunk
                                      'MemoryWindow
                                      (fc 'wd
                                          (mfc 'w
                                               'glob_dim)
                                          (b s
                                             (mfc 'w
                                                  'offset)
                                             "+"
                                             (fc (scope 'DirVec 'int_vec)))
                                          (b s
                                             (mfc 'w
                                                  'extent)
                                             "-"
                                             'shift)
                                          (mfc 'w
                                               'has_bc
                                               "0")
                                          (mfc 'w
                                               'has_bc
                                               "1")
                                          (mfc 'w
                                               'has_bc
                                               "2")))
                                   (b s
                                      'FieldType
                                      (fc 'd
                                          'wd
                                          (mfc 'dest 'field_values)
                                          'ExternalStorage))
                                   (b s
                                      'FieldType
                                      (fc 's1
                                          'ws1
                                          (mfc 'src 'field_values)
                                          'ExternalStorage))
                                   (b s
                                      'FieldType
                                      (fc 's2
                                          'ws2
                                          (mfc 'src 'field_values)
                                          'ExternalStorage))
                                   (b s
                                      typename-chunk
                                      (scope 'FieldType 'iterator)
                                      'id
                                      "="
                                      (mfc 'd 'begin))
                                   (b s
                                      typename-chunk
                                      (scope 'FieldType 'iterator)
                                      'ide
                                      "="
                                      (mfc 'd 'end))
                                   (b s
                                      typename-chunk
                                      (scope 'FieldType 'const_iterator)
                                      'is1
                                      "="
                                      (mfc 's1 'begin))
                                   (b s
                                      typename-chunk
                                      (scope 'FieldType 'const_iterator)
                                      'is2
                                      "="
                                      (mfc 's2 'begin))
                                   (c 'for
                                      open-paren-chunk
                                      semi-colon-chunk
                                      s
                                      'id
                                      s
                                      "!="
                                      s
                                      'ide
                                      semi-colon-chunk
                                      s
                                      "++"
                                      'id
                                      comma-chunk
                                      s
                                      "++"
                                      'is1
                                      comma-chunk
                                      s
                                      "++"
                                      'is2
                                      close-paren-chunk
                                      (body-chunk
                                       (b s
                                          (c "*" 'id)
                                          "="
                                          (c "*" 'is1)
                                          "*"
                                          'low
                                          "+"
                                          (c "*" 'is2)
                                          "*"
                                          'high))))))
         (tpl-def (list (c typename-chunk s 'OperatorType)
                        (c typename-chunk s 'FieldType)
                        (c typename-chunk s 'DirVec))
                  (v-fcn-def 'fd_stencil_2_apply_to_field_sequential_execute
                             (list (b s
                                      'FieldType const-chunk "&" 'src)
                                   (b s
                                      'FieldType "&" 'dest)
                                   (b s
                                      'double const-chunk 'low)
                                   (b s
                                      'double const-chunk 'high))
                             (fc (tpl-use 'fd_stencil_2_apply_to_field_sequential_execute_internal
                                          'OperatorType
                                          'FieldType
                                          'DirVec)
                                 'src
                                 'dest
                                 'low
                                 'high)))
         (pp-conditional-ifdef-chunk
          'STENCIL_THREADS
          (tpl-def (list (c typename-chunk s 'OperatorType)
                         (c typename-chunk s 'SrcType)
                         (c typename-chunk s 'DestType)
                         (c typename-chunk s 'DirVec))
                   (v-fcn-def 'fd_stencil_2_apply_to_field_thread_parallel_execute_internal
                              (list (b s
                                       'SrcType const-chunk "&" 'src)
                                    (b s
                                       'DestType "&" 'dest)
                                    (b s
                                       'double const-chunk 'low)
                                    (b s
                                       'double const-chunk 'high)
                                    (b s
                                       'MemoryWindow const-chunk "&" 'sw)
                                    (b s
                                       'MemoryWindow const-chunk "&" 'dw)
                                    (b s
                                       (scope 'BI
                                              'interprocess_semaphore)
                                       "*"
                                       'sem))
                              (list (fc (tpl-use 'fd_stencil_2_apply_to_field_sequential_execute_internal
                                                 'OperatorType
                                                 (c typename-chunk
                                                    s
                                                    (scope 'DestType 'field_type))
                                                 'DirVec)
                                        (mfc (mfc 'src 'resize 'sw)
                                             'field)
                                        (mfc (mfc 'dest 'resize 'dw)
                                             'field)
                                        'low
                                        'high)
                                    (fc (c 'sem "->" 'post))))))
         (pp-conditional-ifdef-chunk
          'STENCIL_THREADS
          (tpl-def (list (c typename-chunk s 'OperatorType)
                         (c typename-chunk s 'FieldType)
                         (c typename-chunk s 'DirVec))
                   (v-fcn-def 'fd_stencil_2_apply_to_field_thread_parallel_execute
                              (list (b s
                                       'FieldType const-chunk "&" 'src)
                                    (b s
                                       'FieldType "&" 'dest)
                                    (b s
                                       'double const-chunk 'low)
                                    (b s
                                       'double const-chunk 'high)
                                    (b s
                                       'int const-chunk 'number_of_partitions))
                              (typedef (tpl-pmtr (scope (scope 'structured (tpl-use 'FromGhost
                                                                                    (tpl-pmtr (scope 'FieldType 'Ghost))))
                                                        'result))
                                       VG-chunk)
                              (typedef (scope 'structured (tpl-use 'IndexTriplet "0" "0" "0"))
                                       'InitialShift)
                              (typedef (c typename-chunk
                                          s
                                          (scope (tpl-use NCF-chunk
                                                          'Initial
                                                          'FieldType)
                                                 template-chunk)
                                          s
                                          (scope (tpl-use 'Iterator VG-chunk 'InitialShift)
                                                 'ResizePrepType))
                                       'SrcPmtrType)
                              (typedef (c typename-chunk
                                          s
                                          (scope (tpl-use NF-chunk
                                                          'Initial
                                                          'FieldType)
                                                 template-chunk)
                                          s
                                          (scope (tpl-use 'Iterator VG-chunk 'InitialShift)
                                                 'ResizePrepType))
                                       'DestPmtrType)
                              (b s
                                 'MemoryWindow
                                 'sw
                                 "="
                                 (mfc 'src 'window_with_ghost))
                              (b s
                                 'MemoryWindow
                                 'dw
                                 "="
                                 (mfc 'dest 'window_with_ghost))
                              (smt-list-chunk new-line-chunk
                                              (b s
                                                 'int 'x "=" "1")
                                              (b s
                                                 'int 'y "=" "1")
                                              (b s
                                                 'int 'z "=" "1"))
                              (c 'if
                                 (p (c 'number_of_partitions
                                       s
                                       "<="
                                       s
                                       (mfc 'sw 'extent "2")))
                                 (body-chunk (b s
                                                'z "=" 'number_of_partitions))
                                 new-line-chunk
                                 'else
                                 s
                                 'if
                                 (p (c 'number_of_partitions
                                       s
                                       "<="
                                       s
                                       (mfc 'sw 'extent "1")))
                                 (body-chunk (b s
                                                'y "=" 'number_of_partitions))
                                 new-line-chunk
                                 'else
                                 s
                                 'if
                                 (p (c 'number_of_partitions
                                       s
                                       "<="
                                       s
                                       (mfc 'sw 'extent "0")))
                                 (body-chunk (b s
                                                'x "=" 'number_of_partitions)))
                              (smt-list-chunk new-line-chunk
                                              (typedef (c typename-chunk
                                                          s
                                                          (scope (scope (scope 'FieldType
                                                                               'field_type)
                                                                        'Location)
                                                                 'BCExtra))
                                                       'SrcBCExtra)
                                              (typedef (c typename-chunk
                                                          s
                                                          (scope (scope (scope 'FieldType
                                                                               'field_type)
                                                                        'Location)
                                                                 'BCExtra))
                                                       'DestBCExtra)
                                              (b s
                                                 (scope 'structured 'IntVec)
                                                 'sBC
                                                 "="
                                                 (b s
                                                    (mfc 'sw 'has_bc)
                                                    "*"
                                                    (fc (scope 'SrcBCExtra 'int_vec))))
                                              (b s
                                                 (scope 'structured 'IntVec)
                                                 'dBC
                                                 "="
                                                 (b s
                                                    (mfc 'dw 'has_bc)
                                                    "*"
                                                    (fc (scope 'DestBCExtra 'int_vec)))))
                              (c (scope 'std
                                        (tpl-use 'vector 'MemoryWindow))
                                 s
                                 'vec_sw
                                 s
                                 "="
                                 s
                                 (mfc 'sw
                                      'split
                                      (fc (scope 'structured 'IntVec)
                                          'x
                                          'y
                                          'z)
                                      (fc (scope (scope (scope 'FieldType
                                                               'Ghost)
                                                        'NGhostMinus)
                                                 'int_vec))
                                      (fc (scope (scope (scope 'FieldType
                                                               'Ghost)
                                                        'NGhostPlus)
                                                 'int_vec))
                                      'sBC))
                              (c (scope 'std
                                        (tpl-use 'vector 'MemoryWindow))
                                 s
                                 'vec_dw
                                 s
                                 "="
                                 s
                                 (mfc 'dw
                                      'split
                                      (fc (scope 'structured'IntVec)
                                          'x
                                          'y
                                          'z)
                                      (fc (scope (scope (scope 'FieldType
                                                               'Ghost)
                                                        'NGhostMinus)
                                                 'int_vec))
                                      (fc (scope (scope (scope 'FieldType
                                                               'Ghost)
                                                        'NGhostPlus)
                                                 'int_vec))
                                      'dBC))
                              (c (scope 'BI 'interprocess_semaphore)
                                 s
                                 (fc 'semaphore "0"))
                              (c typename-chunk
                                 s
                                 (scope (scope 'std
                                               (tpl-use 'vector 'MemoryWindow))
                                        'const_iterator)
                                 s
                                 'ivec_sw
                                 s
                                 "="
                                 s
                                 (mfc 'vec_sw 'begin))
                              (c typename-chunk
                                 s
                                 (scope (scope 'std
                                               (tpl-use 'vector 'MemoryWindow))
                                        'const_iterator)
                                 s
                                 'ivec_dw
                                 s
                                 "="
                                 s
                                 (mfc 'vec_dw 'begin))
                              (c typename-chunk
                                 s
                                 (scope (scope 'std
                                               (tpl-use 'vector 'MemoryWindow))
                                        'const_iterator)
                                 s
                                 'evec_sw
                                 s
                                 "="
                                 s
                                 (mfc 'vec_sw 'end))
                              (c 'for
                                 open-paren-chunk
                                 semi-colon-chunk
                                 s
                                 'ivec_sw
                                 s
                                 "!="
                                 s
                                 'evec_sw
                                 semi-colon-chunk
                                 s
                                 "++"
                                 'ivec_sw
                                 comma-chunk
                                 s
                                 "++"
                                 'ivec_dw
                                 close-paren-chunk
                                 (body-chunk (mfc (fc (scope 'ThreadPoolFIFO 'self))
                                                  'schedule
                                                  (fc (scope 'boost 'bind)
                                                      (c "&"
                                                         (tpl-use 'fd_stencil_2_apply_to_field_thread_parallel_execute_internal
                                                                  'OperatorType
                                                                  'SrcPmtrType
                                                                  'DestPmtrType
                                                                  'DirVec))
                                                      (mfc (fc (tpl-use NCF-chunk
                                                                        'Initial
                                                                        'FieldType)
                                                               'src)
                                                           (c template-chunk
                                                              s
                                                              (tpl-use 'resize_prep VG-chunk 'InitialShift)))
                                                      (mfc (fc (tpl-use NF-chunk
                                                                        'Initial
                                                                        'FieldType)
                                                               'dest)
                                                           (c template-chunk
                                                              s
                                                              (tpl-use 'resize_prep VG-chunk 'InitialShift)))
                                                      'low
                                                      'high
                                                      (c "*" 'ivec_sw)
                                                      (c "*" 'ivec_dw)
                                                      (c "&" 'semaphore)))))
                              (c 'for
                                 open-paren-chunk
                                 'int
                                 s
                                 'ii
                                 s
                                 "="
                                 s
                                 "0"
                                 semi-colon-chunk
                                 s
                                 'ii
                                 s
                                 "<"
                                 s
                                 (mfc 'vec_sw 'size)
                                 semi-colon-chunk
                                 s
                                 'ii
                                 "++"
                                 close-paren-chunk
                                 (body-chunk (mfc 'semaphore 'wait))))))
         (tpl-def (list (c typename-chunk s 'OperatorType)
                        (c typename-chunk s 'FieldType)
                        (c typename-chunk s 'DirVec))
                  (v-fcn-def 'fd_stencil_2_apply_to_field_general_execute
                             (list (b s
                                      'FieldType const-chunk "&" 'src)
                                   (b s
                                      'FieldType "&" 'dest)
                                   (b s
                                      'double const-chunk 'low)
                                   (b s
                                      'double const-chunk 'high))
                             (c (pp-conditional-ifdef-chunk
                                 'STENCIL_THREADS
                                 (p (c (fc 'is_thread_parallel)
                                       s "?" s
                                       (fc (tpl-use 'fd_stencil_2_apply_to_field_thread_parallel_execute
                                                    'OperatorType
                                                    'FieldType
                                                    'DirVec)
                                           'src
                                           'dest
                                           'low
                                           'high
                                           (fc 'get_soft_thread_count))
                                       s ":" s
                                       (fc (tpl-use 'fd_stencil_2_apply_to_field_sequential_execute
                                                    'OperatorType
                                                    'FieldType
                                                    'DirVec)
                                           'src
                                           'dest
                                           'low
                                           'high)))
                                 (fc (tpl-use 'fd_stencil_2_apply_to_field_sequential_execute
                                              'OperatorType
                                              'FieldType
                                              'DirVec)
                                     'src
                                     'dest
                                     'low
                                     'high))
                                new-line-chunk)))
         ))))
