/* This file was generated by fulmar version 0.8.0. */

/*
 * Copyright (c) 2013 The University of Utah
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

#ifndef NEBO_BASIC_H
#  define NEBO_BASIC_H

#  include <spatialops/SpatialOpsConfigure.h>
#  include <spatialops/structured/IndexTriplet.h>
#  include <spatialops/structured/GhostData.h>
#  include <spatialops/structured/SpatialField.h>
#  include <cmath>
#  include <math.h>

#  ifdef NEBO_REPORT_BACKEND
#     include <iostream>
#  endif
   /* NEBO_REPORT_BACKEND */

#  ifdef FIELD_EXPRESSION_THREADS
#     include <spatialops/SpatialOpsTools.h>
#     include <vector>
#     include <boost/bind.hpp>
#     include <spatialops/ThreadPool.h>
#     include <spatialops/structured/IntVec.h>
#     include <boost/interprocess/sync/interprocess_semaphore.hpp>
      namespace BI = boost::interprocess;
#  endif
   /* FIELD_EXPRESSION_THREADS */

#  ifdef __CUDACC__
#     include <spatialops/structured/MemoryTypes.h>
#  endif
   /* __CUDACC__ */

   namespace SpatialOps {
      /* Meta-programming compiler flags */
      struct All;
      struct InteriorOnly;

      template<typename IteratorType, typename ExprType, typename FieldType>
       struct CalculateValidGhost;

      /* All */
      template<typename ExprType, typename FieldType>
       struct CalculateValidGhost<All, ExprType, FieldType> {
         typename structured::Minimum<typename ExprType::PossibleValidGhost,
                                      typename structured::GhostFromField<FieldType>::
                                      result>::result typedef Result;
      };

      /* InteriorOnly */
      template<typename ExprType, typename FieldType>
       struct CalculateValidGhost<InteriorOnly, ExprType, FieldType> {
         typename structured::MinimumGhostFromField<FieldType>::result typedef
         Result;
      };

      template<typename Type1, typename Type2>
       struct NeboFieldCheck;

      template<typename Type>
       struct NeboFieldCheck<Type, Type> { Type typedef Result; };

      inline structured::IntVec nebo_find_partition(structured::IntVec const &
                                                    extent,
                                                    int const thread_count) {
         int x = 1;
         int y = 1;
         int z = 1;

         if(thread_count <= extent[2]) { z = thread_count; }
         else if(thread_count <= extent[1]) { y = thread_count; }
         else if(thread_count <= extent[0]) { x = thread_count; };

         return structured::IntVec(x, y, z);
      };

      inline int nebo_partition_count(structured::IntVec const & split) {
         return split[0] * split[1] * split[2];
      };

      inline structured::IntVec nebo_next_partition(structured::IntVec const &
                                                    current,
                                                    structured::IntVec const &
                                                    split) {
         structured::IntVec result;

         if(current[2] < split[2] - 1) {
            result = structured::IntVec(current[0], current[1], 1 + current[2]);
         }
         else if(current[1] < split[1] - 1) {
            result = structured::IntVec(current[0], 1 + current[1], 0);
         }
         else { result = structured::IntVec(1 + current[0], 0, 0); };

         return result;
      };

      template<typename Operand, typename FieldType>
       struct NeboExpression {
         public:
          FieldType typedef field_type;

          Operand typedef Expression;

          NeboExpression(Operand const & given)
          : expr_(given)
          {}

          inline Operand const & expr(void) const { return expr_; }

         private:
          Operand expr_;
      };

      template<typename Operand, typename FieldType>
       struct NeboBooleanExpression {
         public:
          FieldType typedef field_type;

          Operand typedef Expression;

          NeboBooleanExpression(Operand const & given)
          : expr_(given)
          {}

          inline Operand const & expr(void) const { return expr_; }

         private:
          Operand expr_;
      };

      /* Modes: */
      struct Initial;
#     ifdef FIELD_EXPRESSION_THREADS
         struct Resize
#     endif
      /* FIELD_EXPRESSION_THREADS */;
      struct SeqWalk;
#     ifdef __CUDACC__
         struct GPUWalk
#     endif
      /* __CUDACC__ */;
      struct Reduction;
   } /* SpatialOps */

#endif
/* NEBO_BASIC_H */
