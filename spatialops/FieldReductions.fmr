 ; Copyright (c) 2011 The University of Utah
 ;
 ; Permission is hereby granted, free of charge, to any person obtaining a copy
 ; of this software and associated documentation files (the "Software"), to
 ; deal in the Software without restriction, including without limitation the
 ; rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ; sell copies of the Software, and to permit persons to whom the Software is
 ; furnished to do so, subject to the following conditions:
 ;
 ; The above copyright notice and this permission notice shall be included in
 ; all copies or substantial portions of the Software.
 ;
 ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ; IN THE SOFTWARE.

(let* ([id (lambda (x) x)]
       [c concat-chunk]
       [b between-chunk]
       [b/a between/attach-chunk]
       [n namespace-define-chunk]
       [i (lambda chunks (between/attach-chunk semi-colon-chunk blank-line-chunk chunks))]
       [d described-smts-chunk]
       [p paren-list-chunk]
       [m macro-define-chunk]
       [s space-chunk]
       [typedef typedef-smt-chunk]
       [fc function-call-chunk]
       [mfc member-function-call-chunk]
       [fcn-def function-define-chunk]
       [v-fcn-def void-function-define-chunk]
       [r-fcn-def returning-function-define-chunk]
       [fcn-dcl function-declare-chunk]
       [constize constize-chunk]
       [s-fcn-dcl static-function-declare-chunk]
       [tpl-def template-define-chunk]
       [srt-dcl struct-declare-chunk]
       [srt-def struct-define-chunk]
       [tpl-srt-dcl template-struct-declare-chunk]
       [tpl-srt-def template-struct-define-chunk]
       [tpl-use template-use-chunk]
       [tpl-pmtr (lambda (pmtr) (c typename-chunk s pmtr))]
       [sub-tpl-use (lambda (pmtr) (c template-chunk s pmtr))]
       [tpl-fcn-use (lambda pmtrs (sub-tpl-use (apply tpl-use pmtrs)))]
       [sec-def section-define-chunk]
       [cons-asgn constructor-assignment-chunk]
       [scope scope-resolution-operator-chunk]
       [report-VG-chunk 'PossibleValidGhost]
       [VG-chunk 'ValidGhost]
       [SH-chunk 'Shift]
       [This-chunk 'This]
       [NE-chunk 'NeboExpression]
       [NBE-chunk 'NeboBooleanExpression]
       [FT-chunk 'FieldType]
       [NS-chunk 'NeboScalar]
       [NB-chunk 'NeboBoolean]
       [NCF-chunk 'NeboConstField]
       [NF-chunk 'NeboField]
       [pp-header-file-chunk-with-license
        (lambda (file-name file-setup . chunks)
          (c (b new-line-chunk
                "/*"
                " * Copyright (c) 2011 The University of Utah"
                " *"
                " * Permission is hereby granted, free of charge, to any person obtaining a copy"
                " * of this software and associated documentation files (the \"Software\"), to"
                " * deal in the Software without restriction, including without limitation the"
                " * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or"
                " * sell copies of the Software, and to permit persons to whom the Software is"
                " * furnished to do so, subject to the following conditions:"
                " *"
                " * The above copyright notice and this permission notice shall be included in"
                " * all copies or substantial portions of the Software."
                " *"
                " * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"
                " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"
                " * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE"
                " * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"
                " * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING"
                " * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS"
                " * IN THE SOFTWARE."
                " */")
             blank-line-chunk
             (pp-header-file-chunk file-name file-setup chunks)))]
       [build-simple-catamorphism
        (lambda (name
                 tpl-pmtrs
                 return-type
                 args
                 body
                 return-expr)
          (tpl-def (list tpl-pmtrs
                         (tpl-pmtr FT-chunk))
                   (r-fcn-def (fcn-dcl name
                                       return-type
                                       args)
                              body
                              return-expr)))]
       [build-catamorphism-with-field
        (lambda (name
                 tpl-pmtrs
                 return-type
                 pmtrs
                 args
                 body
                 return-expr)
          (list (build-simple-catamorphism name
                                           (list tpl-pmtrs
                                                 (tpl-pmtr 'ExprType))
                                           return-type
                                           (list pmtrs
                                                 (b s
                                                    (tpl-use NE-chunk 'ExprType FT-chunk)
                                                    const-chunk
                                                    "&"
                                                    'fexpr))
                                           body
                                           return-expr)
                (build-simple-catamorphism name
                                           tpl-pmtrs
                                           return-type
                                           (list pmtrs
                                                 (b s FT-chunk const-chunk "&" 'field))
                                           (typedef (tpl-use NCF-chunk 'Initial FT-chunk)
                                                    'ExprType)
                                           (fc name
                                               args
                                               (fc (tpl-use NE-chunk 'ExprType FT-chunk)
                                                   (fc 'ExprType
                                                       'field))))))]
       [build-catamorphism
        (lambda (name
                 tpl-pmtrs
                 return-type
                 pmtrs
                 args
                 body
                 return-expr)
          (list (build-catamorphism-with-field name
                                               tpl-pmtrs
                                               return-type
                                               pmtrs
                                               args
                                               (list (typedef (tpl-pmtr (scope 'ExprType report-VG-chunk))
                                                              VG-chunk)
                                                     (typedef (scope 'structured (tpl-use 'IndexTriplet "0" "0" "0"))
                                                              SH-chunk)
                                                     body)
                                               return-expr)
                (build-catamorphism-with-field (c name '_interior)
                                               tpl-pmtrs
                                               return-type
                                               pmtrs
                                               args
                                               (list (typedef (scope 'structured (tpl-use 'GhostData
                                                                                          "0" "0" "0"
                                                                                          "0" "0" "0"
                                                                                          "0" "0" "0"))
                                                              VG-chunk)
                                                     (typedef (scope 'structured (tpl-use 'IndexTriplet "0" "0" "0"))
                                                              SH-chunk)
                                                     body)
                                               return-expr)))]
       [build-applied-catamorphism
        (lambda (name
                 body
                 proc)
          (list (build-catamorphism-with-field name
                                               null
                                               (tpl-pmtr (scope FT-chunk 'value_type))
                                               null
                                               null
                                               body
                                               (fc 'nebo_reduce proc 'fexpr))
                (build-catamorphism-with-field (c name '_interior)
                                               null
                                               (tpl-pmtr (scope FT-chunk 'value_type))
                                               null
                                               null
                                               body
                                               (fc 'nebo_reduce_interior proc 'fexpr))))]
       [build-used-catamorphism
        (lambda (name
                 return-expr)
          (list (build-catamorphism-with-field name
                                               null
                                               (tpl-pmtr (scope FT-chunk 'value_type))
                                               null
                                               null
                                               null
                                               (return-expr empty-chunk))
                (build-catamorphism-with-field (c name '_interior)
                                               null
                                               (tpl-pmtr (scope FT-chunk 'value_type))
                                               null
                                               null
                                               null
                                               (return-expr '_interior))))]
       [duplicate-name
        (lambda (name
                 fcn)
          (list (fcn (c 'nebo_ name))
                (m (c 'field_ name)
                   null
                   (c 'nebo_ name "//"))
                (m (c 'field_ name '_interior)
                   null
                   (c 'nebo_ name '_interior "//"))))]
       [dn duplicate-name]
       )
  ; beginnning of file
  (pp-header-file-chunk-with-license
   'SpatialOps_FieldReductions_h
   (b blank-line-chunk
      (pp-includes-chunk 'spatialops/SpatialOpsConfigure.h
                         'spatialops/FieldExpressions.h)
      (comment-env-chunk (pp-include-chunk 'iostream)))
   (n 'SpatialOps
      (dn 'fold
          (lambda (name)
            (build-catamorphism name
                                (tpl-pmtr 'ResultType)
                                'ResultType
                                (list (b s
                                         'ResultType
                                         const-chunk
                                         "&"
                                         (c (p (c "*" 'proc))
                                            (p (b s 'ResultType const-chunk "&")
                                               (b s
                                                  (tpl-pmtr (scope FT-chunk 'value_type))
                                                  const-chunk
                                                  "&"))))
                                      (b s 'ResultType const-chunk "&" 'initialValue))
                                (list 'proc
                                      'initialValue)
                                (list (b s 'ResultType 'result "=" 'initialValue)
                                      (b s
                                         (tpl-pmtr (scope (scope 'ExprType 
                                                                 (tpl-fcn-use 'Iterator VG-chunk SH-chunk))
                                                          'SeqWalkType))
                                         'expr
                                         "="
                                         (mfc (mfc 'fexpr 'expr)
                                              (tpl-fcn-use 'init VG-chunk SH-chunk)))
                                      (c 'while
                                         (p (c "!" (mfc 'expr 'at_end)))
                                         (body-chunk (b s 'result "=" (fc 'proc 'result (mfc 'expr 'eval)))
                                                     (mfc 'expr 'next))))
                                'result)))
      (dn 'reduce
          (lambda (name)
            (let* ([AtomicType (tpl-pmtr (scope FT-chunk 'value_type))]
                   [build-reduce (lambda (ref?)
                                   (build-catamorphism name
                                                       null
                                                       AtomicType
                                                       (cond [ref? (b s
                                                                      AtomicType
                                                                      const-chunk
                                                                      "&"
                                                                      (c (p (c "*" 'proc))
                                                                         (p (b s AtomicType const-chunk "&")
                                                                            (b s AtomicType const-chunk "&"))))]
                                                             [else (b s
                                                                      AtomicType
                                                                      (c (p (c "*" 'proc))
                                                                         (p (b s AtomicType const-chunk "&")
                                                                            (b s AtomicType const-chunk "&"))))])
                                                       'proc
                                                       (list (b s
                                                                (tpl-pmtr (scope (scope 'ExprType (tpl-fcn-use 'Iterator VG-chunk SH-chunk))
                                                                                 'SeqWalkType))
                                                                'expr
                                                                "="
                                                                (mfc (mfc 'fexpr 'expr)
                                                                     (tpl-fcn-use 'init VG-chunk SH-chunk)))
                                                             (b s AtomicType 'result "=" (mfc 'expr 'eval))
                                                             (mfc 'expr 'next)
                                                             (c 'while
                                                                (p (c "!" (mfc 'expr 'at_end)))
                                                                (body-chunk (b s 'result "=" (fc 'proc 'result (mfc 'expr 'eval)))
                                                                            (mfc 'expr 'next))))
                                                       'result))])
              (list (build-reduce #true)
                    (build-reduce #false)))))
      (dn 'max
          (lambda (name)
            (build-applied-catamorphism name
                                        null
                                        (scope 'std 'max))))
      (dn 'min
          (lambda (name)
            (build-applied-catamorphism name
                                        null
                                        (scope 'std 'min))))
      (tpl-def (tpl-pmtr 'AtomicType)
               (r-fcn-def (fcn-dcl 'sum
                                   'AtomicType
                                   (b s 'AtomicType const-chunk "&" 'a)
                                   (b s 'AtomicType const-chunk "&" 'b))
                          null
                          (b s 'a "+" 'b)))
      (dn 'sum
          (lambda (name)
            (build-applied-catamorphism name
                                        (typedef (tpl-pmtr (scope FT-chunk 'value_type))
                                                 'AtomicType)
                                        (tpl-use 'sum 'AtomicType))))
      (dn 'norm
          (lambda (name)
            (build-used-catamorphism name
                                     (lambda (ext)
                                       (fc (scope 'std 'sqrt)
                                           (fc (c 'nebo_sum ext)
                                               (fc 'pow 'fexpr "2")))))))
)))
