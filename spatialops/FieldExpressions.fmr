 ; Copyright (c) 2011 The University of Utah
 ;
 ; Permission is hereby granted, free of charge, to any person obtaining a copy
 ; of this software and associated documentation files (the "Software"), to
 ; deal in the Software without restriction, including without limitation the
 ; rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ; sell copies of the Software, and to permit persons to whom the Software is
 ; furnished to do so, subject to the following conditions:
 ;
 ; The above copyright notice and this permission notice shall be included in
 ; all copies or substantial portions of the Software.
 ;
 ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ; IN THE SOFTWARE.

(let* ([id (lambda (x) x)]
       [c concat-chunk]
       [b between-chunk]
       [b/a between/attach-chunk]
       [n namespace-define-chunk]
       [i (lambda chunks (between/attach-chunk semi-colon-chunk blank-line-chunk chunks))]
       [d described-smts-chunk]
       [p paren-list-chunk]
       [m macro-define-chunk]
       [s space-chunk]
       [bs (lambda chunks (apply b s chunks))]
       [typedef typedef-smt-chunk]
       [fc function-call-chunk]
       [mfc member-function-call-chunk]
       [fcn-def function-define-chunk]
       [v-fcn-def void-function-define-chunk]
       [v-fcn-dcl void-function-declare-chunk]
       [r-fcn-def returning-function-define-chunk]
       [fcn-dcl function-declare-chunk]
       [constize constize-chunk]
       [s-fcn-dcl static-function-declare-chunk]
       [tpl-def template-define-chunk]
       [srt-dcl struct-declare-chunk]
       [srt-def struct-define-chunk]
       [tpl-srt-dcl template-struct-declare-chunk]
       [tpl-srt-def template-struct-define-chunk]
       [tpl-use template-use-chunk]
       [tpl-pmtr (lambda (pmtr) (c typename-chunk s pmtr))]
       [sub-tpl-use (lambda (pmtr) (c template-chunk s pmtr))]
       [tpl-fcn-use (lambda pmtrs (sub-tpl-use (apply tpl-use pmtrs)))]
       [sec-def section-define-chunk]
       [cons-asgn constructor-assignment-chunk]
       [scope scope-resolution-operator-chunk]
       [enum (lambda enums (bs 'enum (arg-list-chunk open-crbr-chunk comma-chunk close-crbr-chunk enums)))]
       [kernel-use (lambda (name . args) (tpl-use name (tpl-use null (tpl-use null args))))]
       [device-use (lambda chunks (c '__device__ s chunks))]
       [gpu-or (lambda (then else) (pp-conditional-ifdef-chunk '__CUDACC__ (c then) (if (not else) #false (c else))))]
       [gpu-only (lambda chunks (gpu-or chunks #false))]
       [par (lambda chunks (p (bs chunks)))]
       [ter-cond (lambda (if then else) (par if '? then colon-chunk else))]
       [op-asgn (lambda (op lhs . rhs) (bs lhs op rhs))]
       [n= (lambda (lhs . rhs) (op-asgn '= lhs rhs))]
       [nt= (lambda (type lhs . rhs) (n= (bs type lhs) rhs))]
       [nt=c (lambda (type lhs . rhs) (nt= (bs const-chunk type) lhs rhs))]
       [ngpu= (lambda (lhs . rhs) (op-asgn "|=" lhs rhs))]
       [n+= (lambda (lhs . rhs) (op-asgn '+= lhs rhs))]
       [n== (lambda (lhs . rhs) (op-asgn '== lhs rhs))]
       [n< (lambda (lhs . rhs) (op-asgn '< lhs rhs))]
       [n> (lambda (lhs . rhs) (op-asgn '> lhs rhs))]
       [n<= (lambda (lhs . rhs) (op-asgn '<= lhs rhs))]
       [n>= (lambda (lhs . rhs) (op-asgn '>= lhs rhs))]
       [n+ (lambda (lhs . rhs) (op-asgn '+ lhs rhs))]
       [n- (lambda (lhs . rhs) (op-asgn '- lhs rhs))]
       [n* (lambda (lhs . rhs) (op-asgn '* lhs rhs))]
       [n/ (lambda (lhs . rhs) (op-asgn '/ lhs rhs))]
       [n% (lambda (lhs . rhs) (op-asgn '% lhs rhs))]
       [n++ (lambda (chunk) (c chunk '++))]
       [tc (lambda chunks (bs chunks const-chunk))]
       [ref (lambda chunks (bs chunks '&))]
       [cref (lambda chunks (ref (tc chunks)))]
       [ptr (lambda chunks (bs chunks '*))]
       [cptr (lambda chunks (ptr (tc chunks)))]
       [ad (lambda (type arg) (bs type arg))]
       [adc (lambda (type arg) (bs (tc type) arg))]
       [adr (lambda (type arg) (bs (ref type) arg))]
       [adcr (lambda (type arg) (bs (cref type) arg))]
       [adp (lambda (type arg) (bs (ptr type) arg))]
       [adcp (lambda (type arg) (bs (cptr type) arg))]
       [report-VG-chunk 'PossibleValidGhost]
       [VG-chunk 'ValidGhost]
       [SH-chunk 'Shift]
       [NE-chunk 'NeboExpression]
       [NBE-chunk 'NeboBooleanExpression]
       [FT-chunk 'FieldType]
       [NS-chunk 'NeboScalar]
       [NB-chunk 'NeboBoolean]
       [NCF-chunk 'NeboConstField]
       [NF-chunk 'NeboField]
       [Nil-chunk 'NeboNil]
       [SClause-chunk 'NeboSimpleClause]
       [SFClause-chunk 'NeboSimpleFinalClause]
       [SCond-chunk 'NeboSimpleCond]
       [Clause-chunk 'NeboClause]
       [Cond-chunk 'NeboCond]
       [CT-chunk 'ClauseType]
       [IntVec (scope 'structured 'IntVec)]
       [NSP 'NeboStencilPoint]
       [NSPL 'NeboStencilPointList]
       [NSCL 'NeboStencilCoefList]
       [NSt 'NeboStencil]
       [pp-header-file-chunk-with-license
        (lambda (file-name file-setup . chunks)
          (c (b new-line-chunk
                "/*"
                " * Copyright (c) 2011 The University of Utah"
                " *"
                " * Permission is hereby granted, free of charge, to any person obtaining a copy"
                " * of this software and associated documentation files (the \"Software\"), to"
                " * deal in the Software without restriction, including without limitation the"
                " * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or"
                " * sell copies of the Software, and to permit persons to whom the Software is"
                " * furnished to do so, subject to the following conditions:"
                " *"
                " * The above copyright notice and this permission notice shall be included in"
                " * all copies or substantial portions of the Software."
                " *"
                " * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"
                " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"
                " * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE"
                " * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"
                " * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING"
                " * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS"
                " * IN THE SOFTWARE."
                " */")
             blank-line-chunk
             (pp-header-file-chunk file-name file-setup chunks)))]
       [bm-constructor (lambda (parameters assignments body)
                         (lambda (name) (constructor-chunk name parameters assignments body)))]
       [type-trans (lambda (new-type)
                     (lambda (old-type) (tpl-pmtr (scope old-type new-type))))]
       [flatten*-to-list (lambda args (let ([flat-args (flatten* args)])
                                        (if (list? flat-args)
                                            flat-args
                                            (list flat-args))))]
       [arg-swap (lambda (proc num1 num2 report)
                   (lambda args1 (if (not (= num1 (length args1)))
                                     (error (string-append report ": first set of arguments does not match expected number"))
                                     (lambda args2 (if (not (= num2 (length args2)))
                                                       (error (string-append report ": second set of arguments does not match expected number"))
                                                       (apply proc (append args2 args1)))))))]
       [combine-args (lambda (final-proc combine-proc numbers report)
                       (let* ([skip-num (first numbers)]
                              [combine-num (second numbers)]
                              [final-num (third numbers)]
                              [total-num (+ skip-num combine-num final-num)])
                         (lambda args (if (not (= total-num (length args)))
                                          (error (string-append report ": arguments do not match expected number"))
                                          (apply final-proc
                                                 (append (take args skip-num)
                                                         (list (apply combine-proc (take (drop args skip-num)
                                                                                         combine-num)))
                                                         (drop args (+ skip-num combine-num))))))))]
       [build-mode
        (lambda (name
                 mode
                 tpl-pars
                 typedefs
                 constructor
                 publics
                 privates)
          (tpl-srt-def name
                       (map tpl-pmtr (flatten* tpl-pars FT-chunk))
                       (list mode tpl-pars FT-chunk)
                       (sec-def public-chunk
                                (typedef FT-chunk 'field_type)
                                (typedef (scope (tpl-pmtr 'field_type)
                                                'memory_window)
                                         'MemoryWindow)
                                typedefs
                                (constructor name)
                                publics)
                       (sec-def private-chunk privates)))]
       [build-Initial
        (lambda (name
                 add-const
                 tpl-irreg-pars
                 tpl-reg-pars
                 typedefs
                 tpl-irreg-args
                 VG-type
                 constructor
                 SW-cons-args
                 RP-cons-args
                 GPU-cons-args
                 RD-cons-args
                 publics
                 privates)
          (let ([SW-tpl-irreg-args (if (null? tpl-irreg-args) null (first tpl-irreg-args))]
                [RP-tpl-irreg-args (if (null? tpl-irreg-args) null (second tpl-irreg-args))]
                [GPU-tpl-irreg-args (if (null? tpl-irreg-args) null (third tpl-irreg-args))]
                [RD-tpl-irreg-args (if (null? tpl-irreg-args) null (fourth tpl-irreg-args))])
            (build-mode name
                        'Initial
                        (list tpl-irreg-pars tpl-reg-pars)
                        (list typedefs
                              (typedef (tpl-use name
                                                'SeqWalk
                                                SW-tpl-irreg-args
                                                (map (type-trans 'SeqWalkType)
                                                     (flatten*-to-list tpl-reg-pars))
                                                FT-chunk)
                                       'SeqWalkType)
                              (typedef (tpl-use name
                                                'ResizePrep
                                                RP-tpl-irreg-args
                                                (map (type-trans 'ResizePrepType)
                                                     (flatten*-to-list tpl-reg-pars))
                                                FT-chunk)
                                       'ResizePrepType)
                              (gpu-only (typedef (tpl-use name
                                                          'GPUWalk
                                                          GPU-tpl-irreg-args
                                                          (map (type-trans 'GPUWalkType)
                                                               (flatten*-to-list tpl-reg-pars))
                                                          FT-chunk)
                                                 'GPUWalkType))
                              (typedef (tpl-use name
                                                'Reduction
                                                RD-tpl-irreg-args
                                                (map (type-trans 'ReductionType)
                                                     (flatten*-to-list tpl-reg-pars))
                                                FT-chunk)
                                       'ReductionType)
                              (typedef VG-type report-VG-chunk))
                        constructor
                        (list (tpl-def (list (tpl-pmtr VG-chunk)
                                             (tpl-pmtr SH-chunk))
                                       (r-fcn-def (add-const (fcn-dcl 'init 'SeqWalkType))
                                                  null
                                                  (fc 'SeqWalkType SW-cons-args)))
                              (tpl-def (list (tpl-pmtr VG-chunk))
                                       (r-fcn-def (add-const (fcn-dcl 'resize_prep 'ResizePrepType))
                                                  null
                                                  (fc 'ResizePrepType RP-cons-args)))
                              (gpu-only (tpl-def (list (tpl-pmtr VG-chunk)
                                                       (tpl-pmtr SH-chunk))
                                                 (r-fcn-def (add-const (fcn-dcl 'gpu_init 'GPUWalkType))
                                                            null
                                                            (fc 'GPUWalkType GPU-cons-args))))
                              (tpl-def (list (tpl-pmtr VG-chunk)
                                             (tpl-pmtr SH-chunk))
                                       (r-fcn-def (add-const (fcn-dcl 'reduce_init 'ReductionType))
                                                  null
                                                  (fc 'ReductionType RD-cons-args)))
                              publics)
                        privates)))]
       [bs-Initial (arg-swap build-Initial 10 4 "bs-Initial")]
       [build-ResizePrep
        (lambda (name
                 add-const
                 tpl-irreg-pars
                 tpl-reg-pars
                 typedefs
                 tpl-irreg-args
                 constructor
                 RS-cons-args
                 publics
                 privates)
          (build-mode name
                      'ResizePrep
                      (list tpl-irreg-pars tpl-reg-pars)
                      (list typedefs
                            (typedef (tpl-use name
                                              'Resize
                                              tpl-irreg-args
                                              (map (type-trans 'ResizeType)
                                                   (flatten*-to-list tpl-reg-pars))
                                              FT-chunk)
                                     'ResizeType))
                      constructor
                      (list (r-fcn-def (add-const (fcn-dcl 'resize
                                                           'ResizeType
                                                           (adcr IntVec 'split)
                                                           (adcr IntVec 'location)))
                                       null
                                       (fc 'ResizeType RS-cons-args))
                            publics)
                      privates))]
       [bs-ResizePrep (arg-swap build-ResizePrep 6 4 "bs-ResizePrep")]
       [build-Resize
        (lambda (name
                 add-const
                 tpl-irreg-pars
                 tpl-reg-pars
                 typedefs
                 tpl-irreg-args
                 constructor
                 SW-cons-args
                 publics
                 privates)
            (build-mode name
                        'Resize
                        (list tpl-irreg-pars tpl-reg-pars)
                        (list typedefs
                              (typedef (tpl-use name
                                                'SeqWalk
                                                tpl-irreg-args
                                                (map (type-trans 'SeqWalkType)
                                                     (flatten*-to-list tpl-reg-pars))
                                                FT-chunk)
                                       'SeqWalkType))
                        constructor
                        (list (tpl-def (tpl-pmtr SH-chunk)
                                       (r-fcn-def (add-const (fcn-dcl 'init 'SeqWalkType))
                                                  null
                                                  (fc 'SeqWalkType SW-cons-args)))
                              publics)
                        privates))]
       [bs-Resize (arg-swap build-Resize 6 4 "bs-Resize")]
       [build-SeqWalk
        (lambda (name
                 tpl-pars
                 typedefs
                 constructor
                 next
                 at-end
                 has-length
                 publics
                 privates)
          (build-mode name
                      'SeqWalk
                      tpl-pars
                      typedefs
                      constructor
                      (list (v-fcn-def 'next null next)
                            (r-fcn-def (constize (fcn-dcl 'at_end 'bool))
                                       null
                                       at-end)
                            (r-fcn-def (constize (fcn-dcl 'has_length 'bool))
                                       null
                                       has-length)
                            publics)
                      privates))]
       [bs-SeqWalk (arg-swap build-SeqWalk 7 2 "bs-SeqWalk")]
       [build-GPU-general
        (lambda (name
                 tpl-pars
                 typedefs
                 constructor
                 start-body
                 next-body
                 publics
                 privates)
          (gpu-only
           (build-mode name
                       'GPUWalk
                       tpl-pars
                       (list (typedef (tpl-pmtr (scope 'field_type 'value_type))
                                      'AtomicType)
                             typedefs)
                       constructor
                       (list (device-use (v-fcn-def 'start
                                                    (list (bs 'int 'x)
                                                          (bs 'int 'y))
                                                    start-body))
                             (device-use (v-fcn-def 'next
                                                    null
                                                    next-body))
                             publics)
                       privates)))]
       [build-GPU-const (combine-args build-GPU-general
                                      (lambda (eval-result publics)
                                        (list (device-use (r-fcn-def (fcn-dcl 'eval 'AtomicType)
                                                                     null
                                                                     eval-result))
                                              publics))
                                      (list 6 2 1)
                                      "build-GPU-const")]
       [bs-GPU-const (arg-swap build-GPU-const 7 2 "bs-GPU-const")]
       [build-GPU-nonconst (combine-args build-GPU-general
                                         (lambda (valid-result at-end-result ref-result publics)
                                           (list (device-use (r-fcn-def (fcn-dcl 'valid 'bool)
                                                                        null
                                                                        valid-result))
                                                 (device-use (r-fcn-def (fcn-dcl 'at_end 'bool)
                                                                        null
                                                                        at-end-result))
                                                 (device-use (r-fcn-def (fcn-dcl 'ref (ref 'AtomicType))
                                                                        null
                                                                        ref-result))
                                                 publics))
                                         (list 6 4 1)
                                         "build-GPU-nonconst")]
       [bs-GPU-nonconst (arg-swap build-GPU-nonconst 9 2 "bs-GPU-nonconst")]
       [build-Reduction
        (lambda (name
                 tpl-pars
                 typedefs
                 constructor
                 next
                 at-end
                 has-length
                 eval-type
                 eval-result
                 publics
                 privates)
          (build-mode name
                      'Reduction
                      tpl-pars
                      typedefs
                      constructor
                      (list (v-fcn-def 'next null next)
                            (r-fcn-def (constize (fcn-dcl 'at_end 'bool))
                                       null
                                       at-end)
                            (r-fcn-def (constize (fcn-dcl 'has_length 'bool))
                                       null
                                       has-length)
                            (r-fcn-def (constize (fcn-dcl 'eval eval-type))
                                       null
                                       eval-result)
                            publics)
                      privates))]
       [bs-Reduction (arg-swap build-Reduction 9 2 "bs-Reduction")]
       [build-struct
        (lambda (name
                 const?
                 tpl-irreg-pars
                 tpl-reg-pars
                 Initial
                 ResizePrep
                 Resize
                 SeqWalk
                 GPUWalk
                 Reduction)
          (let ([add-const (if const? constize-chunk id)]
                [tpl-pars (list tpl-irreg-pars tpl-reg-pars)])
            (i (tpl-srt-dcl name
                            (map tpl-pmtr (flatten* 'CurrentMode tpl-irreg-pars tpl-reg-pars FT-chunk))
                            null)
               (Initial name add-const tpl-irreg-pars tpl-reg-pars)
               (ResizePrep name add-const tpl-irreg-pars tpl-reg-pars)
               (Resize name add-const tpl-irreg-pars tpl-reg-pars)
               (SeqWalk name tpl-pars)
               (GPUWalk name tpl-pars)
               (Reduction name tpl-pars))))]
       [build-Nary-struct
        (lambda (name number eval-return-type internal-use)
          (let* ([num-lst (if (>= 1 number)
                               '("")
                               (map number->string (sequence->list (in-range 1 (+ 1 number)))))]
                 [IN-op-lst (map (lambda (str) (c 'op str)) num-lst)]
                 [op-lst (map (lambda (str) (c 'operand str)) num-lst)]
                 [Op-lst (map (lambda (str) (c 'Operand str)) num-lst)]
                 [op_-lst (map (lambda (op) (c op '_)) op-lst)]
                 [mapper (lambda (proc . lsts) (apply map proc lsts))]
                 [IN-typedef (lambda (type)
                               (lambda (Op) (tpl-pmtr (scope Op type))))]
                 [build-VG (lambda (Op-VG-lst)
                             (cond [(equal? 1 (length Op-VG-lst)) (first Op-VG-lst)]
                                   [(equal? 2 (length Op-VG-lst)) (tpl-pmtr (scope (scope 'structured (tpl-use 'Minimum
                                                                                                               (first Op-VG-lst)
                                                                                                               (second Op-VG-lst)))
                                                                                   'result))]
                                   [else (tpl-pmtr (scope (scope 'structured (tpl-use 'Minimum
                                                                                      (first Op-VG-lst)
                                                                                      (build-VG (rest Op-VG-lst))))
                                                          'result))]))]
                 [gen-data-mems (mapper (lambda (Op op_) (adc Op op_))
                                        Op-lst
                                        op_-lst)]
                 [gen-typedef (lambda (type) (lambda (Op) (tpl-pmtr (scope Op type))))]
                 [gen-constructor (bm-constructor (mapper (lambda (Op op) (adcr Op op))
                                                          Op-lst
                                                          op-lst)
                                                  (mapper (lambda (op_ op) (cons-asgn op_ op))
                                                          op_-lst
                                                          op-lst)
                                                  null)]
                 [SW-fcn (lambda (att btwn fcn)
                           (b/a att btwn (mapper (lambda (op_) (mfc op_ fcn))
                                                 op_-lst)))]
                 [SW-check (lambda (fcn)
                             (par (SW-fcn empty-chunk
                                          (c s "||" s)
                                          fcn)))]
                 [SW-data-mems (mapper (lambda (Op op_) (bs Op op_))
                                       Op-lst
                                       op_-lst)])
            (list
             (build-struct name
                           #true
                           null
                           Op-lst
                           (bs-Initial null
                                       null
                                       (build-VG (mapper (lambda (Op) (tpl-pmtr (scope Op report-VG-chunk)))
                                                         Op-lst))
                                       gen-constructor
                                       (mapper (lambda (op_) (mfc op_ (tpl-fcn-use 'init VG-chunk SH-chunk)))
                                               op_-lst)
                                       (mapper (lambda (op_) (mfc op_ (tpl-fcn-use 'resize_prep VG-chunk)))
                                               op_-lst)
                                       (mapper (lambda (op_) (mfc op_ (tpl-fcn-use 'gpu_init VG-chunk SH-chunk)))
                                               op_-lst)
                                       (mapper (lambda (op_) (mfc op_ (tpl-fcn-use 'reduce_init VG-chunk SH-chunk)))
                                               op_-lst)
                                       null
                                       gen-data-mems)
                           (bs-ResizePrep null
                                          null
                                          gen-constructor
                                          (mapper (lambda (op_) (mfc op_ 'resize 'split 'location))
                                                  op_-lst)
                                          null
                                          gen-data-mems)
                           (bs-Resize null
                                      null
                                      gen-constructor
                                      (mapper (lambda (op_) (mfc op_ (tpl-fcn-use 'init SH-chunk)))
                                              op_-lst)
                                      null
                                      gen-data-mems)
                           (bs-SeqWalk (typedef eval-return-type 'EvalReturnType)
                                       gen-constructor
                                       (SW-fcn semi-colon-chunk s 'next)
                                       (SW-check 'at_end)
                                       (SW-check 'has_length)
                                       (r-fcn-def (constize (fcn-dcl 'eval 'EvalReturnType))
                                                  null
                                                  internal-use)
                                       SW-data-mems)
                           (bs-GPU-const null
                                         gen-constructor
                                         (mapper (lambda (op_) (mfc op_ 'start 'x 'y))
                                                 op_-lst)
                                         (mapper (lambda (op_) (mfc op_ 'next))
                                                 op_-lst)
                                         internal-use
                                         null
                                         SW-data-mems)
                           (bs-Reduction (typedef eval-return-type 'EvalReturnType)
                                         gen-constructor
                                         (SW-fcn semi-colon-chunk s 'next)
                                         (SW-check 'at_end)
                                         (SW-check 'has_length)
                                         'EvalReturnType
                                         internal-use
                                         null
                                         SW-data-mems)))))]
       [build-binary-function-struct
        (lambda (name internal-name)
          (build-Nary-struct name
                             2
                             (scope (tpl-pmtr FT-chunk)
                                    'value_type)
                             (fc internal-name
                                 (mfc 'operand1_ 'eval)
                                 (mfc 'operand2_ 'eval))))]
       [build-binary-operator-struct
        (lambda (name internal-name)
          (build-Nary-struct name
                             2
                             (scope (tpl-pmtr FT-chunk)
                                    'value_type)
                             (par (mfc 'operand1_ 'eval)
                                  internal-name
                                  (mfc 'operand2_ 'eval))))]
       [build-unary-function-struct
        (lambda (name internal-name)
          (build-Nary-struct name
                             1
                             (scope (tpl-pmtr FT-chunk)
                                    'value_type)
                             (fc internal-name
                                 (mfc 'operand_ 'eval))))]
       [build-comparison-struct
        (lambda (name internal-name)
          (build-Nary-struct name
                             2
                             'bool
                             (par (mfc 'operand1_ 'eval)
                                  internal-name
                                  (mfc 'operand2_ 'eval))))]
       [build-unary-logical-function-struct
        (lambda (name internal-name)
          (build-Nary-struct name
                             1
                             'bool
                             (fc internal-name
                                 (mfc 'operand_ 'eval))))]
       [build-logical-operator-struct
        (lambda (name internal-name)
          (build-Nary-struct name
                             2
                             'bool
                             (par (mfc 'operand1_ 'eval)
                                  internal-name
                                  (mfc 'operand2_ 'eval))))]
       [abs-SubExpr (lambda (str)
                      (let* ([SE (c 'SubExpr str)]
                             [arg (c 'arg str)]
                             [FT (scope (tpl-pmtr SE)
                                        'field_type)])
                        (list FT
                              SE
                              (lambda (FT)
                                (tpl-pmtr (scope (tpl-use 'Standardize SE FT)
                                                 'StandardType)))
                              (lambda (FT) (adcr SE arg))
                              (fc (scope (tpl-use 'Standardize SE FT-chunk)
                                         'standardType)
                                  arg))))]
       [abs-Scalar (lambda (str)
                     (let ([arg (c 'arg str)])
                       (list #false
                             #false
                             (lambda (FT)
                               (tpl-use NS-chunk 'Initial FT))
                             (lambda (FT)
                               (adcr (scope FT 'value_type)
                                     arg))
                             (fc (c 'Type str)
                                 arg))))]
       [abs-SubBoolExpr (lambda (str)
                          (let* ([SE (c 'SubBoolExpr str)]
                                 [arg (c 'arg str)]
                                 [FT (scope (tpl-pmtr SE)
                                            'field_type)])
                            (list FT
                                  SE
                                  (lambda (FT)
                                    (tpl-pmtr (scope SE 'Expression)))
                                  (lambda (FT) (adcr SE arg))
                                  (mfc arg 'expr))))]
       [abs-Boolean (lambda (str)
                      (let ([arg (c 'arg str)])
                        (list #false
                              #false
                              (lambda (FT)
                                (tpl-use NB-chunk 'Initial FT))
                              (lambda (FT) (adcr 'bool arg))
                              (fc (c 'Type str)
                                  arg))))]
       [build-interface-case
        (lambda (description-chunk abs-type-lst name external-name expression-term)
          (let* ([FT-clause first]
                 [tpl-arg second]
                 [StdType third]
                 [parameter fourth]
                 [argument fifth]
                 [number (length abs-type-lst)]
                 [num-lst (if (>= 1 number)
                              '("")
                              (map number->string (sequence->list (in-range 1 (+ 1 number)))))]
                 [type-lst (map (lambda (abs-type str) (abs-type str))
                                abs-type-lst
                                num-lst)]
                 [Type-lst (map (lambda (str) (c 'Type str))
                                num-lst)]
                 [mapper (lambda (proc)
                           (map proc type-lst))]
                 [tpl-arg-lst (map (lambda (type) (tpl-pmtr type))
                                   (reverse (foldl (lambda (next crt) (if next
                                                                          (cons next crt)
                                                                          crt))
                                                   null
                                                   (mapper (lambda (type) (tpl-arg type))))))]
                 [FT (foldl (lambda (type crt) (cond [crt]
                                                     [(FT-clause type)]
                                                     [else #false]))
                            #false
                            type-lst)]
                 [StdType-lst (mapper (lambda (type) ((StdType type) FT)))]
                 [parameter-lst (mapper (lambda (type) ((parameter type) FT)))]
                 [StdType-typedef-lst (map (lambda (StdType Type) (typedef StdType Type))
                                           StdType-lst
                                           Type-lst)]
                 [arg-use-lst (map (lambda (Type type) (fc Type (argument type)))
                                   Type-lst
                                   type-lst)])
            (if (not FT)
                "ERROR: No FieldType found for use in a build-interface-case"
                (d description-chunk
                   (tpl-def tpl-arg-lst
                            (r-fcn-def
                             (fcn-dcl external-name
                                      (tpl-use expression-term
                                               (tpl-use name 'Initial StdType-lst FT)
                                               FT)
                                      parameter-lst)
                             (list (typedef FT FT-chunk)
                                   StdType-typedef-lst
                                   (typedef (tpl-use name 'Initial Type-lst FT-chunk)
                                            'ReturnType)
                                   (typedef (tpl-use expression-term 'ReturnType FT-chunk)
                                            'ReturnTerm))
                             (fc 'ReturnTerm (fc 'ReturnType arg-use-lst))))))))]
       [build-binary-interface
        (lambda (name
                 external-name
                 expression-term
                 Expr-abs
                 Expr-str
                 Val-abs
                 Val-str)
          (smt-list-chunk blank-line-chunk
                          (build-interface-case (bs Expr-str 'X Expr-str)
                                                (list Expr-abs Expr-abs)
                                                name
                                                external-name
                                                expression-term)
                          (build-interface-case (bs Expr-str 'X Val-str)
                                                (list Expr-abs Val-abs)
                                                name
                                                external-name
                                                expression-term)
                          (build-interface-case (bs Val-str 'X Expr-str)
                                                (list Val-abs Expr-abs)
                                                name
                                                external-name
                                                expression-term)))]
       [build-unary-interface
        (lambda (name
                 external-name
                 expression-term
                 Expr-abs
                 Expr-str)
         (build-interface-case Expr-str
                               (list Expr-abs)
                               name
                               external-name
                               expression-term))]
       [build-binary-function
        (lambda (name internal-name external-name)
          (smt-list-chunk blank-line-chunk
                          (build-binary-function-struct name internal-name)
                          (build-binary-interface name external-name NE-chunk abs-SubExpr 'SubExpr abs-Scalar 'Scalar)))]
       [build-binary-operator
        (lambda (name internal-name external-name)
          (smt-list-chunk blank-line-chunk
                          (build-binary-operator-struct name internal-name)
                          (build-binary-interface name external-name NE-chunk abs-SubExpr 'SubExpr abs-Scalar 'Scalar)))]
       [build-unary-function
        (lambda (name internal-name external-name)
          (smt-list-chunk blank-line-chunk
                          (build-unary-function-struct name internal-name)
                          (build-unary-interface name external-name NE-chunk abs-SubExpr 'SubExpr)))]
       [build-comparison-operator
        (lambda (name internal-name external-name)
          (smt-list-chunk blank-line-chunk
                          (build-comparison-struct name internal-name)
                          (build-binary-interface name external-name NBE-chunk abs-SubExpr 'SubExpr abs-Scalar 'Scalar)))]
       [build-binary-logical-operator
        (lambda (name internal-name external-name)
          (smt-list-chunk blank-line-chunk
                          (build-logical-operator-struct name internal-name)
                          (build-binary-interface name external-name NBE-chunk abs-SubBoolExpr 'SubBoolExpr abs-Boolean 'Boolean)))]
       [build-unary-logical-function
        (lambda (name internal-name external-name)
          (smt-list-chunk blank-line-chunk
                          (build-unary-logical-function-struct name internal-name)
                          (build-unary-interface name external-name NBE-chunk abs-SubBoolExpr 'SubBoolExpr)))]
       [build-unary-to-logical-function
        (lambda (name internal-name external-name)
          (smt-list-chunk blank-line-chunk
                          (build-unary-logical-function-struct name internal-name)
                          (build-unary-interface name external-name NBE-chunk abs-SubExpr 'SubExpr)))]
       )
  ; beginnning of file
  (pp-header-file-chunk-with-license
   'SpatialOps_FieldExpressions_h
   (b blank-line-chunk
      (pp-includes-chunk 'spatialops/SpatialOpsConfigure.h
                         'spatialops/structured/IndexTriplet.h
                         'spatialops/structured/GhostData.h
                         'spatialops/structured/SpatialField.h
                         'cmath
                         'math.h)
      (comment-env-chunk (pp-include-chunk 'iostream))
      (pp-conditional-ifdef-chunk
       'FIELD_EXPRESSION_THREADS
       (b new-line-chunk
          (pp-includes-chunk 'spatialops/SpatialOpsTools.h
                             'vector
                             'boost/bind.hpp
                             'spatialops/ThreadPool.h
                             'spatialops/structured/IntVec.h
                             'boost/interprocess/sync/interprocess_semaphore.hpp)
          (c (nt= 'namespace 'BI (scope 'boost 'interprocess))
             semi-colon-chunk))))
   (n 'SpatialOps
      (d "Meta-programming compiler flags"
         (struct-declare-chunk 'UseWholeIterator)
         (struct-declare-chunk 'UseInteriorIterator))
      (let ([IteratorStyle
             (lambda (iterator result-type)
               (d iterator
                  (tpl-srt-def 'IteratorStyle
                               (list (tpl-pmtr 'FirstType)
                                     (tpl-pmtr 'SecondType))
                               (list iterator 'FirstType 'SecondType)
                               (typedef result-type 'result))))])
        (list (tpl-srt-dcl 'IteratorStyle
                           (list (tpl-pmtr 'IteratorType)
                                 (tpl-pmtr 'FirstType)
                                 (tpl-pmtr 'SecondType))
                           null)
              (IteratorStyle 'UseWholeIterator 'FirstType)
              (IteratorStyle 'UseInteriorIterator 'SecondType)))
      (let ([TemplateIf
             (lambda (result result-type)
               (d result
                  (tpl-srt-def 'TemplateIf
                               (list (tpl-pmtr 'TrueResult)
                                     (tpl-pmtr 'FalseResult))
                               (list result 'TrueResult 'FalseResult)
                               (typedef result-type 'result))))])
        (list (tpl-srt-dcl 'TemplateIf
                           (list (ad 'bool 'Boolean)
                                 (tpl-pmtr 'FirstType)
                                 (tpl-pmtr 'SecondType))
                           null)
              (TemplateIf 'true 'TrueResult)
              (TemplateIf 'false 'FalseResult)))
      (let ([build-expression-type
             (lambda (name)
               (tpl-srt-def name
                            (list (tpl-pmtr 'Operand)
                                  (tpl-pmtr FT-chunk))
                            null
                            (sec-def public-chunk
                                     (typedef FT-chunk 'field_type)
                                     (typedef 'Operand 'Expression)
                                     (constructor-chunk name
                                                        (adcr 'Operand 'given)
                                                        (cons-asgn 'expr_ 'given))
                                     (r-fcn-def (constize (fcn-dcl 'expr
                                                                   (cref 'Operand)))
                                                null
                                                'expr_))
                            (sec-def private-chunk
                                     (bs 'Operand 'expr_))))])
        (list (build-expression-type NE-chunk)
              (build-expression-type NBE-chunk)))
      (let ([build-mode-def (lambda (name) (struct-declare-chunk name))])
        (d 'Modes:
           (build-mode-def 'Initial)
           (build-mode-def 'ResizePrep)
           (build-mode-def 'Resize)
           (build-mode-def 'SeqWalk)
           (gpu-only (build-mode-def 'GPUWalk))
           (build-mode-def 'Reduction)))
      (build-struct NS-chunk
                    #true
                    null
                    null
                    (bs-Initial (typedef (scope (tpl-pmtr FT-chunk)
                                                'value_type)
                                         'AtomicType)
                                null
                                (scope 'structured 'InfiniteGhostData)
                                (bm-constructor (adc 'AtomicType 'v)
                                                (cons-asgn 'value_ 'v)
                                                null)
                                'value_
                                'value_
                                'value_
                                'value_
                                null
                                (adc 'AtomicType 'value_))
                    (bs-ResizePrep (typedef (scope (tpl-pmtr FT-chunk)
                                                   'value_type)
                                            'AtomicType)
                                   null
                                   (bm-constructor (adc 'AtomicType 'value)
                                                   (cons-asgn 'value_ 'value)
                                                   null)
                                   'value_
                                   null
                                   (adc 'AtomicType 'value_))
                    (bs-Resize (typedef (scope (tpl-pmtr FT-chunk)
                                               'value_type)
                                        'AtomicType)
                               null
                               (bm-constructor (adc 'AtomicType 'value)
                                               (cons-asgn 'value_ 'value)
                                               null)
                               'value_
                               null
                               (adc 'AtomicType 'value_))
                    (bs-SeqWalk (typedef (scope (tpl-pmtr FT-chunk)
                                                'value_type)
                                         'AtomicType)
                                (bm-constructor (adc 'AtomicType 'value)
                                                (cons-asgn 'value_ 'value)
                                                null)
                                null
                                'false
                                'false
                                (r-fcn-def (constize (fcn-dcl 'eval (tc 'AtomicType)))
                                          null
                                          'value_)
                                (adc 'AtomicType 'value_))
                    (bs-GPU-const null
                                  (bm-constructor (adc 'AtomicType 'value)
                                                  (cons-asgn 'value_ 'value)
                                                  null)
                                  null
                                  null
                                  'value_
                                  null
                                  (adc 'AtomicType 'value_))
                    (bs-Reduction (typedef (scope (tpl-pmtr FT-chunk)
                                                  'value_type)
                                           'AtomicType)
                                  (bm-constructor (adc 'AtomicType 'value)
                                                  (cons-asgn 'value_ 'value)
                                                  null)
                                  null
                                  'false
                                  'false
                                  'AtomicType
                                  'value_
                                  null
                                  (adc 'AtomicType 'value_)))
      (build-struct NB-chunk
                    #true
                    null
                    null
                    (bs-Initial null
                                null
                                (scope 'structured 'InfiniteGhostData)
                                (bm-constructor (adc 'bool 'v)
                                                (cons-asgn 'value_ 'v)
                                                null)
                                'value_
                                'value_
                                'value_
                                'value_
                                null
                                (adc 'bool 'value_))
                    (bs-ResizePrep null
                                   null
                                   (bm-constructor (adc 'bool 'value)
                                                   (cons-asgn 'value_ 'value)
                                                   null)
                                   'value_
                                   null
                                   (adc 'bool 'value_))
                    (bs-Resize null
                               null
                               (bm-constructor (adc 'bool 'value)
                                               (cons-asgn 'value_ 'value)
                                               null)
                               'value_
                               null
                               (adc 'bool 'value_))
                    (bs-SeqWalk null
                                (bm-constructor (adc 'bool 'value)
                                                (cons-asgn 'value_ 'value)
                                                null)
                                null
                                'false
                                'false
                                (r-fcn-def (constize (fcn-dcl 'eval (tc 'bool)))
                                          null
                                          'value_)
                                (adc 'bool 'value_))
                    (bs-GPU-const null
                                  (bm-constructor (adc 'bool 'value)
                                                  (cons-asgn 'value_ 'value)
                                                  null)
                                  null
                                  null
                                  'value_
                                  null
                                  (adc 'bool 'value_))
                    (bs-Reduction null
                                  (bm-constructor (adc 'bool 'value)
                                                  (cons-asgn 'value_ 'value)
                                                  null)
                                  null
                                  'false
                                  'false
                                  'bool
                                  'value_
                                  null
                                  (adc 'bool 'value_)))
      (build-struct NCF-chunk
                    #true
                    null
                    null
                    (bs-Initial null
                                null
                                (tpl-pmtr (scope (scope 'structured (tpl-use 'GhostFromField FT-chunk))
                                                 'result))
                                (bm-constructor (adcr FT-chunk 'f)
                                                (cons-asgn 'field_ 'f)
                                                null)
                                (mfc 'field_ (tpl-fcn-use 'resize_ghost_and_shift VG-chunk SH-chunk))
                                (mfc 'field_ (tpl-fcn-use 'resize_ghost VG-chunk))
                                (mfc 'field_ (tpl-fcn-use 'resize_ghost_and_shift VG-chunk SH-chunk))
                                (mfc 'field_ (tpl-fcn-use 'resize_ghost_and_shift VG-chunk SH-chunk))
                                (r-fcn-def (constize (fcn-dcl 'field (cref FT-chunk)))
                                           null
                                           'field_)
                                (adc FT-chunk 'field_))
                    (bs-ResizePrep null
                                   null
                                   (bm-constructor (adcr FT-chunk 'f)
                                                   (cons-asgn 'field_ 'f)
                                                   null)
                                   (fc FT-chunk
                                       (mfc (mfc 'field_ 'window_with_ghost)
                                            'refine
                                            'split
                                            'location)
                                       (mfc 'field_ 'field_values)
                                       (scope 'structured 'ExternalStorage))
                                   null
                                   (adc FT-chunk 'field_))
                    (bs-Resize null
                               null
                               (bm-constructor (adcr FT-chunk 'f)
                                               (cons-asgn 'field_ 'f)
                                               null)
                               (mfc 'field_ (tpl-fcn-use 'shift SH-chunk))
                               null
                               (adc FT-chunk 'field_))
                    (bs-SeqWalk (typedef (scope (tpl-pmtr FT-chunk)
                                                'value_type)
                                         'AtomicType)
                                (bm-constructor (adcr FT-chunk 'f)
                                                (list (cons-asgn 'iter_ (mfc 'f 'begin))
                                                      (cons-asgn 'end_ (mfc 'f 'end)))
                                                null)
                                (n++ 'iter_)
                                (n== 'iter_ 'end_)
                                'true
                                (r-fcn-def (constize (fcn-dcl 'eval (cref 'AtomicType)))
                                           null
                                           (c '* 'iter_))
                                (list (ad (tpl-pmtr (scope FT-chunk 'const_iterator))
                                          'iter_)
                                      (adc (tpl-pmtr (scope FT-chunk 'const_iterator))
                                           'end_)))
                    (bs-GPU-const null
                                  (bm-constructor
                                   (adcr FT-chunk 'f)
                                   (list (cons-asgn 'current_ (n+ (mfc 'f 'field_values 'EXTERNAL_CUDA_GPU (mfc 'f 'device_index))
                                                                  (n+ (mfc (mfc 'f 'window_with_ghost)
                                                                           'offset
                                                                           "0")
                                                                      (n* (mfc (mfc 'f 'window_with_ghost)
                                                                               'glob_dim
                                                                               "0")
                                                                          (par (n+ (mfc (mfc 'f 'window_with_ghost)
                                                                                        'offset
                                                                                        "1")
                                                                                   (par (n* (mfc (mfc 'f 'window_with_ghost)
                                                                                                 'glob_dim
                                                                                                 "1")
                                                                                            (mfc (mfc 'f 'window_with_ghost)
                                                                                                 'offset
                                                                                                 "2")))))))))
                                         (cons-asgn 'xLength_ (mfc (mfc 'f
                                                                        'window_with_ghost)
                                                                   'glob_dim
                                                                   "0"))
                                         (cons-asgn 'step_ (n* 'xLength_ (mfc (mfc 'f
                                                                                   'window_with_ghost)
                                                                              'glob_dim
                                                                              "1"))))
                                   null)
                                  (n+= 'current_ (n+ 'x (n* 'y 'xLength_)))
                                  (n+= 'current_ 'step_)
                                  (c '* 'current_)
                                  null
                                  (list (adcp 'AtomicType 'current_)
                                        (adc 'int 'xLength_)
                                        (adc 'int 'step_)))
                    (bs-Reduction (typedef (scope (tpl-pmtr FT-chunk)
                                                  'value_type)
                                           'AtomicType)
                                  (bm-constructor (adcr FT-chunk 'f)
                                                  (list (cons-asgn 'iter_ (mfc 'f 'begin))
                                                        (cons-asgn 'end_ (mfc 'f 'end)))
                                                  null)
                                  (n++ 'iter_)
                                  (n== 'iter_ 'end_)
                                  'true
                                  'AtomicType
                                  (c '* 'iter_)
                                  null
                                  (list (ad (tpl-pmtr (scope FT-chunk 'const_iterator))
                                            'iter_)
                                        (adc (tpl-pmtr (scope FT-chunk 'const_iterator))
                                             'end_))))
      (build-struct NF-chunk
                    #false
                    null
                    null
                    (bs-Initial null
                                null
                                (tpl-pmtr (scope (scope 'structured
                                                        (tpl-use 'GhostFromField FT-chunk))
                                                 'result))
                                (bm-constructor (ad FT-chunk 'f)
                                                (cons-asgn 'field_ 'f)
                                                null)
                                (mfc 'field_ (tpl-fcn-use 'resize_ghost_and_shift_and_maintain_interior VG-chunk SH-chunk))
                                (mfc 'field_ (tpl-fcn-use 'resize_ghost_and_maintain_interior VG-chunk))
                                (mfc 'field_ (tpl-fcn-use 'resize_ghost_and_shift_and_maintain_interior VG-chunk SH-chunk))
                                (mfc 'field_ (tpl-fcn-use 'resize_ghost_and_shift_and_maintain_interior VG-chunk SH-chunk))
                                null
                                (ad FT-chunk 'field_))
                    (bs-ResizePrep null
                                   null
                                   (bm-constructor (ad FT-chunk 'f)
                                                   (cons-asgn 'field_ 'f)
                                                   null)
                                   (fc FT-chunk
                                       (mfc (mfc 'field_ 'window_with_ghost)
                                            'refine
                                            'split
                                            'location)
                                       (mfc 'field_ 'field_values)
                                       (scope 'structured 'ExternalStorage))
                                   null
                                   (ad FT-chunk 'field_))
                    (bs-Resize null
                               null
                               (bm-constructor (ad FT-chunk 'f)
                                               (cons-asgn 'field_ 'f)
                                               null)
                               (mfc 'field_ (tpl-fcn-use 'shift_and_maintain_interior SH-chunk))
                               null
                               (ad FT-chunk 'field_))
                    (bs-SeqWalk (typedef (scope (tpl-pmtr FT-chunk)
                                                'value_type)
                                         'AtomicType)
                                (bm-constructor (ad FT-chunk 'f)
                                                (list (cons-asgn 'iter_ (mfc 'f 'begin))
                                                      (cons-asgn 'end_ (mfc 'f 'end)))
                                                null)
                                (n++ 'iter_)
                                (n== 'iter_ 'end_)
                                'true
                                (r-fcn-def (fcn-dcl 'ref (ref 'AtomicType))
                                           null
                                           (c '* 'iter_))
                                (list (ad (tpl-pmtr (scope FT-chunk 'iterator))
                                          'iter_)
                                      (adc (tpl-pmtr (scope FT-chunk 'iterator))
                                           'end_)))
                    (bs-GPU-nonconst  null
                                      (bm-constructor
                                       (ad FT-chunk 'f)
                                       (list (cons-asgn 'current_ (bs (n+ (mfc 'f 'field_values 'EXTERNAL_CUDA_GPU (mfc 'f 'device_index))
                                                                          (n+ (mfc (mfc 'f 'window_with_ghost)
                                                                                   'offset
                                                                                   "0")
                                                                              (n* (mfc (mfc 'f 'window_with_ghost)
                                                                                       'glob_dim
                                                                                       "0")
                                                                                  (par (n+ (mfc (mfc 'f 'window_with_ghost)
                                                                                                'offset
                                                                                                "1")
                                                                                           (par (n* (mfc (mfc 'f 'window_with_ghost)
                                                                                                         'glob_dim
                                                                                                         "1")
                                                                                                    (mfc (mfc 'f 'window_with_ghost)
                                                                                                         'offset
                                                                                                         "2"))))))))))
                                             (cons-asgn 'location_ "0")
                                             (cons-asgn 'valid_ 'false)
                                             (cons-asgn 'xLength_ (mfc (mfc 'f 'window_with_ghost)
                                                                       'glob_dim
                                                                       "0"))
                                             (cons-asgn 'xExtent_ (mfc (mfc 'f 'window_with_ghost)
                                                                       'extent
                                                                       "0"))
                                             (cons-asgn 'yExtent_ (mfc (mfc 'f 'window_with_ghost)
                                                                       'extent
                                                                       "1"))
                                             (cons-asgn 'zExtent_ (mfc (mfc 'f 'window_with_ghost)
                                                                       'extent
                                                                       "2"))
                                             (cons-asgn 'step_ (n* 'xLength_ (mfc (mfc 'f 'window_with_ghost)
                                                                                  'glob_dim
                                                                                  "1"))))
                                       null)
                                      (list (n= 'valid_ (par (n< 'x 'xExtent_) '&&
                                                             (n>= 'x "0") '&&
                                                             (n< 'y 'yExtent_) '&&
                                                             (n>= 'y "0")))
                                            (bs (fc 'if (fc 'valid))
                                                (body-chunk (n= 'location_ "0")
                                                            (n+= 'current_ (n+ 'x (n* 'y 'xLength_))))))
                                      (list (n+= 'current_ 'step_)
                                            (n++ 'location_))
                                      'valid_
                                      (n>= 'location_ 'zExtent_)
                                      (c '* 'current_)
                                      null
                                      (list (adp 'AtomicType 'current_)
                                            (ad 'int 'location_)
                                            (ad 'int 'valid_)
                                            (adc 'int 'xLength_)
                                            (adc 'int 'xExtent_)
                                            (adc 'int 'yExtent_)
                                            (adc 'int 'zExtent_)
                                            (adc 'int 'step_)))
                    (bs-Reduction (typedef (scope (tpl-pmtr FT-chunk)
                                                  'value_type)
                                           'AtomicType)
                                  (bm-constructor (ad FT-chunk 'f)
                                                  (list (cons-asgn 'iter_ (mfc 'f 'begin))
                                                      (cons-asgn 'end_ (mfc 'f 'end)))
                                                  null)
                                  (n++ 'iter_)
                                  (n== 'iter_ 'end_)
                                  'true
                                  (ref 'AtomicType)
                                  (c '* 'iter_)
                                  null
                                  (list (ad (tpl-pmtr (scope FT-chunk 'iterator))
                                            'iter_)
                                        (adc (tpl-pmtr (scope FT-chunk 'iterator))
                                             'end_))))
      (tpl-srt-dcl 'Standardize
                   (list (tpl-pmtr 'Input)
                         (tpl-pmtr FT-chunk))
                   null)
      (tpl-srt-def 'Standardize
                   (tpl-pmtr FT-chunk)
                   (list FT-chunk FT-chunk)
                   (typedef (tpl-use NCF-chunk 'Initial FT-chunk)
                            'StandardType)
                   (typedef (tpl-use NE-chunk 'StandardType FT-chunk)
                            'StandardTerm)
                   (r-fcn-def (s-fcn-dcl 'standardType
                                         'StandardType
                                         (adcr FT-chunk 'given))
                              null
                              (fc 'StandardType 'given))
                   (r-fcn-def (s-fcn-dcl 'standardTerm
                                         'StandardTerm
                                         (adcr FT-chunk 'given))
                              null
                              (fc 'StandardTerm (fc 'StandardType 'given))))
      (tpl-srt-def 'Standardize
                   (list (tpl-pmtr 'ExprType)
                         (tpl-pmtr FT-chunk))
                   (list (tpl-use NE-chunk 'ExprType FT-chunk)
                         FT-chunk)
                   (typedef 'ExprType
                            'StandardType)
                   (typedef (tpl-use NE-chunk 'StandardType FT-chunk)
                            'StandardTerm)
                   (r-fcn-def (s-fcn-dcl 'standardType
                                         'StandardType
                                         (adcr (tpl-use NE-chunk 'ExprType FT-chunk)
                                               'given))
                              null
                              (mfc 'given 'expr))
                   (r-fcn-def (s-fcn-dcl 'standardTerm
                                         'StandardTerm
                                         (adcr (tpl-use NE-chunk 'ExprType FT-chunk)
                                               'given))
                              null
                              'given))
      (build-binary-operator 'SumOp '+ (bs 'operator '+))
      (build-binary-operator 'DiffOp '- (bs 'operator '-))
      (build-binary-operator 'ProdOp '* (bs 'operator '*))
      (build-binary-operator 'DivOp '/ (bs 'operator '/))
      (build-unary-function 'SinFcn
                            (scope 'std 'sin)
                            'sin)
      (build-unary-function 'CosFcn
                            (scope 'std 'cos)
                            'cos)
      (build-unary-function 'TanFcn
                            (scope 'std 'tan)
                            'tan)
      (build-unary-function 'ExpFcn
                            (scope 'std 'exp)
                            'exp)
      (build-unary-function 'TanhFcn
                            (scope 'std 'tanh)
                            'tanh)
      (build-unary-function 'AbsFcn
                            (scope 'std 'abs)
                            'abs)
      (build-unary-function 'NegFcn '- (bs 'operator '-))
      (build-binary-function 'PowFcn
                             (scope 'std 'pow)
                             'pow)
      (build-unary-function 'SqrtFcn
                            (scope 'std 'sqrt)
                            'sqrt)
      (build-unary-function 'LogFcn
                            (scope 'std 'log)
                            'log)
      (build-comparison-operator 'EqualCmp '== (bs 'operator '==))
      (build-comparison-operator 'InequalCmp '!= (bs 'operator '!=))
      (build-comparison-operator 'LessThanCmp '< (bs 'operator '<))
      (build-comparison-operator 'LessThanEqualCmp '<= (bs 'operator '<=))
      (build-comparison-operator 'GreaterThanCmp '> (bs 'operator '>))
      (build-comparison-operator 'GreaterThanEqualCmp '>= (bs 'operator '>=))
      (build-binary-logical-operator 'AndOp '&& (bs 'operator '&&))
      (build-binary-logical-operator 'OrOp "||" (bs 'operator "||"))
      (build-unary-logical-function 'NotOp '! (bs 'operator '!))
; commented out isnan because nvcc has some weird problem with it
;      (build-unary-to-logical-function 'IsNanFcn
;                                       (scope 'std 'isnan)
;                                       'isnan)
      (srt-def (srt-dcl Nil-chunk)
               (typedef Nil-chunk 'ResizePrepType)
               (typedef Nil-chunk 'SeqWalkType)
               (gpu-only (typedef Nil-chunk 'GPUWalkType))
               (typedef Nil-chunk 'ReductionType)
               (typedef (scope 'structured 'InfiniteGhostData) report-VG-chunk)
               (constructor-chunk Nil-chunk
                                  null
                                  null))
      (build-struct Clause-chunk
                    #true
                    null
                    (list 'Test 'Expr)
                    (bs-Initial null
                                null
                                (tpl-pmtr (scope (scope 'structured
                                                        (tpl-use 'Minimum 
                                                                 (tpl-pmtr (scope 'Test report-VG-chunk))
                                                                 (tpl-pmtr (scope 'Expr report-VG-chunk))))
                                                 'result))
                                (bm-constructor (list (adcr 'Test 't)
                                                      (adcr 'Expr 'e))
                                                (list (cons-asgn 'test_ 't)
                                                      (cons-asgn 'expr_ 'e))
                                                null)
                                (list (mfc 'test_ (tpl-fcn-use 'init VG-chunk SH-chunk))
                                      (mfc 'expr_ (tpl-fcn-use 'init VG-chunk SH-chunk)))
                                (list (mfc 'test_ (tpl-fcn-use 'resize_prep VG-chunk))
                                      (mfc 'expr_ (tpl-fcn-use 'resize_prep VG-chunk)))
                                (list (mfc 'test_ (tpl-fcn-use 'gpu_init VG-chunk SH-chunk))
                                      (mfc 'expr_ (tpl-fcn-use 'gpu_init VG-chunk SH-chunk)))
                                (list (mfc 'test_ (tpl-fcn-use 'reduce_init VG-chunk SH-chunk))
                                      (mfc 'expr_ (tpl-fcn-use 'reduce_init VG-chunk SH-chunk)))
                                null
                                (list (adc 'Test 'test_)
                                      (adc 'Expr 'expr_)))
                    (bs-ResizePrep null
                                   null
                                   (bm-constructor (list (adcr 'Test 'test)
                                                         (adcr 'Expr 'expr))
                                                   (list (cons-asgn 'test_ 'test)
                                                         (cons-asgn 'expr_ 'expr))
                                                   null)
                                   (list (mfc 'test_ 'resize 'split 'location)
                                         (mfc 'expr_ 'resize 'split 'location))
                                   null
                                   (list (adc 'Test 'test_)
                                         (adc 'Expr 'expr_)))
                    (bs-Resize null
                               null
                               (bm-constructor (list (adcr 'Test 'test)
                                                     (adcr 'Expr 'expr))
                                               (list (cons-asgn 'test_ 'test)
                                                     (cons-asgn 'expr_ 'expr))
                                               null)
                               (list (mfc 'test_ (tpl-fcn-use 'init SH-chunk))
                                     (mfc 'expr_ (tpl-fcn-use 'init SH-chunk)))
                               null
                               (list (adc 'Test 'test_)
                                     (adc 'Expr 'expr_)))
                    (bs-SeqWalk (typedef (scope (tpl-pmtr FT-chunk)
                                                'value_type)
                                         'AtomicType)
                                (bm-constructor (list (adcr 'Test 'test)
                                                      (adcr 'Expr 'expr))
                                                (list (cons-asgn 'test_ 'test)
                                                      (cons-asgn 'expr_ 'expr))
                                                null)
                                (c (mfc 'test_ 'next)
                                   semi-colon-chunk s
                                   (mfc 'expr_ 'next))
                                (par (mfc 'test_ 'at_end)
                                     "||"
                                     (mfc 'expr_ 'at_end))
                                (par (mfc 'test_ 'has_length)
                                     "||"
                                     (mfc 'expr_ 'has_length))
                                (list (r-fcn-def (constize (fcn-dcl 'check (tc 'bool)))
                                                 null
                                                 (mfc 'test_ 'eval))
                                      (r-fcn-def (constize (fcn-dcl 'eval (tc 'AtomicType)))
                                                 null
                                                 (mfc 'expr_ 'eval)))
                                (list (ad 'Test 'test_)
                                      (ad 'Expr 'expr_)))
                    (bs-GPU-const null
                                  (bm-constructor (list (adcr 'Test 'test)
                                                        (adcr 'Expr 'expr))
                                                  (list (cons-asgn 'test_ 'test)
                                                        (cons-asgn 'expr_ 'expr))
                                                  null)
                                  (c (mfc 'test_ 'start 'x 'y)
                                     semi-colon-chunk s
                                     (mfc 'expr_ 'start 'x 'y))
                                  (c (mfc 'test_ 'next)
                                     semi-colon-chunk s
                                     (mfc 'expr_ 'next))
                                  (mfc 'expr_ 'eval)
                                  (r-fcn-def (constize (fcn-dcl 'check (tc 'bool)))
                                             null
                                             (mfc 'test_ 'eval))
                                  (list (ad 'Test 'test_)
                                        (ad 'Expr 'expr_)))
                    (bs-Reduction (typedef (scope (tpl-pmtr FT-chunk)
                                                  'value_type)
                                           'AtomicType)
                                  (bm-constructor (list (adcr 'Test 'test)
                                                        (adcr 'Expr 'expr))
                                                  (list (cons-asgn 'test_ 'test)
                                                        (cons-asgn 'expr_ 'expr))
                                                  null)
                                  (c (mfc 'test_ 'next)
                                     semi-colon-chunk s
                                     (mfc 'expr_ 'next))
                                  (par (mfc 'test_ 'at_end)
                                       "||"
                                       (mfc 'expr_ 'at_end))
                                  (par (mfc 'test_ 'has_length)
                                       "||"
                                       (mfc 'expr_ 'has_length))
                                  'AtomicType
                                  (mfc 'expr_ 'eval)
                                  (r-fcn-def (constize (fcn-dcl 'check (tc 'bool)))
                                             null
                                             (mfc 'test_ 'eval))
                                  (list (ad 'Test 'test_)
                                        (ad 'Expr 'expr_))))
      (build-struct Cond-chunk
                    #true
                    null
                    (list CT-chunk 'Otherwise)
                    (bs-Initial null
                                null
                                (tpl-pmtr (scope (scope 'structured (tpl-use 'Minimum
                                                                             (tpl-pmtr (scope CT-chunk report-VG-chunk))
                                                                             (tpl-pmtr (scope 'Otherwise report-VG-chunk))))
                                                 'result))
                                (bm-constructor (list (adcr CT-chunk 'c)
                                                      (adcr 'Otherwise 'e))
                                                (list (cons-asgn 'clause_ 'c)
                                                      (cons-asgn 'otherwise_ 'e))
                                                null)
                                (list (mfc 'clause_ (tpl-fcn-use 'init VG-chunk SH-chunk))
                                      (mfc 'otherwise_ (tpl-fcn-use 'init VG-chunk SH-chunk)))
                                (list (mfc 'clause_ (tpl-fcn-use 'resize_prep VG-chunk))
                                      (mfc 'otherwise_ (tpl-fcn-use 'resize_prep VG-chunk)))
                                (list (mfc 'clause_ (tpl-fcn-use 'gpu_init VG-chunk SH-chunk))
                                      (mfc 'otherwise_ (tpl-fcn-use 'gpu_init VG-chunk SH-chunk)))
                                (list (mfc 'clause_ (tpl-fcn-use 'reduce_init VG-chunk SH-chunk))
                                      (mfc 'otherwise_ (tpl-fcn-use 'reduce_init VG-chunk SH-chunk)))
                                (list (r-fcn-def (constize (fcn-dcl 'clause (cref CT-chunk)))
                                                 null
                                                 'clause_)
                                      (r-fcn-def (constize (fcn-dcl 'otherwise (cref 'Otherwise)))
                                                 null
                                                 'otherwise_))
                                (list (adc CT-chunk 'clause_)
                                      (adc 'Otherwise 'otherwise_)))
                    (bs-ResizePrep null
                                   null
                                   (bm-constructor (list (adcr CT-chunk 'clause)
                                                         (adcr 'Otherwise 'otherwise))
                                                   (list (cons-asgn 'clause_ 'clause)
                                                         (cons-asgn 'otherwise_ 'otherwise))
                                                   null)
                                   (list (mfc 'clause_ 'resize 'split 'location)
                                         (mfc 'otherwise_ 'resize 'split 'location))
                                   null
                                   (list (adc CT-chunk 'clause_)
                                         (adc 'Otherwise 'otherwise_)))
                    (bs-Resize null
                               null
                               (bm-constructor (list (adcr CT-chunk 'clause)
                                                     (adcr 'Otherwise 'otherwise))
                                               (list (cons-asgn 'clause_ 'clause)
                                                     (cons-asgn 'otherwise_ 'otherwise))
                                               null)
                               (list (mfc 'clause_ (tpl-fcn-use 'init SH-chunk))
                                     (mfc 'otherwise_ (tpl-fcn-use 'init SH-chunk)))
                               null
                               (list (adc CT-chunk 'clause_)
                                     (adc 'Otherwise 'otherwise_)))
                    (bs-SeqWalk (typedef (scope (tpl-pmtr FT-chunk)
                                                'value_type)
                                         'AtomicType)
                                (bm-constructor (list (adcr CT-chunk 'clause)
                                                      (adcr 'Otherwise 'otherwise))
                                                (list (cons-asgn 'clause_ 'clause)
                                                      (cons-asgn 'otherwise_ 'otherwise))
                                                null)
                                (c (mfc 'clause_ 'next)
                                   semi-colon-chunk s
                                   (mfc 'otherwise_ 'next))
                                (par (mfc 'clause_ 'at_end)
                                     "||"
                                     (mfc 'otherwise_ 'at_end))
                                (par (mfc 'clause_ 'has_length)
                                     "||"
                                     (mfc 'otherwise_ 'has_length))
                                (r-fcn-def (constize (fcn-dcl 'eval (tc 'AtomicType)))
                                           null
                                           (ter-cond (mfc 'clause_ 'check)
                                                     (mfc 'clause_ 'eval)
                                                     (mfc 'otherwise_ 'eval)))
                                (list (ad CT-chunk 'clause_)
                                      (ad 'Otherwise 'otherwise_)))
                    (bs-GPU-const null
                                  (bm-constructor (list (adcr CT-chunk 'clause)
                                                        (adcr 'Otherwise 'otherwise))
                                                  (list (cons-asgn 'clause_ 'clause)
                                                        (cons-asgn 'otherwise_ 'otherwise))
                                                  null)
                                  (c (mfc 'clause_ 'start 'x 'y)
                                     semi-colon-chunk s
                                     (mfc 'otherwise_ 'start 'x 'y))
                                  (c (mfc 'clause_ 'next)
                                     semi-colon-chunk s
                                     (mfc 'otherwise_ 'next))
                                  (ter-cond (mfc 'clause_ 'check)
                                            (mfc 'clause_ 'eval)
                                            (mfc 'otherwise_ 'eval))
                                  null
                                  (list (ad CT-chunk 'clause_)
                                        (ad 'Otherwise 'otherwise_)))
                    (bs-Reduction (typedef (scope (tpl-pmtr FT-chunk)
                                                  'value_type)
                                           'AtomicType)
                                  (bm-constructor (list (adcr CT-chunk 'clause)
                                                        (adcr 'Otherwise 'otherwise))
                                                  (list (cons-asgn 'clause_ 'clause)
                                                        (cons-asgn 'otherwise_ 'otherwise))
                                                  null)
                                  (c (mfc 'clause_ 'next)
                                     semi-colon-chunk s
                                     (mfc 'otherwise_ 'next))
                                  (par (mfc 'clause_ 'at_end)
                                       "||"
                                       (mfc 'otherwise_ 'at_end))
                                  (par (mfc 'clause_ 'has_length)
                                       "||"
                                       (mfc 'otherwise_ 'has_length))
                                  'AtomicType
                                  (ter-cond (mfc 'clause_ 'check)
                                            (mfc 'clause_ 'eval)
                                            (mfc 'otherwise_ 'eval))
                                  null
                                  (list (ad CT-chunk 'clause_)
                                        (ad 'Otherwise 'otherwise_))))
      (srt-def (srt-dcl SClause-chunk)
               (sec-def public-chunk
                        (constructor-chunk SClause-chunk
                                           (list (adcr 'bool 'b)
                                                 (adcr 'double 'd))
                                           (list (cons-asgn 'b_ 'b)
                                                 (cons-asgn 'd_ 'd)))
                        (r-fcn-def (constize (fcn-dcl 'check
                                                      'bool))
                                   null
                                   'b_)
                        (r-fcn-def (constize (fcn-dcl 'eval
                                                      'double))
                                   null
                                   'd_)
                        (tpl-srt-def 'Convert
                                     (tpl-pmtr FT-chunk)
                                     null
                                     (typedef (tpl-use NB-chunk 'Initial FT-chunk)
                                              'Boolean)
                                     (typedef (tpl-use NS-chunk 'Initial FT-chunk)
                                              'Scalar)
                                     (typedef (tpl-use Clause-chunk 'Initial 'Boolean 'Scalar FT-chunk)
                                              'Converted)
                                     (r-fcn-def (s-fcn-dcl 'convert
                                                           'Converted
                                                           (list (adc 'bool 'b)
                                                                 (adc 'double 'd)))
                                                null
                                                (fc 'Converted
                                                    (fc 'Boolean 'b)
                                                    (fc 'Scalar 'd)))))
               (sec-def private-chunk
                        (adc 'bool 'b_)
                        (adc 'double 'd_)))
      (srt-def (srt-dcl SFClause-chunk)
               (sec-def public-chunk
                        (constructor-chunk SFClause-chunk
                                           (adc 'double 'd)
                                           (cons-asgn 'd_ 'd))
                        (r-fcn-def (constize (fcn-dcl 'eval
                                                      'double))
                                   null
                                   'd_))
               (sec-def private-chunk
                        (adc 'double 'd_)))
      (tpl-srt-def SCond-chunk
                   (tpl-pmtr 'Otherwise)
                   null
                   (sec-def public-chunk
                            (constructor-chunk SCond-chunk
                                               (list (adcr SClause-chunk 'c)
                                                     (adcr 'Otherwise 'otherwise))
                                               (list (cons-asgn 'c_ 'c)
                                                     (cons-asgn 'otherwise_ 'otherwise)))
                            (r-fcn-def (constize (fcn-dcl 'eval
                                                          'double
                                                          null))
                                       null
                                       (ter-cond (mfc 'c_ 'check)
                                                 (mfc 'c_ 'eval)
                                                 (mfc 'otherwise_ 'eval)))
                            (tpl-srt-def 'Convert
                                         (tpl-pmtr FT-chunk)
                                         null
                                         (typedef (scope SClause-chunk
                                                         (tpl-fcn-use 'Convert FT-chunk))
                                                  'ConvertingClause)
                                         (typedef (tpl-pmtr (scope 'ConvertingClause
                                                                   'Converted))
                                                  'ConvertedClause)
                                         (typedef (tpl-pmtr (scope 'Otherwise
                                                                   (tpl-fcn-use 'Convert FT-chunk)))
                                                  'ConvertingList)
                                         (typedef (tpl-pmtr (scope 'ConvertingList 'Converted))
                                                  'ConvertedList)
                                         (typedef (tpl-use Cond-chunk 'Initial 'ConvertedClause 'ConvertedList FT-chunk)
                                                  'Converted)
                                         (r-fcn-def (s-fcn-dcl 'convert
                                                               'Converted
                                                               (list (adcr SClause-chunk 'c)
                                                                     (adcr 'Otherwise 'o)))
                                                    null
                                                    (fc 'Converted
                                                        (fc (scope 'ConvertingClause 'convert)
                                                            (mfc 'c 'check)
                                                            (mfc 'c 'eval))
                                                        (mfc 'o (tpl-fcn-use 'convert FT-chunk)))))
                            (tpl-def (tpl-pmtr FT-chunk)
                                     (r-fcn-def (constize (fcn-dcl 'convert
                                                                   (tpl-pmtr (scope (tpl-use 'Convert FT-chunk)
                                                                                    'Converted))))
                                                (typedef (tpl-use 'Convert FT-chunk)
                                                         'Convert)
                                                (fc (scope 'Convert 'convert)
                                                    (fc 'clause)
                                                    (fc 'otherwise))))
                            (r-fcn-def (constize (fcn-dcl 'clause (cref SClause-chunk)))
                                       null
                                       'c_)
                            (r-fcn-def (constize (fcn-dcl 'otherwise (cref 'Otherwise)))
                                       null
                                       'otherwise_))
                   (sec-def private-chunk
                            (adc SClause-chunk 'c_)
                            (adc 'Otherwise 'otherwise_)))
      (tpl-srt-def SCond-chunk
                   null
                   Nil-chunk
                   (sec-def public-chunk
                            (constructor-chunk SCond-chunk
                                               (list (adcr SClause-chunk 'c)
                                                     (adcr Nil-chunk 'nil))
                                               (cons-asgn 'c_ 'c))
                            (tpl-srt-def 'Convert
                                         (tpl-pmtr FT-chunk)
                                         null
                                         (typedef (scope SClause-chunk
                                                         (tpl-fcn-use 'Convert FT-chunk))
                                                  'ConvertingClause)
                                         (typedef (tpl-pmtr (scope 'ConvertingClause 'Converted))
                                                  'ConvertedClause)
                                         (typedef Nil-chunk
                                                  'ConvertedList)
                                         (typedef (tpl-use Cond-chunk
                                                           'Initial
                                                           'ConvertedClause
                                                           'ConvertedList
                                                           FT-chunk)
                                                  'Converted)
                                         (r-fcn-def (s-fcn-dcl 'convert
                                                               'Converted
                                                               (adcr SClause-chunk 'c))
                                                    null
                                                    (fc 'Converted
                                                        (fc (scope 'ConvertingClause 'convert)
                                                            (mfc 'c 'check)
                                                            (mfc 'c 'eval))
                                                        (fc Nil-chunk))))
                            (tpl-def (tpl-pmtr FT-chunk)
                                     (r-fcn-def (constize (fcn-dcl 'convert
                                                                   (tpl-pmtr (scope (tpl-use 'Convert FT-chunk)
                                                                                    'Converted))))
                                                (typedef (tpl-use 'Convert FT-chunk)
                                                         'Convert)
                                                (fc (scope 'Convert 'convert)
                                                    (fc 'clause))))
                            (r-fcn-def (constize (fcn-dcl 'clause (cref SClause-chunk)))
                                       null
                                       'c_)
                            (r-fcn-def (constize (fcn-dcl 'otherwise Nil-chunk))
                                       null
                                       (fc Nil-chunk)))
                   (sec-def private-chunk
                            (adc SClause-chunk 'c_)))
      ;CondBuilder
      (let* ([build-CondBuilder-private
              (lambda (extra-tpl-pmtrs
                       remaining-type
                       new-result-type
                       private)
                (sec-def private-chunk
                         (tpl-srt-dcl 'ReverseListRecursive
                                      (list (tpl-pmtr 'Remaining)
                                            (tpl-pmtr 'PreceedingResult)))
                         (tpl-srt-def 'ReverseListRecursive
                                      (tpl-pmtr 'PreceedingResult)
                                      (list Nil-chunk 'PreceedingResult)
                                      (typedef 'PreceedingResult
                                               'Result)
                                      (r-fcn-def (s-fcn-dcl 'reverse
                                                            'Result
                                                            (adcr Nil-chunk 'nil)
                                                            (adcr 'PreceedingResult 'r))
                                                 null
                                                 'r))
                         (tpl-srt-def 'ReverseListRecursive
                                      (list extra-tpl-pmtrs
                                            (tpl-pmtr 'Following)
                                            (tpl-pmtr 'PreceedingResult))
                                      (list remaining-type
                                            'PreceedingResult)
                                      (typedef remaining-type
                                               'Remaining)
                                      (typedef new-result-type
                                               'NewResult)
                                      (typedef (tpl-use 'ReverseListRecursive 'Following 'NewResult)
                                               'InternalCall)
                                      (typedef (tpl-pmtr (scope 'InternalCall 'Result))
                                               'Result)
                                      (r-fcn-def (s-fcn-dcl 'reverse
                                                            'Result
                                                            (adcr 'Remaining 'l)
                                                            (adcr 'PreceedingResult 'r))
                                                 null
                                                 (fc (scope 'InternalCall 'reverse)
                                                     (mfc 'l 'otherwise)
                                                     (fc 'NewResult
                                                         (mfc 'l 'clause)
                                                         'r))))
                         private))]
             [build-CondBuilder-public
              (lambda (tpl-pmtrs
                       tpl-args
                       construct-args
                       construct-asgns
                       public)
                (sec-def public-chunk
                         (constructor-chunk 'CondBuilder
                                            construct-args
                                            construct-asgns)
                         (tpl-srt-dcl 'ReverseList
                                      (tpl-pmtr 'Final))
                         (tpl-srt-def 'ReverseList
                                      (tpl-pmtr 'Final)
                                      null
                                      (typedef  (tpl-use 'ReverseListRecursive 'List 'Final)
                                                'InternalCall)
                                      (typedef  (tpl-pmtr (scope 'InternalCall 'Result))
                                                'Result)
                                      (r-fcn-def (s-fcn-dcl 'reverse
                                                            'Result
                                                            (adcr 'List 'l)
                                                            (adcr 'Final 'f))
                                                 null
                                                 (fc (scope 'InternalCall 'reverse)
                                                     'l
                                                     'f)))
                         (tpl-def (tpl-pmtr 'Final)
                                  (r-fcn-def (fcn-dcl 'reverse
                                                      (tpl-pmtr (scope (tpl-use 'ReverseList 'Final)
                                                                       'Result))
                                                      (adcr 'Final 'f))
                                             (typedef (tpl-use 'ReverseList 'Final)
                                                      'InternalCall)
                                             (fc (scope 'InternalCall 'reverse)
                                                 'list_
                                                 'f)))
                         public))]
             [build-CondBuilder
              (lambda (extra-tpl-pmtrs
                       remaining-type
                       new-result-type
                       tpl-pmtrs
                       tpl-args
                       private
                       construct-args
                       construct-asgns
                       public)
                (tpl-srt-def 'CondBuilder
                             (let ([tpl-pmtrs (flatten* tpl-pmtrs)])
                               (cond [(null? tpl-pmtrs) null]
                                     [(pair? tpl-pmtrs) (map tpl-pmtr tpl-pmtrs)]
                                     [else (tpl-pmtr tpl-pmtrs)]))
                             tpl-args
                             (sec-def 'public
                                      (typedef tpl-args
                                               'List))
                             (build-CondBuilder-private extra-tpl-pmtrs
                                                        remaining-type
                                                        new-result-type
                                                        private)
                             (build-CondBuilder-public tpl-pmtrs
                                                       tpl-args
                                                       construct-args
                                                       construct-asgns
                                                       public)))]
             [end-val ; end case - given scalar value
              (lambda (name
                       return-type
                       internals
                       return-expr)
                (r-fcn-def (fcn-dcl name
                                    return-type
                                    (adc 'double 'd))
                           internals
                           return-expr))]
             [end-expr ; end case - given expression
              (lambda (name
                       return-type
                       internals
                       return-expr)
                (tpl-def (tpl-pmtr 'Expr)
                         (r-fcn-def (fcn-dcl name
                                             return-type
                                             (adcr 'Expr 'e))
                                    internals
                                    return-expr)))]
             [cond-bool-val ; conditional case - given a boolean value and a scalar value
              (lambda (name
                       return-type
                       internals
                       return-expr)
                (r-fcn-def (fcn-dcl name
                                    return-type
                                    (list (adc 'bool 'b)
                                          (adc 'double 'd)))
                           internals
                           return-expr))]
             [cond-bool-expr ; conditional case - given a boolean value and an expression
              (lambda (name
                       return-type
                       internals
                       return-expr)
                (tpl-def (tpl-pmtr 'Expr)
                         (r-fcn-def (fcn-dcl name
                                             return-type
                                             (list (adc 'bool 'b)
                                                   (adcr 'Expr 'e)))
                                    internals
                                    return-expr)))]
             [cond-NBE-val ; conditional case - given a boolean expression and a scalar value
              (lambda (name
                       FT-defined?
                       return-type
                       internals
                       return-expr)
                (tpl-def (if FT-defined?
                             (tpl-pmtr 'BoolExpr)
                             (list (tpl-pmtr 'BoolExpr)
                                   (tpl-pmtr FT-chunk)))
                         (r-fcn-def (fcn-dcl name
                                             return-type
                                             (list (adcr (tpl-use NBE-chunk 'BoolExpr FT-chunk) 'nb)
                                                   (adc 'double 'd)))
                                    internals
                                    return-expr)))]
             [cond-NBE-expr ; conditional case - given a boolean expression and an expression
              (lambda (name
                       return-type
                       internals
                       return-expr)
                (tpl-def (list (tpl-pmtr 'BoolExpr)
                               (tpl-pmtr 'Expr))
                         (r-fcn-def (fcn-dcl name
                                             return-type
                                             (list (adcr (tpl-use NBE-chunk
                                                                 'BoolExpr
                                                                 (tpl-pmtr (scope 'Expr 'field_type)))
                                                        'nb)
                                                   (adcr 'Expr 'e)))
                                    internals
                                    return-expr)))])
        (list (tpl-srt-dcl 'CondBuilder
                           (tpl-pmtr 'List))
                                        ; FT
              (build-CondBuilder (list (tpl-pmtr 'Next) (tpl-pmtr 'Field))
                                 (tpl-use Cond-chunk 'Initial 'Next 'Following 'Field)
                                 (tpl-use Cond-chunk 'Initial 'Next 'PreceedingResult 'Field)
                                 (list CT-chunk 'Otherwise FT-chunk)
                                 (c (tpl-use Cond-chunk 'Initial CT-chunk 'Otherwise FT-chunk) s)
                                 (adcr 'List 'list_)
                                 (adcr (tpl-use Cond-chunk 'Initial CT-chunk 'Otherwise FT-chunk) 'l)
                                 (cons-asgn 'list_ 'l)
                                 (list (end-val (bs 'operator (p))
                                                (tpl-use NE-chunk
                                                         (tpl-pmtr (scope (tpl-use 'ReverseList
                                                                                   (c (tpl-use NS-chunk 'Initial FT-chunk) s))
                                                                          'Result))
                                                         FT-chunk)
                                                (list (typedef (tpl-use NS-chunk 'Initial FT-chunk)
                                                               'Scalar)
                                                      (typedef (tpl-use 'ReverseList 'Scalar)
                                                               'Reverser)
                                                      (typedef (tpl-pmtr (scope 'Reverser 'Result))
                                                               'Reversed)
                                                      (typedef (tpl-use NE-chunk 'Reversed FT-chunk)
                                                               'Result))
                                                (fc 'Result (fc 'reverse (fc 'Scalar 'd))))
                                       (end-expr (bs 'operator (p))
                                                 (tpl-use NE-chunk
                                                          (tpl-pmtr (scope (tpl-use 'ReverseList
                                                                                    (tpl-pmtr (scope (tpl-use 'Standardize
                                                                                                              'Expr
                                                                                                              FT-chunk)
                                                                                                     'StandardType)))
                                                                           'Result))
                                                          FT-chunk)
                                                 (list (typedef (tpl-use 'Standardize 'Expr FT-chunk)
                                                                'Standardize)
                                                       (typedef (tpl-pmtr (scope 'Standardize 'StandardType))
                                                                'FinalType)
                                                       (typedef (tpl-use 'ReverseList 'FinalType)
                                                                'Reverser)
                                                       (typedef (tpl-pmtr (scope 'Reverser 'Result))
                                                                'Reversed)
                                                       (typedef (tpl-use NE-chunk 'Reversed FT-chunk)
                                                                'Result))
                                                 (fc 'Result
                                                     (fc 'reverse
                                                         (fc (scope 'Standardize 'standardType)
                                                             'e))))
                                       (cond-bool-val (bs 'operator (p))
                                                      (tpl-use 'CondBuilder (c (tpl-use Cond-chunk
                                                                                        'Initial
                                                                                        (tpl-use Clause-chunk
                                                                                                 'Initial
                                                                                                 (tpl-use NB-chunk 'Initial FT-chunk)
                                                                                                 (tpl-use NS-chunk 'Initial FT-chunk)
                                                                                                 FT-chunk)
                                                                                        'List
                                                                                        FT-chunk) s))
                                                      (list (typedef (tpl-use NB-chunk 'Initial FT-chunk)
                                                                     'Boolean)
                                                            (typedef (tpl-use NS-chunk 'Initial FT-chunk)
                                                                     'Scalar)
                                                            (typedef (tpl-use Clause-chunk 'Initial 'Boolean 'Scalar FT-chunk)
                                                                     'NewClause)
                                                            (typedef (tpl-use Cond-chunk 'Initial 'NewClause 'List FT-chunk)
                                                                     'Cond)
                                                            (typedef (tpl-use 'CondBuilder 'Cond)
                                                                     'ReturnType))
                                                      (fc 'ReturnType
                                                          (fc 'Cond
                                                              (fc 'NewClause
                                                                  (fc 'Boolean 'b)
                                                                  (fc 'Scalar 'd))
                                                              'list_)))
                                       (cond-bool-expr (bs 'operator (p))
                                                       (tpl-use 'CondBuilder (c (tpl-use Cond-chunk
                                                                                         'Initial
                                                                                         (tpl-use Clause-chunk
                                                                                                  'Initial
                                                                                                  (tpl-use NB-chunk 'Initial FT-chunk)
                                                                                                  (tpl-pmtr (scope (tpl-use 'Standardize 'Expr FT-chunk)
                                                                                                                   'StandardType))
                                                                                                  FT-chunk)
                                                                                         'List
                                                                                         FT-chunk) s))
                                                       (list (typedef (tpl-use NB-chunk 'Initial FT-chunk)
                                                                      'Boolean)
                                                             (typedef (tpl-use 'Standardize 'Expr FT-chunk)
                                                                      'Standardize)
                                                             (typedef (tpl-pmtr (scope 'Standardize 'StandardType))
                                                                      'StandardType)
                                                             (typedef (tpl-use Clause-chunk 'Initial 'Boolean 'StandardType FT-chunk)
                                                                      'Clause)
                                                             (typedef (tpl-use Cond-chunk 'Initial 'Clause 'List FT-chunk)
                                                                      'Cond)
                                                             (typedef (tpl-use 'CondBuilder 'Cond)
                                                                      'ReturnType))
                                                       (fc 'ReturnType
                                                           (fc 'Cond
                                                               (fc 'Clause
                                                                   (fc 'Boolean 'b)
                                                                   (fc (scope 'Standardize 'standardType)
                                                                       'e))
                                                               'list_)))
                                       (cond-NBE-val (bs 'operator (p))
                                                     #true
                                                     (tpl-use 'CondBuilder (c (tpl-use Cond-chunk
                                                                                       'Initial
                                                                                       (tpl-use Clause-chunk
                                                                                                'Initial
                                                                                                'BoolExpr
                                                                                                (tpl-use NS-chunk 'Initial FT-chunk)
                                                                                                FT-chunk)
                                                                                       'List
                                                                                       FT-chunk) s))
                                                     (list (typedef (tpl-use NS-chunk 'Initial FT-chunk)
                                                                    'Scalar)
                                                           (typedef (tpl-use Clause-chunk 'Initial 'BoolExpr 'Scalar FT-chunk)
                                                                    'NewClause)
                                                           (typedef (tpl-use Cond-chunk 'Initial 'NewClause 'List FT-chunk)
                                                                    'Cond)
                                                           (typedef (tpl-use 'CondBuilder 'Cond)
                                                                    'ReturnType))
                                                     (fc 'ReturnType
                                                         (fc 'Cond
                                                             (fc 'NewClause
                                                                 (mfc 'nb 'expr)
                                                                 (fc 'Scalar 'd))
                                                             'list_)))
                                       (cond-NBE-expr (bs 'operator (p))
                                                      (tpl-use 'CondBuilder (c (tpl-use Cond-chunk
                                                                                        'Initial
                                                                                        (tpl-use Clause-chunk
                                                                                                 'Initial
                                                                                                 'BoolExpr
                                                                                                 (tpl-pmtr (scope (tpl-use 'Standardize 'Expr FT-chunk) 'StandardType))
                                                                                                 FT-chunk)
                                                                                        'List
                                                                                        FT-chunk) s))
                                                      (list (typedef (tpl-use 'Standardize 'Expr FT-chunk)
                                                                     'Standardize)
                                                            (typedef (tpl-pmtr (scope 'Standardize 'StandardType))
                                                                     'StandardType)
                                                            (typedef (tpl-use Clause-chunk 'Initial 'BoolExpr 'StandardType FT-chunk)
                                                                     'Clause)
                                                            (typedef (tpl-use Cond-chunk 'Initial 'Clause 'List FT-chunk)
                                                                     'Cond)
                                                            (typedef (tpl-use 'CondBuilder 'Cond)
                                                                     'ReturnType))
                                                      (fc 'ReturnType
                                                          (fc 'Cond
                                                              (fc 'Clause
                                                                  (mfc 'nb 'expr)
                                                                  (fc (scope 'Standardize 'standardType)
                                                                      'e))
                                                              'list_)))))
                                        ; no FT
              (build-CondBuilder null
                                 (tpl-use SCond-chunk 'Following)
                                 (tpl-use SCond-chunk 'PreceedingResult)
                                 'Otherwise
                                 (c (tpl-use SCond-chunk 'Otherwise) s)
                                 (adcr 'List 'list_)
                                 (adcr (tpl-use SCond-chunk 'Otherwise) 'l)
                                 (cons-asgn 'list_ 'l)
                                 (list (end-val (bs 'operator (p))
                                                'double
                                                null
                                                (mfc (fc 'reverse (fc SFClause-chunk 'd))
                                                     'eval))
                                       (end-expr (bs 'operator (p))
                                                 (tpl-use NE-chunk
                                                          (tpl-pmtr (scope (scope (tpl-use 'CondBuilder
                                                                                           (tpl-pmtr (scope (scope 'List
                                                                                                                   (tpl-fcn-use 'Convert (tpl-pmtr (scope 'Expr 'field_type))))
                                                                                                            'Converted)))
                                                                                  (tpl-fcn-use 'ReverseList
                                                                                               (tpl-pmtr (scope (tpl-use 'Standardize
                                                                                                                         'Expr
                                                                                                                         (tpl-pmtr (scope 'Expr 'field_type)))
                                                                                                                'StandardType))))
                                                                           'Result))
                                                          (tpl-pmtr (scope 'Expr 'field_type)))
                                                 (list (typedef (tpl-pmtr (scope 'Expr 'field_type))
                                                                FT-chunk)
                                                       (typedef (tpl-pmtr (scope (scope 'List (tpl-fcn-use 'Convert (tpl-pmtr (scope 'Expr 'field_type))))
                                                                                 'Converted))
                                                                'Converted)
                                                       (typedef (tpl-use 'CondBuilder 'Converted)
                                                                'NewCondBuilder))
                                                 (fc (fc 'NewCondBuilder
                                                         (mfc 'list_ (tpl-fcn-use 'convert FT-chunk)))
                                                     'e))
                                       (cond-bool-val (bs 'operator (p))
                                                      (tpl-use 'CondBuilder (c (tpl-use SCond-chunk 'List) s))
                                                      (list (typedef (tpl-use SCond-chunk 'List)
                                                                     'Cond)
                                                            (typedef (tpl-use 'CondBuilder 'Cond)
                                                                     'ReturnType))
                                                      (fc 'ReturnType
                                                          (fc 'Cond
                                                              (fc SClause-chunk 'b 'd)
                                                              'list_)))
                                       (cond-bool-expr (bs 'operator (p))
                                                       (tpl-use 'CondBuilder (c (tpl-use Cond-chunk
                                                                                         'Initial
                                                                                         (tpl-use Clause-chunk
                                                                                                  'Initial
                                                                                                  (tpl-use NB-chunk 'Initial (tpl-pmtr (scope 'Expr 'field_type)))
                                                                                                  (tpl-pmtr (scope (tpl-use 'Standardize 'Expr (tpl-pmtr (scope 'Expr 'field_type)))
                                                                                                                   'StandardType))
                                                                                                  (tpl-pmtr (scope 'Expr 'field_type)))
                                                                                         (tpl-pmtr (scope (scope 'List (tpl-fcn-use 'Convert (tpl-pmtr (scope 'Expr 'field_type))))
                                                                                                          'Converted))
                                                                                         (tpl-pmtr (scope 'Expr 'field_type)))
                                                                                s))
                                                       (list (typedef (tpl-pmtr (scope 'Expr 'field_type))
                                                                      FT-chunk)
                                                             (typedef (tpl-use NB-chunk 'Initial FT-chunk)
                                                                      'Boolean)
                                                             (typedef (tpl-use 'Standardize 'Expr FT-chunk)
                                                                      'Standardize)
                                                             (typedef (tpl-pmtr (scope 'Standardize 'StandardType))
                                                                      'StandardType)
                                                             (typedef (tpl-use Clause-chunk 'Initial 'Boolean 'StandardType FT-chunk)
                                                                      'Clause)
                                                             (typedef (tpl-pmtr (scope (scope 'List (tpl-fcn-use 'Convert (tpl-pmtr (scope 'Expr 'field_type))))
                                                                                       'Converted))
                                                                      'Previous)
                                                             (typedef (tpl-use Cond-chunk 'Initial 'Clause 'Previous FT-chunk)
                                                                      'Cond)
                                                             (typedef (tpl-use 'CondBuilder 'Cond)
                                                                      'ReturnType))
                                                       (fc 'ReturnType
                                                           (fc 'Cond
                                                               (fc 'Clause
                                                                   (fc 'Boolean 'b)
                                                                   (fc (scope 'Standardize 'standardType)
                                                                       'e))
                                                               (mfc 'list_ (tpl-fcn-use 'convert FT-chunk)))))
                                       (cond-NBE-val (bs 'operator (p))
                                                     #false
                                                     (tpl-use 'CondBuilder (c (tpl-use Cond-chunk
                                                                                       'Initial
                                                                                       (tpl-use Clause-chunk
                                                                                                'Initial
                                                                                                'BoolExpr
                                                                                                (tpl-use NS-chunk 'Initial FT-chunk)
                                                                                                FT-chunk)
                                                                                       (tpl-pmtr (scope (scope 'List (tpl-fcn-use 'Convert FT-chunk))
                                                                                                        'Converted))
                                                                                       FT-chunk) s))
                                                     (list (typedef (tpl-use NS-chunk 'Initial FT-chunk)
                                                                    'Scalar)
                                                           (typedef (tpl-use Clause-chunk 'Initial 'BoolExpr 'Scalar FT-chunk)
                                                                    'Clause)
                                                           (typedef (tpl-pmtr (scope (scope 'List (tpl-fcn-use 'Convert FT-chunk))
                                                                                     'Converted))
                                                                    'Previous)
                                                           (typedef (tpl-use Cond-chunk 'Initial 'Clause 'Previous FT-chunk)
                                                                    'Cond)
                                                           (typedef (tpl-use 'CondBuilder 'Cond)
                                                                    'ReturnType))
                                                     (fc 'ReturnType
                                                         (fc 'Cond
                                                             (fc 'Clause
                                                                 (mfc 'nb 'expr)
                                                                 (fc 'Scalar 'd))
                                                             (mfc 'list_ (tpl-fcn-use 'convert FT-chunk)))))
                                       (cond-NBE-expr (bs 'operator (p))
                                                      (tpl-use 'CondBuilder (c (tpl-use Cond-chunk
                                                                                        'Initial
                                                                                        (tpl-use Clause-chunk
                                                                                                 'Initial
                                                                                                 'BoolExpr
                                                                                                 (tpl-pmtr (scope (tpl-use 'Standardize 'Expr (tpl-pmtr (scope 'Expr 'field_type)))
                                                                                                                  'StandardType))
                                                                                                 (tpl-pmtr (scope 'Expr 'field_type)))
                                                                                        (tpl-pmtr (scope (scope 'List (tpl-fcn-use 'Convert (tpl-pmtr (scope 'Expr 'field_type))))
                                                                                                         'Converted))
                                                                                        (tpl-pmtr (scope 'Expr 'field_type)))
                                                                               s))
                                                      (list (typedef (tpl-pmtr (scope 'Expr 'field_type))
                                                                     FT-chunk)
                                                            (typedef (tpl-use 'Standardize 'Expr FT-chunk)
                                                                     'Standardize)
                                                            (typedef (tpl-pmtr (scope 'Standardize 'StandardType))
                                                                     'StandardType)
                                                            (typedef (tpl-use Clause-chunk 'Initial 'BoolExpr 'StandardType FT-chunk)
                                                                     'Clause)
                                                            (typedef (tpl-pmtr (scope (scope 'List (tpl-fcn-use 'Convert (tpl-pmtr (scope 'Expr 'field_type))))
                                                                                      'Converted))
                                                                     'Previous)
                                                            (typedef (tpl-use Cond-chunk 'Initial 'Clause 'Previous FT-chunk)
                                                                     'Cond)
                                                            (typedef (tpl-use 'CondBuilder 'Cond)
                                                                     'ReturnType))
                                                      (fc 'ReturnType
                                                          (fc 'Cond
                                                              (fc 'Clause
                                                                  (mfc 'nb 'expr)
                                                                  (fc (scope 'Standardize 'standardType)
                                                                      'e))
                                                              (mfc 'list_ (tpl-fcn-use 'convert FT-chunk)))))))
                                        ; Nil
              (tpl-srt-def 'CondBuilder
                           null
                           Nil-chunk
                           (sec-def 'public
                                    (constructor-chunk 'CondBuilder null null)))
              (end-val 'cond
                       'double
                       null
                       'd)
              (end-expr 'cond
                        (tpl-pmtr (scope (tpl-use 'Standardize 'Expr (tpl-pmtr (scope 'Expr 'field_type)))
                                         'StandardTerm))
                        (list (typedef (tpl-pmtr (scope 'Expr 'field_type))
                                       FT-chunk)
                              (typedef (tpl-use 'Standardize 'Expr FT-chunk)
                                       'Standardize))
                        (fc (scope 'Standardize 'standardTerm)
                            'e))
              (cond-bool-val 'cond
                             (tpl-use 'CondBuilder (c (tpl-use SCond-chunk Nil-chunk) s))
                             (list (typedef (tpl-use SCond-chunk Nil-chunk)
                                            'Cond)
                                   (typedef (tpl-use 'CondBuilder 'Cond)
                                            'ReturnType))
                             (fc 'ReturnType
                                 (fc 'Cond
                                     (fc SClause-chunk 'b 'd)
                                     (fc Nil-chunk))))
              (cond-bool-expr 'cond
                              (tpl-use 'CondBuilder (c (tpl-use Cond-chunk
                                                                'Initial
                                                                (tpl-use Clause-chunk
                                                                         'Initial
                                                                         (tpl-use NB-chunk 'Initial (tpl-pmtr (scope 'Expr 'field_type)))
                                                                         (tpl-pmtr (scope (tpl-use 'Standardize 'Expr (tpl-pmtr (scope 'Expr 'field_type)))
                                                                                          'StandardType))
                                                                         (tpl-pmtr (scope 'Expr 'field_type)))
                                                                Nil-chunk
                                                                (tpl-pmtr (scope 'Expr 'field_type)))
                                                       s))
                              (list (typedef (tpl-pmtr (scope 'Expr 'field_type))
                                             FT-chunk)
                                    (typedef (tpl-use NB-chunk 'Initial FT-chunk)
                                             'Boolean)
                                    (typedef (tpl-use 'Standardize 'Expr FT-chunk)
                                             'Standardize)
                                    (typedef (tpl-pmtr (scope 'Standardize 'StandardType))
                                             'StandardType)
                                    (typedef (tpl-use Clause-chunk 'Initial 'Boolean 'StandardType FT-chunk)
                                             'Clause)
                                    (typedef (tpl-use Cond-chunk 'Initial 'Clause Nil-chunk FT-chunk)
                                             'Cond)
                                    (typedef (tpl-use 'CondBuilder 'Cond)
                                             'ReturnType))
                              (fc 'ReturnType
                                  (fc 'Cond
                                      (fc 'Clause
                                          (fc 'Boolean 'b)
                                          (fc (scope 'Standardize 'standardType)
                                              'e))
                                      (fc Nil-chunk))))
              (cond-NBE-val 'cond
                            #false
                            (tpl-use 'CondBuilder (c (tpl-use Cond-chunk
                                                              'Initial
                                                              (tpl-use Clause-chunk
                                                                       'Initial
                                                                       'BoolExpr
                                                                       (tpl-use NS-chunk 'Initial FT-chunk)
                                                                       FT-chunk)
                                                              Nil-chunk
                                                              FT-chunk) s))
                            (list (typedef (tpl-use NS-chunk 'Initial FT-chunk)
                                           'Scalar)
                                  (typedef (tpl-use Clause-chunk 'Initial 'BoolExpr 'Scalar FT-chunk)
                                           'Clause)
                                  (typedef (tpl-use Cond-chunk 'Initial 'Clause Nil-chunk FT-chunk)
                                           'Cond)
                                  (typedef (tpl-use 'CondBuilder 'Cond)
                                           'ReturnType))
                            (fc 'ReturnType
                                (fc 'Cond
                                    (fc 'Clause
                                        (mfc 'nb 'expr)
                                        (fc 'Scalar 'd))
                                    (fc Nil-chunk))))
              (cond-NBE-expr 'cond
                             (tpl-use 'CondBuilder (c (tpl-use Cond-chunk
                                                               'Initial
                                                               (tpl-use Clause-chunk
                                                                        'Initial
                                                                        'BoolExpr
                                                                        (tpl-pmtr (scope (tpl-use 'Standardize 'Expr (tpl-pmtr (scope 'Expr 'field_type)))
                                                                                         'StandardType))
                                                                        (tpl-pmtr (scope 'Expr 'field_type)))
                                                               Nil-chunk
                                                               (tpl-pmtr (scope 'Expr 'field_type)))
                                                      s))
                             (list (typedef (tpl-pmtr (scope 'Expr 'field_type))
                                            FT-chunk)
                                   (typedef (tpl-use 'Standardize 'Expr FT-chunk)
                                            'Standardize)
                                   (typedef (tpl-pmtr (scope 'Standardize 'StandardType))
                                            'StandardType)
                                   (typedef (tpl-use Clause-chunk 'Initial 'BoolExpr 'StandardType FT-chunk)
                                            'Clause)
                                   (typedef (tpl-use Cond-chunk 'Initial 'Clause Nil-chunk FT-chunk)
                                            'Cond)
                                   (typedef (tpl-use 'CondBuilder 'Cond)
                                            'ReturnType))
                             (fc 'ReturnType
                                 (fc 'Cond
                                     (fc 'Clause
                                         (mfc 'nb 'expr)
                                         (fc (scope 'Standardize 'standardType)
                                             'e))
                                     (fc Nil-chunk))))))
      (m 'nebo_cond null (c 'cond '//))
      (build-struct NSP
                    #true
                    'Point
                    'Arg
                    (bs-Initial null
                                (list 'Point 'Point 'Point 'Point)
                                (tpl-pmtr (scope (scope 'structured
                                                        (tpl-use 'Invalidate
                                                                 (tpl-pmtr (scope 'Arg report-VG-chunk))
                                                                 'Point))
                                                 'result))
                                (bm-constructor (adcr 'Arg 'a)
                                                (cons-asgn 'arg_ 'a)
                                                null)
                                (mfc 'arg_ (tpl-fcn-use 'init VG-chunk (tpl-pmtr (scope (scope 'structured (tpl-use 'Add SH-chunk 'Point))
                                                                                        'result))))
                                (mfc 'arg_ (tpl-fcn-use 'resize_prep VG-chunk))
                                (mfc 'arg_ (tpl-fcn-use 'gpu_init VG-chunk (tpl-pmtr (scope (scope 'structured (tpl-use 'Add SH-chunk 'Point))
                                                                                      'result))))
                                (mfc 'arg_ (tpl-fcn-use 'reduce_init VG-chunk (tpl-pmtr (scope (scope 'structured (tpl-use 'Add SH-chunk 'Point))
                                                                                               'result))))
                                null
                                (adc 'Arg 'arg_))
                    (bs-ResizePrep null
                                   'Point
                                   (bm-constructor (adcr 'Arg 'a)
                                                   (cons-asgn 'arg_ 'a)
                                                   null)
                                   (mfc 'arg_ 'resize 'split 'location)
                                   null
                                   (adc 'Arg 'arg_))
                    (bs-Resize null
                               'Point
                               (bm-constructor (adcr 'Arg 'a)
                                               (cons-asgn 'arg_ 'a)
                                               null)
                               (mfc 'arg_ (tpl-fcn-use 'init (tpl-pmtr (scope (scope 'structured (tpl-use 'Add SH-chunk 'Point))
                                                                              'result))))
                               null
                               (adc 'Arg 'arg_))
                    (bs-SeqWalk (typedef (scope (tpl-pmtr FT-chunk)
                                                'value_type)
                                         'AtomicType)
                                (bm-constructor (adcr 'Arg 'a)
                                                (cons-asgn 'arg_ 'a)
                                                null)
                                (mfc 'arg_ 'next)
                                (mfc 'arg_ 'at_end)
                                (mfc 'arg_ 'has_length)
                                (r-fcn-def (constize (fcn-dcl 'eval (tc 'AtomicType)))
                                           null
                                           (mfc 'arg_ 'eval))
                                (ad 'Arg 'arg_))
                    (bs-GPU-const null
                                  (bm-constructor (adcr 'Arg 'a)
                                                  (cons-asgn 'arg_ 'a)
                                                  null)
                                  (mfc 'arg_ 'start 'x 'y)
                                  (mfc 'arg_ 'next)
                                  (mfc 'arg_ 'eval)
                                  null
                                  (ad 'Arg 'arg_))
                    (bs-Reduction (typedef (scope (tpl-pmtr FT-chunk)
                                                  'value_type)
                                           'AtomicType)
                                  (bm-constructor (adcr 'Arg 'a)
                                                  (cons-asgn 'arg_ 'a)
                                                  null)
                                  (mfc 'arg_ 'next)
                                  (mfc 'arg_ 'at_end)
                                  (mfc 'arg_ 'has_length)
                                  'AtomicType
                                  (mfc 'arg_ 'eval)
                                  null
                                  (ad 'Arg 'arg_)))
      (tpl-srt-def NSCL
                   (bs 'int 'Length)
                   null
                   (sec-def public-chunk
                            (constructor-chunk NSCL
                                               (list (adcr (tpl-use NSCL (n- 'Length "1")) 'l)
                                                     (adc 'double 'c))
                                               (list (cons-asgn 'list_ 'l)
                                                     (cons-asgn 'coef_ 'c))
                                               null)
                            (r-fcn-def (constize (fcn-dcl (bs 'operator (p))
                                                          (tc (tpl-use NSCL (n+ 'Length "1")))
                                                          (adc 'double 'c)))
                                       null
                                       (fc (tpl-use NSCL (n+ 'Length "1"))
                                           '*this
                                           'c))
                            (r-fcn-def (constize (fcn-dcl 'coef (tc 'double)))
                                       null
                                       'coef_)
                            (r-fcn-def (constize (fcn-dcl 'list (tc (tpl-use NSCL (n- 'Length "1")))))
                                       null
                                       'list_))
                   (sec-def private-chunk
                            (adc (tpl-use NSCL (n- 'Length "1")) 'list_)
                            (adc 'double 'coef_)))
      (tpl-srt-def NSCL
                   null
                   "1"
                   (sec-def public-chunk
                            (constructor-chunk NSCL
                                               (adc 'double 'c)
                                               (cons-asgn 'coef_ 'c)
                                               null)
                            (r-fcn-def (constize (fcn-dcl (bs 'operator (p))
                                                          (tc (tpl-use NSCL "2"))
                                                          (adc 'double 'c)))
                                       null
                                       (fc (tpl-use NSCL "2")
                                           '*this
                                           'c))
                            (r-fcn-def (constize (fcn-dcl 'coef (tc 'double)))
                                       null
                                       'coef_))
                   (sec-def private-chunk
                            (adc 'double 'coef_)))
      (r-fcn-def (fcn-dcl 'build_coef_list
                          (tc (tpl-use NSCL "1"))
                          (adc 'double 'c))
                 null
                 (fc (tpl-use NSCL "1")
                     'c))
      (r-fcn-def (fcn-dcl 'build_two_point_coef_list
                          (tc (tpl-use NSCL "2"))
                          (adc 'double 'c1)
                          (adc 'double 'c2))
                 null
                 (fc (fc (tpl-use NSCL "1")
                         'c1)
                     'c2))
      (r-fcn-def (fcn-dcl 'build_four_point_coef_list
                          (tc (tpl-use NSCL "4"))
                          (adc 'double 'c1)
                          (adc 'double 'c2)
                          (adc 'double 'c3)
                          (adc 'double 'c4))
                 null
                 (fc (fc (fc (fc (tpl-use NSCL "1")
                                 'c1)
                             'c2)
                         'c3)
                     'c4))
      (tpl-srt-def NSPL
                   (list (tpl-pmtr 'PointType)
                         (tpl-pmtr 'ListType))
                   null
                   (sec-def public-chunk
                            (typedef 'PointType 'Point)
                            (typedef 'ListType 'List)
                            (typedef (tpl-use NSPL 'Point 'List)
                                     'MyType)
                            (enum (n= 'length (n+ "1" (scope 'List 'length))))
                            (tpl-srt-def 'AddPoint
                                         (tpl-pmtr 'NewPoint)
                                         null
                                         (typedef (tpl-use NSPL 'NewPoint 'MyType)
                                                  'Result))
                            (tpl-srt-def 'PossibleGhost
                                         (tpl-pmtr 'GivenPossibleValidGhost)
                                         null
                                         (typedef (tpl-pmtr (scope (scope 'structured (tpl-use 'Invalidate 'GivenPossibleValidGhost 'Point))
                                                                   'result))
                                                  'CurrentPossibleValidGhost)
                                         (typedef (tpl-pmtr (scope 'List (tpl-fcn-use 'PossibleGhost 'GivenPossibleValidGhost)))
                                                  'EarlierPointsPossibleGhost)
                                         (typedef (tpl-pmtr (scope 'EarlierPointsPossibleGhost 'Result))
                                                  'EarlierPointsPossibleValidGhost)
                                         (typedef (tpl-pmtr (scope (scope 'structured (tpl-use 'Minimum 'CurrentPossibleValidGhost 'EarlierPointsPossibleValidGhost))
                                                                   'result))
                                                  'Result))
                            (tpl-srt-def 'ConstructExpr
                                         (list (tpl-pmtr 'ArgPreSeqWalk)
                                               (tpl-pmtr 'DestType))
                                         null
                                         (typedef (tpl-use NS-chunk 'SeqWalk 'DestType)
                                                  'Coef)
                                         (typedef (tpl-pmtr (scope 'ArgPreSeqWalk 'SeqWalkType))
                                                  'Arg)
                                         (typedef (tpl-use 'ProdOp 'SeqWalk 'Arg 'Coef 'DestType)
                                                  'MultiplyType)
                                         (typedef (tpl-pmtr (scope 'List (tpl-fcn-use 'ConstructExpr 'ArgPreSeqWalk 'DestType)))
                                                  'EarlierPointsType)
                                         (typedef (tpl-pmtr (scope 'EarlierPointsType
                                                                   'Result))
                                                  'EarlierPointsResult)
                                         (typedef (tpl-use 'SumOp 'SeqWalk 'EarlierPointsResult 'MultiplyType 'DestType)
                                                  'Result)
                                         (tpl-def (list (tpl-pmtr VG-chunk)
                                                        (tpl-pmtr SH-chunk))
                                                  (r-fcn-def (s-fcn-dcl 'in_sq_construct
                                                                        (tc 'Result)
                                                                        (adcr 'ArgPreSeqWalk 'arg)
                                                                        (adcr (tpl-use NSCL 'length) 'coefs))
                                                             (typedef (tpl-pmtr (scope (scope 'structured (tpl-use 'Add SH-chunk 'Point))
                                                                                       'result))
                                                                      'NewShift)
                                                             (fc 'Result
                                                                 (fc (scope 'EarlierPointsType
                                                                            (tpl-fcn-use 'in_sq_construct VG-chunk SH-chunk))
                                                                     'arg
                                                                     (mfc 'coefs 'list))
                                                                 (fc 'MultiplyType
                                                                     (mfc 'arg (tpl-fcn-use 'init VG-chunk 'NewShift))
                                                                     (fc 'Coef (mfc 'coefs 'coef))))))
                                         (tpl-def (tpl-pmtr SH-chunk)
                                                  (r-fcn-def (s-fcn-dcl 'rs_sq_construct
                                                                        (tc 'Result)
                                                                        (adcr 'ArgPreSeqWalk 'arg)
                                                                        (adcr (tpl-use NSCL 'length) 'coefs))
                                                             (typedef (tpl-pmtr (scope (scope 'structured (tpl-use 'Add SH-chunk 'Point))
                                                                                       'result))
                                                                      'NewShift)
                                                             (fc 'Result
                                                                 (fc (scope 'EarlierPointsType (tpl-fcn-use 'rs_sq_construct SH-chunk))
                                                                     'arg
                                                                     (mfc 'coefs 'list))
                                                                 (fc 'MultiplyType
                                                                     (mfc 'arg (tpl-fcn-use 'init 'NewShift))
                                                                     (fc 'Coef (mfc 'coefs 'coef)))))))
                            (gpu-only
                             (tpl-srt-def 'ConstructGPUExpr
                                          (list (tpl-pmtr 'ArgPreGPUWalk)
                                                (tpl-pmtr 'DestType))
                                          null
                                          (typedef (tpl-use NS-chunk 'GPUWalk 'DestType)
                                                   'Coef)
                                          (typedef (tpl-pmtr (scope 'ArgPreGPUWalk 'GPUWalkType))
                                                   'Arg)
                                          (typedef (tpl-use 'ProdOp 'GPUWalk 'Arg 'Coef 'DestType)
                                                   'MultiplyType)
                                          (typedef (tpl-pmtr (scope 'List (tpl-fcn-use 'ConstructExpr 'ArgPreGPUWalk 'DestType)))
                                                   'EarlierPointsType)
                                          (typedef (tpl-pmtr (scope 'EarlierPointsType
                                                                    'Result))
                                                   'EarlierPointsResult)
                                          (typedef (tpl-use 'SumOp 'GPUWalk 'EarlierPointsResult 'MultiplyType 'DestType)
                                                   'Result)
                                          (tpl-def (list (tpl-pmtr VG-chunk)
                                                         (tpl-pmtr SH-chunk))
                                                   (r-fcn-def (s-fcn-dcl 'in_gpu_construct
                                                                         (tc 'Result)
                                                                         (adcr 'ArgPreGPUWalk 'arg)
                                                                         (adcr (tpl-use NSCL 'length) 'coefs))
                                                              (typedef (tpl-pmtr (scope (scope 'structured (tpl-use 'Add SH-chunk 'Point))
                                                                                        'result))
                                                                       'NewShift)
                                                              (fc 'Result
                                                                  (fc (scope 'EarlierPointsType (tpl-fcn-use 'in_sq_construct VG-chunk SH-chunk))
                                                                      'arg
                                                                      (mfc 'coefs 'list))
                                                                  (fc 'MultiplyType
                                                                      (mfc 'arg (tpl-fcn-use 'init VG-chunk 'NewShift))
                                                                      (fc 'Coef (mfc 'coefs 'coef))))))))
                            (tpl-srt-def 'ConstructReductionExpr
                                         (list (tpl-pmtr 'ArgPreReduction)
                                               (tpl-pmtr 'DestType))
                                         null
                                         (typedef (tpl-use NS-chunk 'Reduction 'DestType)
                                                  'Coef)
                                         (typedef (tpl-pmtr (scope 'ArgPreReduction 'ReductionType))
                                                  'Arg)
                                         (typedef (tpl-use 'ProdOp 'Reduction 'Arg 'Coef 'DestType)
                                                  'MultiplyType)
                                         (typedef (tpl-pmtr (scope 'List (tpl-fcn-use 'ConstructReductionExpr 'ArgPreReduction 'DestType)))
                                                  'EarlierPointsType)
                                         (typedef (tpl-pmtr (scope 'EarlierPointsType
                                                                   'Result))
                                                  'EarlierPointsResult)
                                         (typedef (tpl-use 'SumOp 'Reduction 'EarlierPointsResult 'MultiplyType 'DestType)
                                                  'Result)
                                         (tpl-def (list (tpl-pmtr VG-chunk)
                                                        (tpl-pmtr SH-chunk))
                                                  (r-fcn-def (s-fcn-dcl 'in_rd_construct
                                                                        (tc 'Result)
                                                                        (adcr 'ArgPreReduction 'arg)
                                                                        (adcr (tpl-use NSCL 'length) 'coefs))
                                                             (typedef (tpl-pmtr (scope (scope 'structured (tpl-use 'Add SH-chunk 'Point))
                                                                                       'result))
                                                                      'NewShift)
                                                             (fc 'Result
                                                                 (fc (scope 'EarlierPointsType (tpl-fcn-use 'in_rd_construct VG-chunk SH-chunk))
                                                                     'arg
                                                                     (mfc 'coefs 'list))
                                                                 (fc 'MultiplyType
                                                                     (mfc 'arg (tpl-fcn-use 'reduce_init VG-chunk 'NewShift))
                                                                     (fc 'Coef (mfc 'coefs 'coef))))))
                                         (tpl-def (tpl-pmtr SH-chunk)
                                                  (r-fcn-def (s-fcn-dcl 'rs_rd_construct
                                                                        (tc 'Result)
                                                                        (adcr 'ArgPreReduction 'arg)
                                                                        (adcr (tpl-use NSCL 'length) 'coefs))
                                                             (typedef (tpl-pmtr (scope (scope 'structured (tpl-use 'Add SH-chunk 'Point))
                                                                                       'result))
                                                                      'NewShift)
                                                             (fc 'Result
                                                                 (fc (scope 'EarlierPointsType (tpl-fcn-use 'rs_rd_construct SH-chunk))
                                                                     'arg
                                                                     (mfc 'coefs 'list))
                                                                 (fc 'MultiplyType
                                                                     (mfc 'arg (tpl-fcn-use 'reduce_init 'NewShift))
                                                                     (fc 'Coef (mfc 'coefs 'coef)))))))))
      (tpl-srt-def NSPL
                   (tpl-pmtr 'PointType)
                   (list 'PointType Nil-chunk)
                   (sec-def public-chunk
                            (typedef 'PointType 'Point)
                            (typedef Nil-chunk 'List)
                            (typedef (tpl-use NSPL 'Point 'List)
                                     'MyType)
                            (enum (n= 'length "1"))
                            (tpl-srt-def 'AddPoint
                                         (tpl-pmtr 'NewPoint)
                                         null
                                         (typedef (tpl-use NSPL 'NewPoint 'MyType)
                                                  'Result))
                            (tpl-srt-def 'PossibleGhost
                                         (tpl-pmtr 'GivenPossibleValidGhost)
                                         null
                                         (typedef (tpl-pmtr (scope (scope 'structured
                                                                          (tpl-use 'Invalidate 'GivenPossibleValidGhost 'Point))
                                                                   'result))
                                                  'Result))
                            (tpl-srt-def 'ConstructExpr
                                         (list (tpl-pmtr 'ArgPreSeqWalk)
                                               (tpl-pmtr 'DestType))
                                         null
                                         (typedef (tpl-use NS-chunk 'SeqWalk 'DestType)
                                                  'Coef)
                                         (typedef (tpl-pmtr (scope 'ArgPreSeqWalk 'SeqWalkType))
                                                  'Arg)
                                         (typedef (tpl-use 'ProdOp 'SeqWalk 'Arg 'Coef 'DestType)
                                                  'Result)
                                         (tpl-def (list (tpl-pmtr VG-chunk)
                                                        (tpl-pmtr SH-chunk))
                                                  (r-fcn-def (s-fcn-dcl 'in_sq_construct
                                                                        (tc 'Result)
                                                                        (adcr 'ArgPreSeqWalk 'arg)
                                                                        (adcr (tpl-use NSCL "1") 'coefs))
                                                             (typedef (tpl-pmtr (scope (scope 'structured (tpl-use 'Add SH-chunk 'Point))
                                                                                       'result))
                                                                      'NewShift)
                                                             (fc 'Result
                                                                 (mfc 'arg (tpl-fcn-use 'init VG-chunk 'NewShift))
                                                                 (fc 'Coef (mfc 'coefs 'coef)))))
                                         (tpl-def (tpl-pmtr SH-chunk)
                                                  (r-fcn-def (s-fcn-dcl 'rs_sq_construct
                                                                        (tc 'Result)
                                                                        (adcr 'ArgPreSeqWalk 'arg)
                                                                        (adcr (tpl-use NSCL "1") 'coefs))
                                                             (typedef (tpl-pmtr (scope (scope 'structured (tpl-use 'Add SH-chunk 'Point))
                                                                                       'result))
                                                                      'NewShift)
                                                             (fc 'Result
                                                                 (mfc 'arg (tpl-fcn-use 'init 'NewShift))
                                                                 (fc 'Coef (mfc 'coefs 'coef))))))
                            (gpu-only
                             (tpl-srt-def 'ConstructGPUExpr
                                          (list (tpl-pmtr 'ArgPreGPUWalk)
                                                (tpl-pmtr 'DestType))
                                          null
                                          (typedef (tpl-use NS-chunk 'GPUWalk 'DestType)
                                                   'Coef)
                                          (typedef (tpl-pmtr (scope 'ArgPreGPUWalk 'GPUWalkType))
                                                   'Arg)
                                          (typedef (tpl-use 'ProdOp 'GPUWalk 'Arg 'Coef 'DestType)
                                                   'Result)
                                          (tpl-def (list (tpl-pmtr VG-chunk)
                                                         (tpl-pmtr SH-chunk))
                                                   (r-fcn-def (s-fcn-dcl 'in_gpu_construct
                                                                         (tc 'Result)
                                                                         (adcr 'ArgPreGPUWalk 'arg)
                                                                         (adcr (tpl-use NSCL "1") 'coefs))
                                                              (typedef (tpl-pmtr (scope (scope 'structured (tpl-use 'Add SH-chunk 'Point))
                                                                                        'result))
                                                                       'NewShift)
                                                              (fc 'Result
                                                                  (mfc 'arg (tpl-fcn-use 'init VG-chunk 'NewShift))
                                                                  (fc 'Coef (mfc 'coefs 'coef)))))))
                            (tpl-srt-def 'ConstructReductionExpr
                                         (list (tpl-pmtr 'ArgPreReduction)
                                               (tpl-pmtr 'DestType))
                                         null
                                         (typedef (tpl-use NS-chunk 'Reduction 'DestType)
                                                  'Coef)
                                         (typedef (tpl-pmtr (scope 'ArgPreReduction 'ReductionType))
                                                  'Arg)
                                         (typedef (tpl-use 'ProdOp 'Reduction 'Arg 'Coef 'DestType)
                                                  'Result)
                                         (tpl-def (list (tpl-pmtr VG-chunk)
                                                        (tpl-pmtr SH-chunk))
                                                  (r-fcn-def (s-fcn-dcl 'in_rd_construct
                                                                        (tc 'Result)
                                                                        (adcr 'ArgPreReduction 'arg)
                                                                        (adcr (tpl-use NSCL "1") 'coefs))
                                                             (typedef (tpl-pmtr (scope (scope 'structured (tpl-use 'Add SH-chunk 'Point))
                                                                                       'result))
                                                                      'NewShift)
                                                             (fc 'Result
                                                                 (mfc 'arg (tpl-fcn-use 'reduce_init VG-chunk 'NewShift))
                                                                 (fc 'Coef (mfc 'coefs 'coef)))))
                                         (tpl-def (tpl-pmtr SH-chunk)
                                                  (r-fcn-def (s-fcn-dcl 'rs_rd_construct
                                                                        (tc 'Result)
                                                                        (adcr 'ArgPreReduction 'arg)
                                                                        (adcr (tpl-use NSCL "1") 'coefs))
                                                             (typedef (tpl-pmtr (scope (scope 'structured (tpl-use 'Add SH-chunk 'Point))
                                                                                       'result))
                                                                      'NewShift)
                                                             (fc 'Result
                                                                 (mfc 'arg (tpl-fcn-use 'reduce_init 'NewShift))
                                                                 (fc 'Coef (mfc 'coefs 'coef))))))))
      (tpl-srt-def 'BuildStencilPointList
                   (tpl-pmtr 'First)
                   null
                   (typedef (tpl-use NSPL 'First Nil-chunk)
                            'Result))
      (tpl-srt-def 'BuildTwoPointList
                   (list (tpl-pmtr 'First)
                         (tpl-pmtr 'Second))
                   null
                   (typedef (tpl-pmtr (scope (tpl-use 'BuildStencilPointList 'First)
                                             'Result))
                            'FirstPoint)
                   (typedef (tpl-pmtr (scope (scope 'FirstPoint (tpl-fcn-use 'AddPoint 'Second))
                                             'Result))
                            'Result))
      (tpl-srt-def 'BuildFourPointList
                   (list (tpl-pmtr 'First)
                         (tpl-pmtr 'Second)
                         (tpl-pmtr 'Third)
                         (tpl-pmtr 'Fourth))
                   null
                   (typedef (tpl-pmtr (scope (tpl-use 'BuildStencilPointList 'First)
                                             'Result))
                            'FirstPoint)
                   (typedef (tpl-pmtr (scope (scope 'FirstPoint (tpl-fcn-use 'AddPoint 'Second))
                                             'Result))
                            'SecondFirstList)
                   (typedef (tpl-pmtr (scope (scope 'SecondFirstList (tpl-fcn-use 'AddPoint 'Third))
                                             'Result))
                            'ThirdSecondFirstList)
                   (typedef (tpl-pmtr (scope (scope 'ThirdSecondFirstList (tpl-fcn-use 'AddPoint 'Fourth))
                                             'Result))
                            'Result))
      (build-struct NSt
                    #true
                    (list 'Pts 'Arg)
                    null
                    (bs-Initial (list (typedef (tpl-use NSCL (scope 'Pts 'length))
                                               'Coefs)
                                      (typedef (tpl-pmtr (scope 'Pts (tpl-fcn-use 'ConstructExpr 'Arg FT-chunk)))
                                               'ConstructExpr)
                                      (typedef (tpl-pmtr (scope 'ConstructExpr
                                                                'Result))
                                               'ArgSeqWalkType)
                                      (gpu-only (smt-list-chunk new-line-chunk
                                                                (typedef (tpl-pmtr (scope 'Pts (tpl-fcn-use 'ConstructGPUExpr 'Arg FT-chunk)))
                                                                         'ConstructGPUExpr)
                                                                (typedef (tpl-pmtr (scope 'ConstructGPUExpr 'Result))
                                                                         'ArgGPUWalkType)))
                                      (typedef (tpl-pmtr (scope 'Pts (tpl-fcn-use 'ConstructReductionExpr 'Arg FT-chunk)))
                                               'ConstructReductionExpr)
                                      (typedef (tpl-pmtr (scope 'ConstructReductionExpr 'Result))
                                               'ArgReductionType))
                                (list (list 'Pts 'ArgSeqWalkType)
                                      (list 'Pts (tpl-pmtr (scope 'Arg 'ResizePrepType)))
                                      (list 'Pts 'ArgGPUWalkType)
                                      (list 'Pts 'ArgReductionType))
                                (tpl-pmtr (scope (scope 'Pts (tpl-fcn-use 'PossibleGhost (tpl-pmtr (scope 'Arg report-VG-chunk))))
                                                 'Result))
                                (bm-constructor (list (adcr 'Arg 'a)
                                                      (adcr 'Coefs 'coefs))
                                                (list (cons-asgn 'arg_ 'a)
                                                      (cons-asgn 'coefs_ 'coefs))
                                                null)
                                (fc (scope 'ConstructExpr (tpl-fcn-use 'in_sq_construct VG-chunk SH-chunk))
                                    'arg_
                                    'coefs_)
                                (list (mfc 'arg_ (tpl-fcn-use 'resize_prep VG-chunk))
                                      'coefs_)
                                (fc (scope 'ConstructGPUExpr (tpl-fcn-use 'in_gpu_construct VG-chunk SH-chunk))
                                    'arg_
                                    'coefs_)
                                (fc (scope 'ConstructExpr (tpl-fcn-use 'in_reduce_construct VG-chunk SH-chunk))
                                    'arg_
                                    'coefs_)
                                null
                                (list (adc 'Arg 'arg_)
                                      (adc 'Coefs 'coefs_)))
                    (bs-ResizePrep (typedef (tpl-use NSCL (scope 'Pts 'length))
                                            'Coefs)
                                   (list 'Pts (tpl-pmtr (scope 'Arg 'ResizeType)))
                                   (bm-constructor (list (adcr 'Arg 'arg)
                                                         (adcr 'Coefs 'coefs))
                                                   (list (cons-asgn 'arg_ 'arg)
                                                         (cons-asgn 'coefs_ 'coefs))
                                                   null)
                                   (list (mfc 'arg_ 'resize 'split 'location)
                                         'coefs_)
                                   null
                                   (list (adc 'Arg 'arg_)
                                         (adc 'Coefs 'coefs_)))
                    (bs-Resize (list (typedef (tpl-use NSCL (scope 'Pts 'length))
                                              'Coefs)
                                     (typedef (tpl-pmtr (scope 'Pts (tpl-fcn-use 'ConstructExpr 'Arg FT-chunk)))
                                              'ConstructExpr)
                                     (typedef (tpl-pmtr (scope 'ConstructExpr
                                                               'Result))
                                              'ArgSeqWalkType))
                               (list 'Pts 'ArgSeqWalkType)
                               (bm-constructor (list (adcr 'Arg 'arg)
                                                     (adcr 'Coefs 'coefs))
                                               (list (cons-asgn 'arg_ 'arg)
                                                     (cons-asgn 'coefs_ 'coefs))
                                               null)
                               (fc (scope 'ConstructExpr (tpl-fcn-use 'rs_sq_construct SH-chunk))
                                   'arg_
                                   'coefs_)
                               null
                               (list (adc 'Arg 'arg_)
                                     (adc 'Coefs 'coefs_)))
                    (bs-SeqWalk (typedef (scope (tpl-pmtr FT-chunk)
                                                'value_type)
                                         'AtomicType)
                                (bm-constructor (adcr 'Arg 'arg)
                                                (cons-asgn 'arg_ 'arg)
                                                null)
                                (mfc 'arg_ 'next)
                                (mfc 'arg_ 'at_end)
                                (mfc 'arg_ 'has_length)
                                (r-fcn-def (constize (fcn-dcl 'eval (tc 'AtomicType)))
                                           null
                                           (mfc 'arg_ 'eval))
                                (ad 'Arg 'arg_))
                    (bs-GPU-const null
                                  (bm-constructor (adcr 'Arg 'a)
                                                  (cons-asgn 'arg_ 'a)
                                                  null)
                                  (mfc 'arg_ 'start 'x 'y)
                                  (mfc 'arg_ 'next)
                                  (mfc 'arg_ 'eval)
                                  null
                                  (ad 'Arg 'arg_))
                    (bs-Reduction (typedef (scope (tpl-pmtr FT-chunk)
                                                  'value_type)
                                           'AtomicType)
                                  (bm-constructor (adcr 'Arg 'arg)
                                                  (cons-asgn 'arg_ 'arg)
                                                  null)
                                  (mfc 'arg_ 'next)
                                  (mfc 'arg_ 'at_end)
                                  (mfc 'arg_ 'has_length)
                                  'AtomicType
                                  (mfc 'arg_ 'eval)
                                  null
                                  (ad 'Arg 'arg_)))
      (tpl-def (list (tpl-pmtr 'LhsType)
                     (tpl-pmtr 'RhsType))
               (v-fcn-def 'nebo_assignment_sequential_execute_internal
                          (list (ad 'LhsType 'lhs)
                                (ad 'RhsType 'rhs))
                          (bs (fc 'while (c '! (mfc 'lhs 'at_end)))
                              (body-chunk (n= (mfc 'lhs 'ref)
                                              (mfc 'rhs 'eval))
                                          (mfc 'lhs 'next)
                                          (mfc 'rhs 'next)))))
      (tpl-def (list (tpl-pmtr 'ValidGhost)
                     (tpl-pmtr 'InitialShift)
                     (tpl-pmtr 'ExprType)
                     (tpl-pmtr FT-chunk))
               (r-fcn-def (fcn-dcl 'nebo_assignment_sequential_execute
                                   (cref FT-chunk)
                                   (list (adr FT-chunk 'initial_lhs)
                                         (adcr (tpl-use NE-chunk 'ExprType FT-chunk)
                                               'initial_rhs)))
                          (fc 'nebo_assignment_sequential_execute_internal
                              (mfc (fc (tpl-use NF-chunk 'Initial FT-chunk)
                                       'initial_lhs)
                                   (tpl-fcn-use 'init 'ValidGhost 'InitialShift))
                              (mfc (mfc 'initial_rhs 'expr)
                                   (tpl-fcn-use 'init 'ValidGhost 'InitialShift)))
                          'initial_lhs))
      (pp-conditional-ifdef-chunk
       'FIELD_EXPRESSION_THREADS
       (tpl-def (list (tpl-pmtr 'InitialShift)
                      (tpl-pmtr 'ResizeLhsType)
                      (tpl-pmtr 'ResizeRhsType)
                      (tpl-pmtr FT-chunk))
                (v-fcn-def 'nebo_assignment_thread_parallel_execute_internal
                           (list (adr 'ResizeLhsType 'lhs)
                                 (adcr 'ResizeRhsType 'rhs)
                                 (adcr IntVec 'split)
                                 (adcr IntVec 'location)
                                 (adp (scope 'BI 'interprocess_semaphore)
                                      'semaphore))
                           (list (fc 'nebo_assignment_sequential_execute_internal
                                     (mfc (mfc 'lhs 'resize 'split 'location)
                                          (tpl-fcn-use 'init 'InitialShift))
                                     (mfc (mfc 'rhs 'resize 'split 'location)
                                          (tpl-fcn-use 'init 'InitialShift)))
                                 (fc (c 'semaphore '-> 'post))))))
      (pp-conditional-ifdef-chunk
       'FIELD_EXPRESSION_THREADS
       (tpl-def (list (tpl-pmtr 'ValidGhost)
                      (tpl-pmtr 'InitialShift)
                      (tpl-pmtr 'ExprType)
                      (tpl-pmtr FT-chunk))
                (r-fcn-def (fcn-dcl 'nebo_assignment_thread_parallel_execute
                                    (cref FT-chunk)
                                    (list (adr FT-chunk 'initial_lhs)
                                          (adcr (tpl-use NE-chunk 'ExprType FT-chunk)
                                                'initial_rhs)
                                          (adc 'int 'number_of_partitions)))
                           (list (typedef (tpl-pmtr (scope (tpl-use NF-chunk 'Initial FT-chunk)
                                                           'ResizePrepType))
                                          'LhsType)
                                 (typedef (tpl-pmtr (scope 'ExprType 'ResizePrepType))
                                          'RhsType)
                                 (typedef (tpl-pmtr (scope FT-chunk 'memory_window))
                                          'MemoryWindow)
                                 (nt= (scope 'structured 'IntVec)
                                      'extent
                                      (mfc (mfc (mfc 'initial_lhs (tpl-fcn-use 'resize_ghost VG-chunk))
                                                'window_with_ghost)
                                           'extent))
                                 (let ([=1 (lambda (sym) (nt= 'int sym "1"))])
                                   (smt-list-chunk new-line-chunk
                                                   (=1 'x)
                                                   (=1 'y)
                                                   (=1 'z)))
                                 (b new-line-chunk
                                    (bs (fc 'if (n<= 'number_of_partitions (c 'extent "[2]")))
                                        (body-chunk (n= 'z 'number_of_partitions)))
                                    (bs 'else
                                        (fc 'if (n<= 'number_of_partitions (c 'extent "[1]")))
                                        (body-chunk (n= 'y 'number_of_partitions)))
                                    (bs 'else
                                        (fc 'if (n<= 'number_of_partitions (c 'extent "[0]")))
                                        (body-chunk (n= 'x 'number_of_partitions))))
                                 (nt= IntVec 'split (fc IntVec 'x 'y 'z))
                                 (bs (scope 'BI 'interprocess_semaphore)
                                     (fc 'semaphore "0"))
                                 (nt= 'int 'count "0")
                                 (bs (fc 'for (bs semi-colon-chunk
                                                  (c (n< 'count 'number_of_partitions)
                                                     semi-colon-chunk)
                                                  (n++ 'count)))
                                     (body-chunk (let ([option (lambda (arg) (ter-cond (par (n== arg "1"))
                                                                                       "0"
                                                                                       'count))])
                                                   (nt= IntVec 'location (fc IntVec
                                                                             (option 'x)
                                                                             (option 'y)
                                                                             (option 'z))))
                                                 (mfc (fc (scope 'ThreadPoolFIFO 'self))
                                                      'schedule
                                                      (fc (scope 'boost 'bind)
                                                          (c (ref) (tpl-use 'nebo_assignment_thread_parallel_execute_internal 'InitialShift 'LhsType 'RhsType FT-chunk))
                                                          (mfc (fc (tpl-use NF-chunk 'Initial FT-chunk)
                                                                   'initial_lhs)
                                                               (tpl-fcn-use 'resize_prep 'ValidGhost))
                                                          (mfc (mfc 'initial_rhs 'expr)
                                                               (tpl-fcn-use 'resize_prep 'ValidGhost))
                                                          'split
                                                          'location
                                                          (c (ref) 'semaphore)))))
                                 (bs (fc 'for (bs (c (nt= 'int 'ii "0")
                                                     semi-colon-chunk)
                                                  (c (n< 'ii 'number_of_partitions)
                                                     semi-colon-chunk)
                                                  (n++ 'ii)))
                                     (body-chunk (mfc 'semaphore 'wait))))
                           'initial_lhs)))
      (tpl-def (list (tpl-pmtr 'CallStyle)
                     (tpl-pmtr 'ExprType)
                     (tpl-pmtr FT-chunk))
               (r-fcn-def (fcn-dcl 'nebo_assignment_general_execute
                                   (cref FT-chunk)
                                   (list (adr FT-chunk 'initial_lhs)
                                         (adcr (tpl-use NE-chunk 'ExprType FT-chunk)
                                               'initial_rhs)))
                          (list (typedef (tpl-pmtr (scope (tpl-use 'IteratorStyle
                                                                   'CallStyle
                                                                   (tpl-pmtr (scope (scope 'structured
                                                                                           (tpl-use 'Minimum
                                                                                                    (tpl-pmtr (scope 'ExprType
                                                                                                                     report-VG-chunk))
                                                                                                    (tpl-pmtr (scope (scope 'structured
                                                                                                                            (tpl-use 'GhostFromField FT-chunk))
                                                                                                                     'result))))
                                                                                    'result))
                                                                   (tpl-pmtr (scope (scope 'structured
                                                                                           (tpl-use 'MinimumGhostFromField FT-chunk))
                                                                                    'result)))
                                                          'result))
                                         'ValidGhost)
                                (typedef (scope 'structured (tpl-use 'IndexTriplet "0" "0" "0"))
                                         'InitialShift))
                          (c new-line-chunk
                             (let* ([sequential-call (fc (tpl-use 'nebo_assignment_sequential_execute 'ValidGhost 'InitialShift 'ExprType FT-chunk)
                                                         'initial_lhs
                                                         'initial_rhs)]
                                    [parallel-call (fc (tpl-use 'nebo_assignment_thread_parallel_execute 'ValidGhost 'InitialShift 'ExprType FT-chunk)
                                                         'initial_lhs
                                                         'initial_rhs
                                                         (fc 'get_soft_thread_count))])
                               (pp-conditional-ifdef-chunk
                                'FIELD_EXPRESSION_THREADS
                                (ter-cond (fc 'is_thread_parallel)
                                          parallel-call
                                          sequential-call)
                                sequential-call))
                             new-line-chunk)))
      (let ([assigns
             (lambda (name rec-call iterator)
               (let ([assign (lambda (name tpl-pmtrs rhs-type body return-expr)
                               (tpl-def (list tpl-pmtrs
                                              (tpl-pmtr FT-chunk))
                                        (r-fcn-def (fcn-dcl name
                                                            (cref FT-chunk)
                                                            (adr FT-chunk 'lhs)
                                                            (adcr rhs-type 'rhs))
                                                   body
                                                   return-expr)))])
                 (smt-list-chunk blank-line-chunk
                                 (assign name
                                         null
                                         (scope (tpl-pmtr FT-chunk)
                                                'value_type)
                                         (typedef (tpl-use NS-chunk 'Initial FT-chunk)
                                                  'ExprType)
                                         rec-call)
                                 (assign name
                                         null
                                                 FT-chunk
                                                 (typedef (tpl-use NCF-chunk 'Initial FT-chunk)
                                                          'ExprType)
                                                 rec-call)
                                 (assign name
                                         (tpl-pmtr 'ExprType)
                                         (tpl-use NE-chunk 'ExprType FT-chunk)
                                         null
                                         (fc (tpl-use 'nebo_assignment_general_execute iterator 'ExprType FT-chunk)
                                             'lhs
                                             'rhs)))))])
        (list (assigns (bs 'operator '<<=)
                       (par 'lhs
                            '<<=
                            (fc (tpl-use NE-chunk 'ExprType FT-chunk)
                                (fc 'ExprType 'rhs)))
                       'UseWholeIterator)
              (assigns 'interior_assign
                       (fc 'interior_assign
                           'lhs
                           (fc (tpl-use NE-chunk 'ExprType FT-chunk)
                               (fc 'ExprType 'rhs)))
                       'UseInteriorIterator)))
      (gpu-only
       (tpl-def (list (tpl-pmtr 'Dest)
                      (tpl-pmtr 'Src))
                (bs '__global__
                    (v-fcn-def 'gpu_assign_kernel
                               (list (ad 'Dest 'dest)
                                     (ad 'Src 'src))
                               (nt=c 'int 'ii (n+ (n* 'blockIdx.x 'blockDim.x) 'threadIdx.x))
                               (nt=c 'int 'jj (n+ (n* 'blockIdx.y 'blockDim.y) 'threadIdx.y))
                               (mfc 'dest 'start 'ii 'jj)
                               (mfc 'src 'start 'ii 'jj)
                               (bs (fc 'if (mfc 'dest 'valid))
                                   (body-chunk (bs (fc 'while (c '! (mfc 'dest 'at_end)))
                                                   (body-chunk (n= (mfc 'dest 'ref)
                                                                   (mfc 'src 'eval))
                                                               (mfc 'dest 'next)
                                                               (mfc 'src 'next)))))))))
      (gpu-only
       (tpl-def (list (tpl-pmtr 'ExprType)
                      (tpl-pmtr FT-chunk))
                (v-fcn-def 'gpu_assign
                           (list (adr FT-chunk 'initial_lhs)
                                 (adcr (tpl-use NE-chunk 'ExprType FT-chunk)
                                       'initial_rhs))
                           (typedef (tpl-pmtr (scope (scope 'structured
                                                            (tpl-use 'Minimum
                                                                     (tpl-pmtr (scope 'ExprType
                                                                                      report-VG-chunk))
                                                                     (tpl-pmtr (scope (scope 'structured
                                                                                             (tpl-use 'GhostFromField FT-chunk))
                                                                                      'result))))
                                                     'result))
                                    'ValidGhost)
                           (typedef (scope 'structured (tpl-use 'IndexTriplet "0" "0" "0"))
                                    'InitialShift)
                           (typedef (tpl-pmtr (scope FT-chunk 'memory_window))
                                    'MemoryWindow)
                           (nt= 'MemoryWindow 'mw (mfc 'initial_lhs 'window_with_ghost))
                           (nt= 'int 'blockDim "16")
                           (nt= 'int 'gDimX (n+ (n/ (mfc 'mw 'extent "0")
                                                    'blockDim)
                                                (ter-cond (n> (par (n% (mfc 'mw 'extent "0")
                                                                       'blockDim))
                                                              "0")
                                                          "1"
                                                          "0")))
                           (nt= 'int 'gDimY (n+ (n/ (mfc 'mw 'extent "1")
                                                    'blockDim)
                                                (ter-cond (n> (par (n% (mfc 'mw 'extent "1")
                                                                       'blockDim))
                                                              "0")
                                                          "1"
                                                          "0")))
                           (bs 'dim3 (fc 'dimBlock 'blockDim 'blockDim))
                           (bs 'dim3 (fc 'dimGrid 'gDimX 'gDimY))
                           (typedef (tpl-use NF-chunk 'Initial FT-chunk)
                                    'LhsType)
                           (typedef (tpl-pmtr (scope 'LhsType 'GPUWalkType))
                                    'LhsGPUType)
                           (typedef 'ExprType 'RhsType)
                           (typedef (tpl-pmtr (scope 'RhsType 'GPUWalkType))
                                    'RhsGPUType)
                           (bs 'LhsType (fc 'lhs 'initial_lhs))
                           (bs 'RhsType (fc 'rhs (mfc 'initial_rhs 'expr)))
                           (fc (kernel-use (tpl-use 'gpu_assign_kernel 'LhsGPUType 'RhsGPUType)
                                           'dimGrid
                                           'dimBlock)
                               (mfc 'lhs (tpl-fcn-use 'gpu_init 'ValidGhost 'InitialShift))
                               (mfc 'rhs (tpl-fcn-use 'gpu_init 'ValidGhost 'InitialShift))))))
      (gpu-only
       (tpl-def (tpl-pmtr FT-chunk)
                (v-fcn-def (bs 'operator "|=")
                           (list (adr FT-chunk 'lhs)
                                 (adcr FT-chunk 'rhs))
                           (typedef (tpl-use NCF-chunk 'Initial FT-chunk)
                                    'ExprType)
                           (bs 'lhs "|=" (fc (tpl-use NE-chunk 'ExprType FT-chunk)
                                             (fc 'ExprType 'rhs))))))
      (gpu-only
       (tpl-def (list (tpl-pmtr 'ExprType)
                      (tpl-pmtr FT-chunk))
                (v-fcn-def (bs 'operator "|=")
                           (list (adr FT-chunk 'lhs)
                                 (adcr (tpl-use NE-chunk 'ExprType FT-chunk)
                                       'rhs))
                           (fc 'gpu_assign 'lhs 'rhs))))
      )))
