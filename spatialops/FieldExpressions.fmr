 ; Copyright (c) 2011 The University of Utah
 ;
 ; Permission is hereby granted, free of charge, to any person obtaining a copy
 ; of this software and associated documentation files (the "Software"), to
 ; deal in the Software without restriction, including without limitation the
 ; rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ; sell copies of the Software, and to permit persons to whom the Software is
 ; furnished to do so, subject to the following conditions:
 ;
 ; The above copyright notice and this permission notice shall be included in
 ; all copies or substantial portions of the Software.
 ;
 ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ; IN THE SOFTWARE.

(let* ([id (lambda (x) x)]
       [l literal-chunk]
       [c concat-chunk]
       [b between-chunk]
       [b/a between/attach-chunk]
       [n namespace-define-chunk]
       [i (lambda chunks (between/attach-chunk semi-colon-chunk blank-line-chunk chunks))]
       [d described-smts-chunk]
       [p paren-list-chunk]
       [m macro-define-chunk]
       [s space-chunk]
       [cs (lambda chunks (c chunks s))]
       [scs (lambda chunks (c s chunks s))]
       [cc (lambda chunks (c chunks semi-colon-chunk))]
       [ccs (lambda (first second) (c first semi-colon-chunk s second))]
       [bs (lambda chunks (apply b s chunks))]
       [bl-smts (lambda chunks (smt-list-chunk blank-line-chunk chunks))]
       [typedef typedef-smt-chunk]
       [fc function-call-chunk]
       [mfc member-function-call-chunk]
       [fcn-def function-define-chunk]
       [v-fcn-def void-function-define-chunk]
       [v-fcn-dcl void-function-declare-chunk]
       [r-fcn-def returning-function-define-chunk]
       [fcn-dcl function-declare-chunk]
       [constize constize-chunk]
       [s-fcn-dcl static-function-declare-chunk]
       [tpl-def template-define-chunk]
       [srt-dcl struct-declare-chunk]
       [srt-def struct-define-chunk]
       [tpl-srt-dcl template-struct-declare-chunk]
       [tpl-srt-def template-struct-define-chunk]
       [tpl-use template-use-chunk]
       [tpl-pmtr (lambda (pmtr) (c typename-chunk s pmtr))]
       [sub-tpl-use (lambda (pmtr) (c template-chunk s pmtr))]
       [tpl-fcn-use (lambda pmtrs (sub-tpl-use (apply tpl-use pmtrs)))]
       [sec-def section-define-chunk]
       [cons-asgn constructor-assignment-chunk]
       [scope scope-resolution-operator-chunk]
       [enum (lambda enums (bs 'enum (arg-list-chunk open-crbr-chunk comma-chunk close-crbr-chunk enums)))]
       [kernel-use (lambda (name . args) (tpl-use name (tpl-use null (tpl-use null args))))]
       [device-use (lambda chunks (c '__device__ s chunks))]
       [threads-or (lambda (then else)
                     (pp-conditional-ifdef-chunk 'FIELD_EXPRESSION_THREADS
                                                 (c then)
                                                 (if (not else)
                                                     #false
                                                     (c else))))]
       [threads-only (lambda chunks (threads-or chunks #false))]
       [gpu-or (lambda (then else)
                 (pp-conditional-ifdef-chunk '__CUDACC__
                                             (c then)
                                             (if (not else)
                                                 #false
                                                 (c else))))]
       [gpu-only (lambda chunks (gpu-or chunks #false))]
       [par (lambda chunks (p (bs chunks)))]
       [ter-cond (lambda (if then else) (par if '? then colon-chunk else))]
       [op-asgn (lambda (op lhs . rhs) (bs lhs op rhs))]
       [n= (lambda (lhs . rhs) (op-asgn '= lhs rhs))]
       [nt= (lambda (type lhs . rhs) (n= (bs type lhs) rhs))]
       [nt=c (lambda (type lhs . rhs) (nt= (bs const-chunk type) lhs rhs))]
       [ngpu= (lambda (lhs . rhs) (op-asgn "|=" lhs rhs))]
       [n+= (lambda (lhs . rhs) (op-asgn '+= lhs rhs))]
       [n== (lambda (lhs . rhs) (op-asgn '== lhs rhs))]
       [n< (lambda (lhs . rhs) (op-asgn '< lhs rhs))]
       [n> (lambda (lhs . rhs) (op-asgn '> lhs rhs))]
       [n<= (lambda (lhs . rhs) (op-asgn '<= lhs rhs))]
       [n>= (lambda (lhs . rhs) (op-asgn '>= lhs rhs))]
       [n+ (lambda (lhs . rhs) (op-asgn '+ lhs rhs))]
       [n- (lambda (lhs . rhs) (op-asgn '- lhs rhs))]
       [n* (lambda (lhs . rhs) (op-asgn '* lhs rhs))]
       [n/ (lambda (lhs . rhs) (op-asgn '/ lhs rhs))]
       [n% (lambda (lhs . rhs) (op-asgn '% lhs rhs))]
       [n++ (lambda (chunk) (l chunk '++))]
       [n-and (lambda (lhs . rhs) (b (scs '&&) lhs rhs))]
       [n-or (lambda (lhs . rhs) (b (scs "||") lhs rhs))]
       [n-not (lambda (lhs) (c '! (par lhs)))]
       [tc (lambda chunks (bs chunks const-chunk))]
       [ref (lambda chunks (bs chunks '&))]
       [cref (lambda chunks (ref (tc chunks)))]
       [ptr (lambda chunks (bs chunks '*))]
       [cptr (lambda chunks (ptr (tc chunks)))]
       [ad (lambda (type arg) (bs type arg))]
       [adc (lambda (type arg) (bs (tc type) arg))]
       [adr (lambda (type arg) (bs (ref type) arg))]
       [adcr (lambda (type arg) (bs (cref type) arg))]
       [adp (lambda (type arg) (bs (ptr type) arg))]
       [adcp (lambda (type arg) (bs (cptr type) arg))]
       [nif (lambda (check . then)
              (bs (fc 'if check)
                  (body-chunk then)))]
       [nelse (lambda (else) (bs 'else (body-chunk else)))]
       [nifelse (lambda (check then else)
                  (b new-line-chunk
                     (nif check then)
                     (nelse else)))]
       [nelseif (lambda (check . then) (bs 'else (nif check then)))]
       [nifelseif (lambda (check1 then1 check2 then2)
                    (b new-line-chunk
                       (nif check1 then1)
                       (nelseif check2 then2)))]
       [nwhile (lambda (while . body)
                 (bs (fc 'while while)
                     (body-chunk body)))]
       [nfor (lambda (init check next . body)
               (bs (fc 'for (bs (cc init)
                                (cc check)
                                next))
                   (body-chunk body)))]
       [report-VG-chunk 'PossibleValidGhost]
       [VG-chunk 'ValidGhost]
       [SH-chunk 'Shift]
       [DI-chunk 'deviceIndex]
       [NE-chunk 'NeboExpression]
       [NBE-chunk 'NeboBooleanExpression]
       [FT-chunk 'FieldType]
       [NS-chunk 'NeboScalar]
       [NB-chunk 'NeboBoolean]
       [NCF-chunk 'NeboConstField]
       [NF-chunk 'NeboField]
       [Nil-chunk 'NeboNil]
       [SClause-chunk 'NeboSimpleClause]
       [SFClause-chunk 'NeboSimpleFinalClause]
       [SCond-chunk 'NeboSimpleCond]
       [Clause-chunk 'NeboClause]
       [Cond-chunk 'NeboCond]
       [CT-chunk 'ClauseType]
       [IntVec (scope 'structured 'IntVec)]
       [NSP 'NeboStencilPoint]
       [NSPC 'NeboStencilPointCollection]
       [NSCC 'NeboStencilCoefCollection]
       [NSt 'NeboStencil]
       [pp-header-file-chunk-with-license
        (lambda (file-name file-setup . chunks)
          (c (b new-line-chunk
                "/*"
                " * Copyright (c) 2011 The University of Utah"
                " *"
                " * Permission is hereby granted, free of charge, to any person obtaining a copy"
                " * of this software and associated documentation files (the \"Software\"), to"
                " * deal in the Software without restriction, including without limitation the"
                " * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or"
                " * sell copies of the Software, and to permit persons to whom the Software is"
                " * furnished to do so, subject to the following conditions:"
                " *"
                " * The above copyright notice and this permission notice shall be included in"
                " * all copies or substantial portions of the Software."
                " *"
                " * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"
                " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"
                " * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE"
                " * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"
                " * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING"
                " * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS"
                " * IN THE SOFTWARE."
                " */")
             blank-line-chunk
             (pp-header-file-chunk file-name file-setup chunks)))]
       [ignore (lambda given null)]
       [type-trans
        (lambda (new-type)
          (lambda (old-type) (tpl-pmtr (scope old-type new-type))))]
       [arg-swap
        (lambda (proc num1 num2 report)
          (lambda args1 (if (not (= num1 (length args1)))
                            (error (string-append report ": first set of arguments does not match expected number"))
                            (lambda args2 (if (not (= num2 (length args2)))
                                              (error (string-append report ": second set of arguments does not match expected number"))
                                              (apply proc (append args2 args1)))))))]
       [bm-constructor (arg-swap constructor-chunk 3 1 "bm-constructor")]
       [combine-args
        (lambda (final-proc combine-procs numbers report)
          (let* ([combine-procs-lst (if (list? combine-procs)
                                        combine-procs
                                        (list combine-procs))]
                 [combine-procs-count (length combine-procs-lst)]
                 [combine-count (- (length numbers) 2)]
                 [skip-num (first numbers)]
                 [combine-nums (take (rest numbers) combine-count)]
                 [final-num (last numbers)]
                 [total-num (apply + numbers)])
            (if (not (= combine-procs-count combine-count))
                (error (string-append report " : number of procedures does not match number of argument counts"))
                (lambda args (if (not (= total-num (length args)))
                                 (error (string-append report " : arguments do not match expected number"))
                                 (let* ([first-args (take args skip-num)]
                                        [combine-args (take (drop args skip-num)
                                                            (apply + combine-nums))]
                                        [last-args (drop args (apply + skip-num combine-nums))]
                                        [combine-args-lst (reverse (first (foldl (lambda (count result)
                                                                                   (let ([answer (first result)]
                                                                                         [args (second result)])
                                                                                     (list (cons (take args count)
                                                                                                 answer)
                                                                                           (drop args count))))
                                                                                 (list null combine-args)
                                                                                 combine-nums)))]
                                        [combine-results (map (lambda (proc args) (apply proc args))
                                                              combine-procs-lst
                                                              combine-args-lst)])
                                   (apply final-proc (append first-args
                                                             combine-results
                                                             last-args))))))))]
       [map*
        (lambda (proc . lsts)
          (apply map proc (map (lambda (lst) (if (list? lst)
                                                 (flatten* lst)
                                                 (list lst)))
                               lsts)))]
       [build-mode
        (lambda (name
                 mode
                 tpl-pars
                 typedefs
                 constructor
                 publics
                 privates)
          (tpl-srt-def name
                       (map tpl-pmtr (flatten* tpl-pars FT-chunk))
                       (list mode tpl-pars FT-chunk)
                       (sec-def public-chunk
                                (typedef FT-chunk 'field_type)
                                (typedef (scope (tpl-pmtr 'field_type)
                                                'memory_window)
                                         'MemoryWindow)
                                typedefs
                                (constructor name)
                                publics)
                       (sec-def private-chunk privates)))]
       [build-Initial-general
        (lambda (name
                 tpl-irreg-pars
                 tpl-reg-pars
                 typedefs
                 tpl-irreg-args
                 VG-type
                 constructor
                 publics
                 privates)
          (let ([SW-tpl-irreg-args (if (null? tpl-irreg-args) null (first tpl-irreg-args))]
                [RS-tpl-irreg-args (if (null? tpl-irreg-args) null (second tpl-irreg-args))]
                [GPU-tpl-irreg-args (if (null? tpl-irreg-args) null (third tpl-irreg-args))]
                [RD-tpl-irreg-args (if (null? tpl-irreg-args) null (fourth tpl-irreg-args))]
                [tpl-reg-args (lambda (type) (map* (type-trans type)
                                                   tpl-reg-pars))])
            (build-mode name
                        'Initial
                        (list tpl-irreg-pars tpl-reg-pars)
                        (list typedefs
                              (typedef (tpl-use name
                                                'SeqWalk
                                                SW-tpl-irreg-args
                                                (tpl-reg-args 'SeqWalkType)
                                                FT-chunk)
                                       'SeqWalkType)
                              (threads-only (typedef (tpl-use name
                                                              'Resize
                                                              RS-tpl-irreg-args
                                                              (tpl-reg-args 'ResizeType)
                                                              FT-chunk)
                                                     'ResizeType))
                              (gpu-only (typedef (tpl-use name
                                                          'GPUWalk
                                                          GPU-tpl-irreg-args
                                                          (tpl-reg-args 'GPUWalkType)
                                                          FT-chunk)
                                                 'GPUWalkType))
                              (typedef (tpl-use name
                                                'Reduction
                                                RD-tpl-irreg-args
                                                (tpl-reg-args 'ReductionType)
                                                FT-chunk)
                                       'ReductionType)
                              (typedef VG-type report-VG-chunk))
                        constructor
                        publics
                        privates)))]
       [build-Initial-rhs (combine-args build-Initial-general
                                        (lambda (SW-cons-args
                                                 RS-cons-args
                                                 gpu-ready-body
                                                 GPU-cons-args
                                                 RD-cons-args
                                                 publics)
                                          (list (tpl-def (list (tpl-pmtr VG-chunk)
                                                               (tpl-pmtr SH-chunk))
                                                         (r-fcn-def (constize (fcn-dcl 'init 'SeqWalkType))
                                                                    null
                                                                    (fc 'SeqWalkType SW-cons-args)))
                                                (threads-only (tpl-def (tpl-pmtr VG-chunk)
                                                                       (r-fcn-def (constize (fcn-dcl 'resize 'ResizeType))
                                                                                  null
                                                                                  (fc 'ResizeType RS-cons-args))))
                                                (gpu-only (r-fcn-def (constize (fcn-dcl 'gpu_ready 'bool (adc 'int DI-chunk)))
                                                                     null
                                                                     gpu-ready-body))
                                                (gpu-only (tpl-def (list (tpl-pmtr VG-chunk)
                                                                         (tpl-pmtr SH-chunk))
                                                                   (r-fcn-def (constize (fcn-dcl 'gpu_init 'GPUWalkType (adc 'int DI-chunk)))
                                                                              null
                                                                              (fc 'GPUWalkType GPU-cons-args))))
                                                (tpl-def (list (tpl-pmtr VG-chunk)
                                                               (tpl-pmtr SH-chunk))
                                                         (r-fcn-def (constize (fcn-dcl 'reduce_init 'ReductionType))
                                                                    null
                                                                    (fc 'ReductionType RD-cons-args)))
                                                publics))
                                        (list 7 6 1)
                                        "build-Initial-rhs")]
       [bs-Initial-rhs (arg-swap build-Initial-rhs 11 3 "bs-Initial-rhs")]
       [build-Initial-lhs (combine-args build-Initial-general
                                        (let ([assign (lambda (name body)
                                                        (tpl-def (list (tpl-pmtr 'Iterator)
                                                                       (tpl-pmtr 'RhsType))
                                                                 (v-fcn-def name
                                                                            (ad 'RhsType 'rhs)
                                                                            body)))]
                                              [assign-call (lambda (name)
                                                             (fc (tpl-use name 'Iterator 'RhsType)
                                                                 'rhs))])
                                          (list (lambda (publics)
                                                  (list (typedef (scope 'structured (tpl-use 'IndexTriplet "0" "0" "0"))
                                                                 SH-chunk)
                                                        (assign 'assign
                                                                (gpu-or (nifelse (n-and (fc 'gpu_ready)
                                                                                        (mfc 'rhs
                                                                                             'gpu_ready
                                                                                             (fc 'gpu_device_index)))
                                                                                 (assign-call 'gpu_assign)
                                                                                 (assign-call 'cpu_assign))
                                                                        (assign-call 'cpu_assign)))
                                                        publics))
                                                (lambda (sequential-assign-body
                                                         SW-cons-args
                                                         thread-parallel-assign-body
                                                         RS-cons-args
                                                         gpu-assign-body
                                                         gpu-ready-body
                                                         gpu-device-index-body
                                                         GPU-cons-args
                                                         privates)
                                                  (list (assign 'cpu_assign
                                                                (threads-or (nifelse (fc 'is_thread_parallel)
                                                                                     (assign-call 'thread_parallel_assign)
                                                                                     (assign-call 'sequential_assign))
                                                                            (assign-call 'sequential_assign)))
                                                        (assign 'sequential_assign sequential-assign-body)
                                                        (tpl-def (list (tpl-pmtr VG-chunk)
                                                                       (tpl-pmtr SH-chunk))
                                                                 (r-fcn-def (fcn-dcl 'init 'SeqWalkType)
                                                                            null
                                                                            (fc 'SeqWalkType SW-cons-args)))
                                                        (threads-only
                                                         (assign 'thread_parallel_assign
                                                                 (list (bs (scope 'BI 'interprocess_semaphore)
                                                                           (fc 'semaphore "0"))
                                                                       (nt=c 'int 'thread_count (fc 'get_soft_thread_count))
                                                                       thread-parallel-assign-body
                                                                       (nfor (nt= 'int 'ii "0")
                                                                             (n< 'ii 'max)
                                                                             (n++ 'ii)
                                                                             (mfc 'semaphore 'wait)))))
                                                        (threads-only (tpl-def (tpl-pmtr VG-chunk)
                                                                               (r-fcn-def (fcn-dcl 'resize 'ResizeType)
                                                                                          null
                                                                                          (fc 'ResizeType RS-cons-args))))
                                                        (gpu-only (assign 'gpu_assign gpu-assign-body))
                                                        (gpu-only (r-fcn-def (constize (fcn-dcl 'gpu_ready 'bool))
                                                                             null
                                                                             gpu-ready-body))
                                                        (gpu-only (r-fcn-def (constize (fcn-dcl 'gpu_device_index 'int))
                                                                             null
                                                                             gpu-device-index-body))
                                                        (gpu-only (tpl-def (list (tpl-pmtr VG-chunk)
                                                                                 (tpl-pmtr SH-chunk))
                                                                           (r-fcn-def (fcn-dcl 'gpu_init 'GPUWalkType)
                                                                                      null
                                                                                      (fc 'GPUWalkType GPU-cons-args))))
                                                        privates))))
                                        (list 7 1 9 0)
                                        "build-Initial-lhs")]
       [bs-Initial-lhs (arg-swap build-Initial-lhs 14 3 "bs-Initial-lhs")]
       [build-Resize-general
        (lambda (name
                 tpl-irreg-pars
                 tpl-reg-pars
                 typedefs
                 tpl-irreg-args
                 constructor
                 publics
                 privates)
          (threads-only (build-mode name
                                    'Resize
                                    (list tpl-irreg-pars tpl-reg-pars)
                                    (list typedefs
                                          (typedef (tpl-use name
                                                            'SeqWalk
                                                            tpl-irreg-args
                                                            (map* (type-trans 'SeqWalkType)
                                                    tpl-reg-pars)
                                                            FT-chunk)
                                                   'SeqWalkType))
                                    constructor
                                    publics
                                    privates)))]
       [build-Resize-rhs (combine-args build-Resize-general
                                       (lambda (SW-cons-args
                                                publics)
                                         (list (tpl-def (tpl-pmtr SH-chunk)
                                                        (r-fcn-def (constize (fcn-dcl 'init
                                                                                      'SeqWalkType
                                                                                      (adcr IntVec 'split)
                                                                                      (adcr IntVec 'location)))
                                                                   null
                                                                   (fc 'SeqWalkType SW-cons-args)))
                                               publics))
                                       (list 6 2 1)
                                       "build-Resize-rhs")]
       [bs-Resize-rhs (arg-swap build-Resize-rhs 6 3 "bs-Resize-rhs")]
       [build-Resize-lhs (combine-args build-Resize-general
                                       (list (lambda (assign-body
                                                      publics)
                                               (list (typedef (scope 'structured (tpl-use 'IndexTriplet "0" "0" "0"))
                                                              SH-chunk)
                                                     (threads-only
                                                      (tpl-def (tpl-pmtr 'RhsType)
                                                               (v-fcn-def 'assign
                                                                          (list (adcr 'RhsType 'rhs)
                                                                                (adcr IntVec 'split)
                                                                                (adcr IntVec 'location)
                                                                                (adp (scope 'BI 'interprocess_semaphore) 'semaphore))
                                                                          (list assign-body
                                                                                (fc (c 'semaphore '-> 'post))))))
                                                     publics))
                                             (lambda (SW-cons-args
                                                      privates)
                                               (list (tpl-def (tpl-pmtr SH-chunk)
                                                              (r-fcn-def (fcn-dcl 'init
                                                                                  'SeqWalkType
                                                                                  (adcr IntVec 'split)
                                                                                  (adcr IntVec 'location))
                                                                         null
                                                                         (fc 'SeqWalkType SW-cons-args)))
                                                     privates)))
                                       (list 6 2 2 0)
                                       "build-Resize-lhs")]
       [bs-Resize-lhs (arg-swap build-Resize-lhs 7 3 "bs-Resize-lhs")]
       [build-SeqWalk-general
        (lambda (name
                 tpl-irreg-pars
                 tpl-reg-pars
                 typedefs
                 constructor
                 publics
                 privates)
          (build-mode name
                      'SeqWalk
                      (list tpl-irreg-pars tpl-reg-pars)
                      typedefs
                      constructor
                      publics
                      privates))]
       [build-SeqWalk-rhs (combine-args build-SeqWalk-general
                                        (lambda (next-body
                                                 eval-type
                                                 eval-result
                                                 publics)
                                          (list (v-fcn-def 'next null next-body)
                                                (r-fcn-def (constize (fcn-dcl 'eval eval-type))
                                                           null
                                                           eval-result)
                                                publics))
                                        (list 5 4 1)
                                        "build-SeqWalk-rhs")]
       [bs-SeqWalk-rhs (arg-swap build-SeqWalk-rhs 7 3 "bs-SeqWalk-rhs")]
       [build-SeqWalk-lhs (combine-args build-SeqWalk-general
                                        (list (lambda (assign-body
                                                       publics)
                                                (list (tpl-def (tpl-pmtr 'RhsType)
                                                               (v-fcn-def 'assign
                                                                          (ad 'RhsType 'rhs)
                                                                          assign-body))
                                                      publics))
                                              (lambda (next-body
                                                       at-end-body
                                                       has-length-body
                                                       ref-result
                                                       privates)
                                                (list (v-fcn-def 'next null next-body)
                                                      (r-fcn-def (constize (fcn-dcl 'at_end 'bool))
                                                                 null
                                                                 at-end-body)
                                                      (r-fcn-def (constize (fcn-dcl 'has_length 'bool))
                                                                 null
                                                                 has-length-body)
                                                      (r-fcn-def (fcn-dcl 'ref (ref 'AtomicType))
                                                                 null
                                                                 ref-result)
                                                      privates)))
                                        (list 5 2 5 0)
                                        "build-SeqWalk-lhs")]
       [bs-SeqWalk-lhs (arg-swap build-SeqWalk-lhs 9 3 "bs-SeqWalk-lhs")]
       [build-GPU-general
        (lambda (name
                 tpl-irreg-pars
                 tpl-reg-pars
                 typedefs
                 constructor
                 publics
                 privates)
          (gpu-only
           (build-mode name
                       'GPUWalk
                       (list tpl-irreg-pars tpl-reg-pars)
                       (list (typedef (tpl-pmtr (scope 'field_type 'value_type))
                                      'AtomicType)
                             typedefs)
                       constructor
                       publics
                       privates)))]
       [build-GPU-rhs (combine-args build-GPU-general
                                    (lambda (start-body
                                             next-body
                                             eval-result
                                             publics)
                                      (list (device-use (v-fcn-def 'start
                                                                   (list (bs 'int 'x)
                                                                         (bs 'int 'y))
                                                                   start-body))
                                            (device-use (v-fcn-def 'next
                                                                   null
                                                                   next-body))
                                            (device-use (r-fcn-def (fcn-dcl 'eval 'AtomicType)
                                                                   null
                                                                   eval-result))
                                            publics))
                                    (list 5 4 1)
                                    "build-GPU-rhs")]
       [bs-GPU-rhs (arg-swap build-GPU-rhs 7 3 "bs-GPU-rhs")]
       [build-GPU-lhs (combine-args build-GPU-general
                                    (list (lambda (assign-kernel-body
                                                   publics)
                                            (list (tpl-def (tpl-pmtr 'RhsType)
                                                           (bs '__global__
                                                               (v-fcn-def 'gpu_assign_kernel
                                                                          (ad 'RhsType 'rhs)
                                                                          (nt=c 'int 'ii (n+ (n* 'blockIdx.x 'blockDim.x) 'threadIdx.x))
                                                                          (nt=c 'int 'jj (n+ (n* 'blockIdx.y 'blockDim.y) 'threadIdx.y))
                                                                          (fc 'start 'ii 'jj)
                                                                          (mfc 'rhs 'start 'ii 'jj)
                                                                          (nif (fc 'valid)
                                                                               assign-kernel-body))))
                                                  publics))
                                          (lambda (valid-result
                                                   start-body
                                                   next-body
                                                   at-end-result
                                                   ref-result
                                                   privates)
                                            (list (device-use (r-fcn-def (fcn-dcl 'valid 'bool)
                                                                         null
                                                                         valid-result))
                                                  (device-use (v-fcn-def 'start
                                                                         (list (bs 'int 'x)
                                                                               (bs 'int 'y))
                                                                         start-body))
                                                  (device-use (v-fcn-def 'next
                                                                         null
                                                                         next-body))
                                                  (device-use (r-fcn-def (fcn-dcl 'at_end 'bool)
                                                                         null
                                                                         at-end-result))
                                                  (device-use (r-fcn-def (fcn-dcl 'ref (ref 'AtomicType))
                                                                         null
                                                                         ref-result))
                                                  privates)))
                                    (list 5 2 6 0)
                                    "build-GPU-lhs")]
       [bs-GPU-lhs (arg-swap build-GPU-lhs 10 3 "bs-GPU-lhs")]
       [build-Reduction
        (lambda (name
                 tpl-irreg-pars
                 tpl-reg-pars
                 typedefs
                 constructor
                 next
                 at-end
                 has-length
                 eval-type
                 eval-result
                 publics
                 privates)
          (build-mode name
                      'Reduction
                      (list tpl-irreg-pars tpl-reg-pars)
                      typedefs
                      constructor
                      (list (v-fcn-def 'next null next)
                            (r-fcn-def (constize (fcn-dcl 'at_end 'bool))
                                       null
                                       at-end)
                            (r-fcn-def (constize (fcn-dcl 'has_length 'bool))
                                       null
                                       has-length)
                            (r-fcn-def (constize (fcn-dcl 'eval eval-type))
                                       null
                                       eval-result)
                            publics)
                      privates))]
       [bs-Reduction (arg-swap build-Reduction 9 3 "bs-Reduction")]
       [build-struct
        (lambda (name
                 tpl-irreg-pars
                 tpl-reg-pars
                 Initial
                 Resize
                 SeqWalk
                 GPUWalk
                 Reduction)
          (let ([tpl-pars (list tpl-irreg-pars tpl-reg-pars)])
            (i (tpl-srt-dcl name
                            (map tpl-pmtr (flatten* 'CurrentMode tpl-irreg-pars tpl-reg-pars FT-chunk))
                            null)
               (map (lambda (mode)
                      (mode name tpl-irreg-pars tpl-reg-pars))
                    (list Initial Resize SeqWalk GPUWalk Reduction)))))]
       [build-Nary-struct
        (lambda (name number eval-return-type internal-use)
          (let* ([num-lst (if (>= 1 number)
                               '("")
                               (map number->string (sequence->list (in-range 1 (+ 1 number)))))]
                 [IN-op-lst (map (lambda (str) (l 'op str)) num-lst)]
                 [op-lst (map (lambda (str) (l 'operand str)) num-lst)]
                 [Op-lst (map (lambda (str) (l 'Operand str)) num-lst)]
                 [op_-lst (map (lambda (op) (l op '_)) op-lst)]
                 [mapper (lambda (proc . lsts) (apply map proc lsts))]
                 [op_-mfc (lambda (fcn . args) (map (lambda (op_) (mfc op_ fcn args))
                                                    op_-lst))]
                 [IN-typedef (lambda (type)
                               (lambda (Op) (tpl-pmtr (scope Op type))))]
                 [build-VG (lambda (Op-VG-lst)
                             (cond [(equal? 1 (length Op-VG-lst)) (first Op-VG-lst)]
                                   [(equal? 2 (length Op-VG-lst)) (tpl-pmtr (scope (scope 'structured (tpl-use 'Minimum
                                                                                                               (first Op-VG-lst)
                                                                                                               (second Op-VG-lst)))
                                                                                   'result))]
                                   [else (tpl-pmtr (scope (scope 'structured (tpl-use 'Minimum
                                                                                      (first Op-VG-lst)
                                                                                      (build-VG (rest Op-VG-lst))))
                                                          'result))]))]
                 [gen-data-mems (mapper (lambda (Op op_) (adc Op op_))
                                        Op-lst
                                        op_-lst)]
                 [gen-typedef (lambda (type) (lambda (Op) (tpl-pmtr (scope Op type))))]
                 [gen-constructor (bm-constructor (mapper (lambda (Op op) (adcr Op op))
                                                          Op-lst
                                                          op-lst)
                                                  (mapper (lambda (op_ op) (cons-asgn op_ op))
                                                          op_-lst
                                                          op-lst)
                                                  null)]
                 [next (b/a semi-colon-chunk s (op_-mfc 'next))]
                 [exec-check (lambda (n-logical fcn . args) (par (n-logical (op_-mfc fcn args))))]
                 [exec-or-check (lambda (fcn) (exec-check n-or fcn))]
                 [exec-and-check (lambda (fcn . args) (exec-check n-and fcn args))]
                 [exec-data-mems (mapper (lambda (Op op_) (ad Op op_))
                                         Op-lst
                                         op_-lst)])
            (build-struct name
                          null
                          Op-lst
                          (bs-Initial-rhs null
                                          null
                                          (build-VG (mapper (lambda (Op) (tpl-pmtr (scope Op report-VG-chunk)))
                                                            Op-lst))
                                          gen-constructor
                                          (op_-mfc (tpl-fcn-use 'init VG-chunk SH-chunk))
                                          (op_-mfc (tpl-fcn-use 'resize VG-chunk))
                                          (exec-and-check 'gpu_ready DI-chunk)
                                          (op_-mfc (tpl-fcn-use 'gpu_init VG-chunk SH-chunk) DI-chunk)
                                          (op_-mfc (tpl-fcn-use 'reduce_init VG-chunk SH-chunk))
                                          null
                                          gen-data-mems)
                          (bs-Resize-rhs null
                                         null
                                         gen-constructor
                                         (op_-mfc (tpl-fcn-use 'init SH-chunk)
                                                  'split
                                                  'location)
                                         null
                                         gen-data-mems)
                          (bs-SeqWalk-rhs (typedef eval-return-type 'EvalReturnType)
                                          gen-constructor
                                          next
                                          'EvalReturnType
                                          internal-use
                                          null
                                          exec-data-mems)
                          (bs-GPU-rhs null
                                      gen-constructor
                                      (op_-mfc 'start 'x 'y)
                                      (op_-mfc 'next)
                                      internal-use
                                      null
                                      exec-data-mems)
                          (bs-Reduction (typedef eval-return-type 'EvalReturnType)
                                        gen-constructor
                                        next
                                        (exec-or-check 'at_end)
                                        (exec-or-check 'has_length)
                                        'EvalReturnType
                                        internal-use
                                        null
                                        exec-data-mems))))]
       [build-binary-function-struct
        (lambda (name internal-name)
          (build-Nary-struct name
                             2
                             (scope (tpl-pmtr FT-chunk)
                                    'value_type)
                             (fc internal-name
                                 (mfc 'operand1_ 'eval)
                                 (mfc 'operand2_ 'eval))))]
       [build-binary-operator-struct
        (lambda (name internal-name)
          (build-Nary-struct name
                             2
                             (scope (tpl-pmtr FT-chunk)
                                    'value_type)
                             (par (mfc 'operand1_ 'eval)
                                  internal-name
                                  (mfc 'operand2_ 'eval))))]
       [build-unary-function-struct
        (lambda (name internal-name)
          (build-Nary-struct name
                             1
                             (scope (tpl-pmtr FT-chunk)
                                    'value_type)
                             (fc internal-name
                                 (mfc 'operand_ 'eval))))]
       [build-comparison-struct
        (lambda (name internal-name)
          (build-Nary-struct name
                             2
                             'bool
                             (par (mfc 'operand1_ 'eval)
                                  internal-name
                                  (mfc 'operand2_ 'eval))))]
       [build-unary-logical-function-struct
        (lambda (name internal-name)
          (build-Nary-struct name
                             1
                             'bool
                             (fc internal-name
                                 (mfc 'operand_ 'eval))))]
       [build-logical-operator-struct
        (lambda (name internal-name)
          (build-Nary-struct name
                             2
                             'bool
                             (par (mfc 'operand1_ 'eval)
                                  internal-name
                                  (mfc 'operand2_ 'eval))))]
       [if-arg-Scalar (lambda (num)
                        (let ([type (tpl-use NS-chunk 'Initial FT-chunk)]
                              [arg (l 'arg num)])
                          (list 'Scalar
                                null
                                type
                                type
                                (adcr (tpl-pmtr (scope FT-chunk 'value_type))
                                      arg)
                                (fc type arg))))]
       [if-arg-Field (lambda (num)
                       (let ([type (tpl-use NCF-chunk 'Initial FT-chunk)]
                             [arg (l 'arg num)])
                         (list 'Field
                               null
                               (tpl-use NCF-chunk 'Initial (tpl-pmtr (scope (tpl-use 'NeboFieldCheck
                                                                                     (tpl-pmtr (scope FT-chunk 'field_type))
                                                                                     FT-chunk)
                                                                            'Result)))
                               type
                               (adcr FT-chunk arg)
                               (fc type arg))))]
       [if-arg-SubExpr (lambda (num)
                         (let* ([type (l 'SubExpr num)]
                                [input-type (tpl-use NE-chunk type FT-chunk)]
                                [arg (l 'arg num)])
                           (list 'SubExpr
                                 type
                                 type
                                 type
                                 (adcr input-type arg)
                                 (mfc arg 'expr))))]
       [if-arg-Boolean (lambda (num)
                         (let ([type (tpl-use NB-chunk 'Initial FT-chunk)]
                               [arg (l 'arg num)])
                           (list 'Boolean
                                 null
                                 type
                                 type
                                 (adcr 'bool arg)
                                 (fc type arg))))]
       [if-arg-SubBoolExpr (lambda (num)
                             (let* ([type (l 'SubBoolExpr num)]
                                    [input-type (tpl-use NBE-chunk type FT-chunk)]
                                    [arg (l 'arg num)])
                               (list 'SubBoolExpr
                                     type
                                     type
                                     type
                                     (adcr input-type arg)
                                     (mfc arg 'expr))))]
       [build-interface-case
        (lambda (name
                 external-name
                 result-term
                 input-arg-info-lst)
          (let* ([num-lst (let ([number (length input-arg-info-lst)])
                            (cond [(= 0 number) (error "Empty list of arguments to build-interface-case")]
                                  [(= 1 number) (list "")]
                                  [else (map number->string (sequence->list (in-range 1 (+ 1 number))))]))]
                 [arg-info-lst (map (lambda (arg num) (arg num))
                                    input-arg-info-lst
                                    num-lst)]
                 [description-lst (map first arg-info-lst)]
                 [tpl-arg-lst (map second arg-info-lst)]
                 [result-tpl-arg-lst (map third arg-info-lst)]
                 [return-tpl-arg-lst (map fourth arg-info-lst)]
                 [parameter-lst (map fifth arg-info-lst)]
                 [arg-use-lst (map sixth arg-info-lst)])
            (d (c (add-between description-lst (scs 'X)))
               (tpl-def (map tpl-pmtr (flatten* tpl-arg-lst FT-chunk))
                        (r-fcn-def (fcn-dcl external-name
                                            (tpl-use result-term
                                                     (tpl-use name 'Initial result-tpl-arg-lst FT-chunk)
                                                     FT-chunk)
                                            parameter-lst)
                                   (list (typedef (tpl-use name 'Initial return-tpl-arg-lst FT-chunk)
                                                  'ReturnType)
                                         (typedef (tpl-use result-term 'ReturnType FT-chunk)
                                                  'ReturnTerm))
                                   (fc 'ReturnTerm (fc 'ReturnType arg-use-lst)))))))]
       [build-binary-interface
        (lambda (name
                 external-name
                 expression-term
                 if-args)
          (let* ([raw-cross-products (foldl (lambda (arg1 previous)
                                              (append (foldl (lambda (arg2 previous)
                                                               (cons (list arg1 arg2)
                                                                     previous))
                                                             null
                                                             if-args)
                                                      previous))
                                            null
                                            if-args)]
                 ;This removes Scalar X Scalar or Boolean X Boolean
                 [cross-products (rest (reverse raw-cross-products))])
            (bl-smts (map (lambda (args) (build-interface-case name
                                                               external-name
                                                               expression-term
                                                               args))
                          cross-products))))]
       [build-unary-interface
        (lambda (name
                 external-name
                 expression-term
                 if-args)
          (bl-smts (map (lambda (arg) (build-interface-case name
                                                            external-name
                                                            expression-term
                                                            (list arg)))
                        if-args)))]
       [binary-expr-arg-lst (list if-arg-Scalar if-arg-Field if-arg-SubExpr)]
       [unary-expr-arg-lst (list if-arg-Field if-arg-SubExpr)]
       [binary-logical-expr-arg-lst (list if-arg-Boolean if-arg-SubBoolExpr)]
       [unary-logical-expr-arg-lst (list if-arg-SubBoolExpr)]
       [build-binary-function
        (lambda (name internal-name external-name)
          (bl-smts (build-binary-function-struct name internal-name)
                   (build-binary-interface name external-name NE-chunk binary-expr-arg-lst)))]
       [build-binary-operator
        (lambda (name internal-name external-name)
          (bl-smts (build-binary-operator-struct name internal-name)
                   (build-binary-interface name external-name NE-chunk binary-expr-arg-lst)))]
       [build-unary-function
        (lambda (name internal-name external-name)
          (bl-smts (build-unary-function-struct name internal-name)
                   (build-unary-interface name external-name NE-chunk unary-expr-arg-lst)))]
       [build-comparison-operator
        (lambda (name internal-name external-name)
          (bl-smts (build-comparison-struct name internal-name)
                   (build-binary-interface name external-name NBE-chunk binary-expr-arg-lst)))]
       [build-binary-logical-operator
        (lambda (name internal-name external-name)
          (bl-smts (build-logical-operator-struct name internal-name)
                   (build-binary-interface name external-name NBE-chunk binary-logical-expr-arg-lst)))]
       [build-unary-logical-function
        (lambda (name internal-name external-name)
          (bl-smts (build-unary-logical-function-struct name internal-name)
                   (build-unary-interface name external-name NBE-chunk unary-logical-expr-arg-lst)))]
       [build-unary-to-logical-function
        (lambda (name internal-name external-name)
          (bl-smts (build-unary-logical-function-struct name internal-name)
                   (build-unary-interface name external-name NBE-chunk unary-expr-arg-lst)))]
       )
  ; beginnning of file
  (pp-header-file-chunk-with-license
   'SpatialOps_FieldExpressions_h
   (b blank-line-chunk
      (pp-includes-chunk 'spatialops/SpatialOpsConfigure.h
                         'spatialops/structured/IndexTriplet.h
                         'spatialops/structured/GhostData.h
                         'spatialops/structured/SpatialField.h
                         'cmath
                         'math.h)
      (comment-env-chunk (pp-include-chunk 'iostream))
      (threads-only (b new-line-chunk
                       (pp-includes-chunk 'spatialops/SpatialOpsTools.h
                                          'vector
                                          'boost/bind.hpp
                                          'spatialops/ThreadPool.h
                                          'spatialops/structured/IntVec.h
                                          'boost/interprocess/sync/interprocess_semaphore.hpp)
                       (cc (nt= 'namespace 'BI (scope 'boost 'interprocess)))))
      (gpu-only (pp-includes-chunk 'spatialops/structured/MemoryTypes.h)))
   (n 'SpatialOps
      (d "Meta-programming compiler flags"
         (struct-declare-chunk 'All)
         (struct-declare-chunk 'InteriorOnly))
      (let ([CalculateValidGhost
             (lambda (iterator result-type)
               (d iterator
                  (tpl-srt-def 'CalculateValidGhost
                               (list (tpl-pmtr 'ExprType)
                                     (tpl-pmtr FT-chunk))
                               (list iterator 'ExprType FT-chunk)
                               (typedef result-type 'Result))))])
        (list (tpl-srt-dcl 'CalculateValidGhost
                           (list (tpl-pmtr 'IteratorType)
                                 (tpl-pmtr 'ExprType)
                                 (tpl-pmtr FT-chunk))
                           null)
              (CalculateValidGhost
               'All
               (tpl-pmtr (scope (scope 'structured
                                       (tpl-use 'Minimum
                                                (tpl-pmtr (scope 'ExprType
                                                                 report-VG-chunk))
                                                (tpl-pmtr (scope (scope 'structured
                                                                        (tpl-use 'GhostFromField FT-chunk))
                                                                 'result))))
                                'result)))
              (CalculateValidGhost
               'InteriorOnly
               (tpl-pmtr (scope (scope 'structured
                                       (tpl-use 'MinimumGhostFromField FT-chunk))
                                'result)))))
      (tpl-srt-dcl 'NeboFieldCheck
                   (list (tpl-pmtr 'Type1)
                         (tpl-pmtr 'Type2))
                   null)
      (tpl-srt-def 'NeboFieldCheck
                   (tpl-pmtr 'Type)
                   (list 'Type 'Type)
                   (typedef 'Type 'Result))
      (r-fcn-def (fcn-dcl 'nebo_find_partition
                          IntVec
                          (list (adcr IntVec 'extent)
                                (adc 'int 'thread_count)))
                 (list (smt-list-chunk new-line-chunk
                                       (map (lambda (sym) (nt= 'int sym "1"))
                                            (list 'x 'y 'z)))
                       (b new-line-chunk
                          (nifelseif (n<= 'thread_count (l 'extent "[2]"))
                                     (n= 'z 'thread_count)
                                     (n<= 'thread_count (l 'extent "[1]"))
                                     (n= 'y 'thread_count))
                          (nelseif (n<= 'thread_count (l 'extent "[0]"))
                                   (n= 'x 'thread_count))))
                 (fc IntVec 'x 'y 'z))
      (r-fcn-def (fcn-dcl 'nebo_partition_count
                          'int
                          (adcr IntVec 'split))
                 null
                 (n* (l 'split "[0]")
                     (n* (l 'split "[1]")
                         (l 'split "[2]"))))
      (r-fcn-def (fcn-dcl 'nebo_next_partition
                          IntVec
                          (list (adcr IntVec 'current)
                                (adcr IntVec 'split)))
                 (list (bs IntVec 'result)
                       (b new-line-chunk
                          (nifelseif (n< (l 'current "[2]")
                                         (n- (l 'split "[2]")
                                             "1"))
                                     (n= 'result (fc IntVec
                                                     (l 'current "[0]")
                                                     (l 'current "[1]")
                                                     (n+ "1" (l 'current "[2]"))))
                                     (n< (l 'current "[1]")
                                         (n- (l 'split "[1]")
                                             "1"))
                                     (n= 'result (fc IntVec
                                                     (l 'current "[0]")
                                                     (n+ "1" (l 'current "[1]"))
                                                     "0")))
                          (nelse (n= 'result (fc IntVec
                                                 (n+ "1" (l 'current "[0]"))
                                                 "0"
                                                 "0")))))
                 'result)
      (let ([build-expression-type
             (lambda (name)
               (tpl-srt-def name
                            (list (tpl-pmtr 'Operand)
                                  (tpl-pmtr FT-chunk))
                            null
                            (sec-def public-chunk
                                     (typedef FT-chunk 'field_type)
                                     (typedef 'Operand 'Expression)
                                     (constructor-chunk name
                                                        (adcr 'Operand 'given)
                                                        (cons-asgn 'expr_ 'given))
                                     (r-fcn-def (constize (fcn-dcl 'expr
                                                                   (cref 'Operand)))
                                                null
                                                'expr_))
                            (sec-def private-chunk
                                     (bs 'Operand 'expr_))))])
        (list (build-expression-type NE-chunk)
              (build-expression-type NBE-chunk)))
      (let ([build-mode-def (lambda (name) (struct-declare-chunk name))])
        (d 'Modes:
           (build-mode-def 'Initial)
           (threads-only (build-mode-def 'Resize))
           (build-mode-def 'SeqWalk)
           (gpu-only (build-mode-def 'GPUWalk))
           (build-mode-def 'Reduction)))
      (build-struct NS-chunk
                    null
                    null
                    (bs-Initial-rhs (typedef (scope (tpl-pmtr FT-chunk)
                                                    'value_type)
                                             'AtomicType)
                                    null
                                    (scope 'structured 'InfiniteGhostData)
                                    (bm-constructor (adc 'AtomicType 'v)
                                                    (cons-asgn 'value_ 'v)
                                                    null)
                                    'value_
                                    'value_
                                    'true
                                    'value_
                                    'value_
                                    null
                                    (adc 'AtomicType 'value_))
                    (bs-Resize-rhs (typedef (scope (tpl-pmtr FT-chunk)
                                                   'value_type)
                                            'AtomicType)
                                   null
                                   (bm-constructor (adc 'AtomicType 'value)
                                                   (cons-asgn 'value_ 'value)
                                                   null)
                                   'value_
                                   null
                                   (adc 'AtomicType 'value_))
                    (bs-SeqWalk-rhs (typedef (scope (tpl-pmtr FT-chunk)
                                                    'value_type)
                                             'AtomicType)
                                    (bm-constructor (adc 'AtomicType 'value)
                                                    (cons-asgn 'value_ 'value)
                                                    null)
                                    null
                                    'AtomicType
                                    'value_
                                    null
                                    (adc 'AtomicType 'value_))
                    (bs-GPU-rhs null
                                (bm-constructor (adc 'AtomicType 'value)
                                                (cons-asgn 'value_ 'value)
                                                null)
                                null
                                null
                                'value_
                                null
                                (adc 'AtomicType 'value_))
                    (bs-Reduction (typedef (scope (tpl-pmtr FT-chunk)
                                                  'value_type)
                                           'AtomicType)
                                  (bm-constructor (adc 'AtomicType 'value)
                                                  (cons-asgn 'value_ 'value)
                                                  null)
                                  null
                                  'false
                                  'false
                                  'AtomicType
                                  'value_
                                  null
                                  (adc 'AtomicType 'value_)))
      (build-struct NB-chunk
                    null
                    null
                    (bs-Initial-rhs null
                                    null
                                    (scope 'structured 'InfiniteGhostData)
                                    (bm-constructor (adc 'bool 'v)
                                                    (cons-asgn 'value_ 'v)
                                                    null)
                                    'value_
                                    'value_
                                    'true
                                    'value_
                                    'value_
                                    null
                                    (adc 'bool 'value_))
                    (bs-Resize-rhs null
                                   null
                                   (bm-constructor (adc 'bool 'value)
                                                   (cons-asgn 'value_ 'value)
                                                   null)
                                   'value_
                                   null
                                   (adc 'bool 'value_))
                    (bs-SeqWalk-rhs null
                                    (bm-constructor (adc 'bool 'value)
                                                    (cons-asgn 'value_ 'value)
                                                    null)
                                    null
                                    'bool
                                    'value_
                                    null
                                    (adc 'bool 'value_))
                    (bs-GPU-rhs null
                                (bm-constructor (adc 'bool 'value)
                                                (cons-asgn 'value_ 'value)
                                                null)
                                null
                                null
                                'value_
                                null
                                (adc 'bool 'value_))
                    (bs-Reduction null
                                  (bm-constructor (adc 'bool 'value)
                                                  (cons-asgn 'value_ 'value)
                                                  null)
                                  null
                                  'false
                                  'false
                                  'bool
                                  'value_
                                  null
                                  (adc 'bool 'value_)))
      (build-struct NCF-chunk
                    null
                    null
                    (bs-Initial-rhs null
                                    null
                                    (tpl-pmtr (scope (scope 'structured (tpl-use 'GhostFromField FT-chunk))
                                                     'result))
                                    (bm-constructor (adcr FT-chunk 'f)
                                                    (cons-asgn 'field_ 'f)
                                                    null)
                                    (mfc 'field_ (tpl-fcn-use 'resize_ghost_and_shift VG-chunk SH-chunk))
                                    (mfc 'field_ (tpl-fcn-use 'resize_ghost VG-chunk))
                                    (mfc 'field_ 'find_consumer DI-chunk)
                                    (list DI-chunk
                                          (mfc 'field_ (tpl-fcn-use 'resize_ghost_and_shift VG-chunk SH-chunk)))
                                    (mfc 'field_ (tpl-fcn-use 'resize_ghost_and_shift VG-chunk SH-chunk))
                                    null
                                    (adc FT-chunk 'field_))
                    (bs-Resize-rhs null
                                   null
                                   (bm-constructor (adcr FT-chunk 'f)
                                                   (cons-asgn 'field_ 'f)
                                                   null)
                                   (mfc (fc FT-chunk
                                            (mfc (mfc 'field_ 'window_with_ghost)
                                                 'refine
                                                 'split
                                                 'location)
                                            (mfc 'field_ 'field_values)
                                            (scope 'structured 'ExternalStorage))
                                        (tpl-fcn-use 'shift SH-chunk))
                                   null
                                   (adc FT-chunk 'field_))
                    (bs-SeqWalk-rhs (typedef (scope (tpl-pmtr FT-chunk)
                                                    'value_type)
                                             'AtomicType)
                                    (bm-constructor (adcr FT-chunk 'f)
                                                    (cons-asgn 'iter_ (mfc 'f 'begin))
                                                    null)
                                    (n++ 'iter_)
                                    'AtomicType
                                    (l '* 'iter_)
                                    null
                                    (ad (tpl-pmtr (scope FT-chunk 'const_iterator))
                                        'iter_))
                    (bs-GPU-rhs null
                                (bm-constructor
                                 (list (adc 'int DI-chunk)
                                       (adcr FT-chunk 'f))
                                 (list (cons-asgn 'current_ (n+ (mfc 'f 'field_values 'EXTERNAL_CUDA_GPU DI-chunk)
                                                                (n+ (mfc (mfc 'f 'window_with_ghost)
                                                                         'offset
                                                                         "0")
                                                                    (n* (mfc (mfc 'f 'window_with_ghost)
                                                                             'glob_dim
                                                                             "0")
                                                                        (par (n+ (mfc (mfc 'f 'window_with_ghost)
                                                                                      'offset
                                                                                      "1")
                                                                                 (par (n* (mfc (mfc 'f 'window_with_ghost)
                                                                                               'glob_dim
                                                                                               "1")
                                                                                          (mfc (mfc 'f 'window_with_ghost)
                                                                                               'offset
                                                                                               "2")))))))))
                                       (cons-asgn 'xLength_ (mfc (mfc 'f
                                                                      'window_with_ghost)
                                                                 'glob_dim
                                                                 "0"))
                                       (cons-asgn 'step_ (n* 'xLength_ (mfc (mfc 'f
                                                                                 'window_with_ghost)
                                                                            'glob_dim
                                                                            "1"))))
                                 null)
                                (n+= 'current_ (n+ 'x (n* 'y 'xLength_)))
                                (n+= 'current_ 'step_)
                                (l '* 'current_)
                                null
                                (list (adcp 'AtomicType 'current_)
                                      (adc 'int 'xLength_)
                                      (adc 'int 'step_)))
                    (bs-Reduction (typedef (scope (tpl-pmtr FT-chunk)
                                                  'value_type)
                                           'AtomicType)
                                  (bm-constructor (adcr FT-chunk 'f)
                                                  (list (cons-asgn 'iter_ (mfc 'f 'begin))
                                                        (cons-asgn 'end_ (mfc 'f 'end)))
                                                  null)
                                  (n++ 'iter_)
                                  (n== 'iter_ 'end_)
                                  'true
                                  'AtomicType
                                  (l '* 'iter_)
                                  null
                                  (list (ad (tpl-pmtr (scope FT-chunk 'const_iterator))
                                            'iter_)
                                        (adc (tpl-pmtr (scope FT-chunk 'const_iterator))
                                             'end_))))
      (build-struct NF-chunk
                    null
                    null
                    (let ([typedef-Ghost (typedef (tpl-pmtr (scope (tpl-use 'CalculateValidGhost
                                                                            'Iterator
                                                                            'RhsType
                                                                            FT-chunk)
                                                                   'Result))
                                                  VG-chunk)])
                      (bs-Initial-lhs null
                                      null
                                      (tpl-pmtr (scope (scope 'structured
                                                              (tpl-use 'GhostFromField FT-chunk))
                                                       'result))
                                      (bm-constructor (ad FT-chunk 'f)
                                                      (cons-asgn 'field_ 'f)
                                                      null)
                                      null
                                      (list typedef-Ghost
                                            (mfc (fc (tpl-use 'init VG-chunk SH-chunk))
                                                 'assign
                                                 (mfc 'rhs (tpl-fcn-use 'init VG-chunk SH-chunk))))
                                      (mfc 'field_ (tpl-fcn-use 'resize_ghost_and_shift_and_maintain_interior VG-chunk SH-chunk))
                                      (list typedef-Ghost
                                            (typedef (tpl-pmtr (scope 'RhsType 'ResizeType))
                                                     'RhsResizeType)
                                            (nt=c IntVec 'split (fc 'nebo_find_partition
                                                                    (mfc (mfc (mfc 'field_
                                                                                   (tpl-fcn-use 'resize_ghost VG-chunk))
                                                                              'window_with_ghost)
                                                                         'extent)
                                                                    'thread_count))
                                            (nt=c 'int 'max (fc 'nebo_partition_count 'split))
                                            (nt= 'ResizeType 'new_lhs (fc (tpl-use 'resize VG-chunk)))
                                            (nt= 'RhsResizeType 'new_rhs (mfc 'rhs (tpl-fcn-use 'resize VG-chunk)))
                                            (nt= IntVec 'location (fc IntVec "0" "0" "0"))
                                            (nfor (nt= 'int 'count "0")
                                                  (n< 'count 'max)
                                                  (n++ 'count)
                                                  (mfc (fc (scope 'ThreadPoolFIFO 'self))
                                                       'schedule
                                                       (fc (scope 'boost 'bind)
                                                           (c (ref) (scope 'ResizeType (tpl-fcn-use 'assign 'RhsResizeType)))
                                                           'new_lhs
                                                           'new_rhs
                                                           'split
                                                           'location
                                                           (c (ref) 'semaphore)))
                                                  (n= 'location (fc 'nebo_next_partition 'location 'split))))
                                      (mfc 'field_ (tpl-fcn-use 'resize_ghost_and_maintain_interior VG-chunk))
                                      (let ([extent-def (lambda (num)
                                                          (nt= 'int
                                                               (l 'extent num)
                                                               (mfc (mfc 'field_ 'window_with_ghost)
                                                                    'extent
                                                                    num)))]
                                            [dim-def (lambda (name extent)
                                                       (nt= 'int name (n+ (n/ extent 'blockDim)
                                                                          (ter-cond (n> (par (n% extent 'blockDim))
                                                                                        "0")
                                                                                    "1"
                                                                                    "0"))))])
                                        (list typedef-Ghost
                                              (typedef (tpl-pmtr (scope 'RhsType 'GPUWalkType))
                                                       'RhsGPUWalkType)
                                              (extent-def "0")
                                              (extent-def "1")
                                              (nt= 'int 'blockDim "16")
                                              (dim-def 'gDimX 'extent0)
                                              (dim-def 'gDimY 'extent1)
                                              (bs 'dim3 (fc 'dimBlock 'blockDim 'blockDim))
                                              (bs 'dim3 (fc 'dimGrid 'gDimX 'gDimY))
                                              (mfc (fc (tpl-use 'gpu_init VG-chunk SH-chunk))
                                                   (fc (kernel-use (tpl-use 'gpu_assign_kernel 'GPUWalkType 'RhsGPUWalkType)
                                                                   'dimGrid
                                                                   'dimBlock)
                                                       (mfc 'rhs
                                                            (tpl-fcn-use 'gpu_init VG-chunk SH-chunk)
                                                            (fc 'gpu_device_index))))))
                                      (n== (mfc 'field_
                                                'memory_device_type)
                                           'EXTERNAL_CUDA_GPU)
                                      (mfc 'field_ 'device_index)
                                      (mfc 'field_ (tpl-fcn-use 'resize_ghost_and_shift_and_maintain_interior VG-chunk SH-chunk))
                                      (ad FT-chunk 'field_)))
                    (bs-Resize-lhs null
                                   null
                                   (bm-constructor (ad FT-chunk 'f)
                                                   (cons-asgn 'field_ 'f)
                                                   null)
                                   (mfc (fc (tpl-use 'init SH-chunk)
                                            'split
                                            'location)
                                        'assign
                                        (mfc 'rhs
                                             (tpl-fcn-use 'init SH-chunk)
                                             'split
                                             'location))
                                   null
                                   (mfc (fc FT-chunk
                                            (mfc (mfc 'field_ 'window_with_ghost)
                                                 'refine
                                                 'split
                                                 'location)
                                            (mfc 'field_ 'field_values)
                                            (scope 'structured 'ExternalStorage))
                                        (tpl-fcn-use 'shift_and_maintain_interior SH-chunk))
                                   (ad FT-chunk 'field_))
                    (bs-SeqWalk-lhs (typedef (scope (tpl-pmtr FT-chunk)
                                                    'value_type)
                                             'AtomicType)
                                    (bm-constructor (ad FT-chunk 'f)
                                                    (list (cons-asgn 'iter_ (mfc 'f 'begin))
                                                          (cons-asgn 'end_ (mfc 'f 'end)))
                                                    null)
                                    (nwhile (c '! (fc 'at_end))
                                            (n= (fc 'ref)
                                                (mfc 'rhs 'eval))
                                            (fc 'next)
                                            (mfc 'rhs 'next))
                                    null
                                    (n++ 'iter_)
                                    (n== 'iter_ 'end_)
                                    'true
                                    (l '* 'iter_)
                                    (list (ad (tpl-pmtr (scope FT-chunk 'iterator))
                                              'iter_)
                                          (adc (tpl-pmtr (scope FT-chunk 'iterator))
                                               'end_)))
                    (bs-GPU-lhs  null
                                 (bm-constructor
                                  (ad FT-chunk 'f)
                                  (list (cons-asgn 'current_ (bs (n+ (mfc 'f 'field_values 'EXTERNAL_CUDA_GPU (mfc 'f 'device_index))
                                                                     (n+ (mfc (mfc 'f 'window_with_ghost)
                                                                              'offset
                                                                              "0")
                                                                         (n* (mfc (mfc 'f 'window_with_ghost)
                                                                                  'glob_dim
                                                                                  "0")
                                                                             (par (n+ (mfc (mfc 'f 'window_with_ghost)
                                                                                           'offset
                                                                                           "1")
                                                                                      (par (n* (mfc (mfc 'f 'window_with_ghost)
                                                                                                    'glob_dim
                                                                                                    "1")
                                                                                               (mfc (mfc 'f 'window_with_ghost)
                                                                                                    'offset
                                                                                                    "2"))))))))))
                                        (cons-asgn 'location_ "0")
                                        (cons-asgn 'valid_ 'false)
                                        (cons-asgn 'xLength_ (mfc (mfc 'f 'window_with_ghost)
                                                                  'glob_dim
                                                                  "0"))
                                        (cons-asgn 'xExtent_ (mfc (mfc 'f 'window_with_ghost)
                                                                  'extent
                                                                  "0"))
                                        (cons-asgn 'yExtent_ (mfc (mfc 'f 'window_with_ghost)
                                                                  'extent
                                                                  "1"))
                                        (cons-asgn 'zExtent_ (mfc (mfc 'f 'window_with_ghost)
                                                                  'extent
                                                                  "2"))
                                        (cons-asgn 'step_ (n* 'xLength_ (mfc (mfc 'f 'window_with_ghost)
                                                                             'glob_dim
                                                                             "1"))))
                                  null)
                                 (nwhile (c '! (fc 'at_end))
                                         (n= (fc 'ref)
                                             (mfc 'rhs 'eval))
                                         (fc 'next)
                                         (mfc 'rhs 'next))
                                 null
                                 'valid_
                                 (list (n= 'valid_ (par (n-and (n< 'x 'xExtent_)
                                                               (n>= 'x "0")
                                                               (n< 'y 'yExtent_)
                                                               (n>= 'y "0"))))
                                       (nif (fc 'valid)
                                            (n= 'location_ "0")
                                            (n+= 'current_ (n+ 'x (n* 'y 'xLength_)))))
                                 (list (n+= 'current_ 'step_)
                                       (n++ 'location_))
                                 (n>= 'location_ 'zExtent_)
                                 (l '* 'current_)
                                 (list (adp 'AtomicType 'current_)
                                       (ad 'int 'location_)
                                       (ad 'int 'valid_)
                                       (adc 'int 'xLength_)
                                       (adc 'int 'xExtent_)
                                       (adc 'int 'yExtent_)
                                       (adc 'int 'zExtent_)
                                       (adc 'int 'step_)))
                    ignore)
      (build-binary-operator 'SumOp '+ (bs 'operator '+))
      (build-binary-operator 'DiffOp '- (bs 'operator '-))
      (build-binary-operator 'ProdOp '* (bs 'operator '*))
      (build-binary-operator 'DivOp '/ (bs 'operator '/))
      (build-unary-function 'SinFcn
                            (scope 'std 'sin)
                            'sin)
      (build-unary-function 'CosFcn
                            (scope 'std 'cos)
                            'cos)
      (build-unary-function 'TanFcn
                            (scope 'std 'tan)
                            'tan)
      (build-unary-function 'ExpFcn
                            (scope 'std 'exp)
                            'exp)
      (build-unary-function 'TanhFcn
                            (scope 'std 'tanh)
                            'tanh)
      (build-unary-function 'AbsFcn
                            (scope 'std 'abs)
                            'abs)
      (build-unary-function 'NegFcn '- (bs 'operator '-))
      (build-binary-function 'PowFcn
                             (scope 'std 'pow)
                             'pow)
      (build-unary-function 'SqrtFcn
                            (scope 'std 'sqrt)
                            'sqrt)
      (build-unary-function 'LogFcn
                            (scope 'std 'log)
                            'log)
      (build-comparison-operator 'EqualCmp '== (bs 'operator '==))
      (build-comparison-operator 'InequalCmp '!= (bs 'operator '!=))
      (build-comparison-operator 'LessThanCmp '< (bs 'operator '<))
      (build-comparison-operator 'LessThanEqualCmp '<= (bs 'operator '<=))
      (build-comparison-operator 'GreaterThanCmp '> (bs 'operator '>))
      (build-comparison-operator 'GreaterThanEqualCmp '>= (bs 'operator '>=))
      (build-binary-logical-operator 'AndOp '&& (bs 'operator '&&))
      (build-binary-logical-operator 'OrOp "||" (bs 'operator "||"))
      (build-unary-logical-function 'NotOp '! (bs 'operator '!))
; commented out isnan because nvcc has some weird problem with it
;      (build-unary-to-logical-function 'IsNanFcn
;                                       (scope 'std 'isnan)
;                                       'isnan)
      (srt-def (srt-dcl Nil-chunk)
               (threads-only (typedef Nil-chunk 'ResizeType))
               (typedef Nil-chunk 'SeqWalkType)
               (gpu-only (typedef Nil-chunk 'GPUWalkType))
               (typedef Nil-chunk 'ReductionType)
               (typedef (scope 'structured 'InfiniteGhostData) report-VG-chunk)
               (constructor-chunk Nil-chunk
                                  null
                                  null))
      (build-struct Clause-chunk
                    null
                    (list 'Test 'Expr)
                    (bs-Initial-rhs null
                                    null
                                    (tpl-pmtr (scope (scope 'structured
                                                            (tpl-use 'Minimum 
                                                                     (tpl-pmtr (scope 'Test report-VG-chunk))
                                                                     (tpl-pmtr (scope 'Expr report-VG-chunk))))
                                                     'result))
                                    (bm-constructor (list (adcr 'Test 't)
                                                          (adcr 'Expr 'e))
                                                    (list (cons-asgn 'test_ 't)
                                                          (cons-asgn 'expr_ 'e))
                                                    null)
                                    (list (mfc 'test_ (tpl-fcn-use 'init VG-chunk SH-chunk))
                                          (mfc 'expr_ (tpl-fcn-use 'init VG-chunk SH-chunk)))
                                    (list (mfc 'test_ (tpl-fcn-use 'resize VG-chunk))
                                          (mfc 'expr_ (tpl-fcn-use 'resize VG-chunk)))
                                    (n-and (mfc 'test_ 'gpu_ready DI-chunk)
                                           (mfc 'expr_ 'gpu_ready DI-chunk))
                                    (list (mfc 'test_
                                               (tpl-fcn-use 'gpu_init VG-chunk SH-chunk)
                                               DI-chunk)
                                          (mfc 'expr_
                                               (tpl-fcn-use 'gpu_init VG-chunk SH-chunk)
                                               DI-chunk))
                                    (list (mfc 'test_ (tpl-fcn-use 'reduce_init VG-chunk SH-chunk))
                                          (mfc 'expr_ (tpl-fcn-use 'reduce_init VG-chunk SH-chunk)))
                                    null
                                    (list (adc 'Test 'test_)
                                          (adc 'Expr 'expr_)))
                    (bs-Resize-rhs null
                                   null
                                   (bm-constructor (list (adcr 'Test 'test)
                                                         (adcr 'Expr 'expr))
                                                   (list (cons-asgn 'test_ 'test)
                                                         (cons-asgn 'expr_ 'expr))
                                                   null)
                                   (list (mfc 'test_
                                              (tpl-fcn-use 'init SH-chunk)
                                              'split
                                              'location)
                                         (mfc 'expr_
                                              (tpl-fcn-use 'init SH-chunk)
                                              'split
                                              'location))
                                   null
                                   (list (adc 'Test 'test_)
                                         (adc 'Expr 'expr_)))
                    (bs-SeqWalk-rhs (typedef (scope (tpl-pmtr FT-chunk)
                                                    'value_type)
                                             'AtomicType)
                                    (bm-constructor (list (adcr 'Test 'test)
                                                          (adcr 'Expr 'expr))
                                                    (list (cons-asgn 'test_ 'test)
                                                          (cons-asgn 'expr_ 'expr))
                                                    null)
                                    (ccs (mfc 'test_ 'next)
                                         (mfc 'expr_ 'next))
                                    'AtomicType
                                    (mfc 'expr_ 'eval)
                                    (r-fcn-def (constize (fcn-dcl 'check (tc 'bool)))
                                               null
                                               (mfc 'test_ 'eval))
                                    (list (ad 'Test 'test_)
                                          (ad 'Expr 'expr_)))
                    (bs-GPU-rhs null
                                (bm-constructor (list (adcr 'Test 'test)
                                                      (adcr 'Expr 'expr))
                                                (list (cons-asgn 'test_ 'test)
                                                      (cons-asgn 'expr_ 'expr))
                                                null)
                                (ccs (mfc 'test_ 'start 'x 'y)
                                     (mfc 'expr_ 'start 'x 'y))
                                (ccs (mfc 'test_ 'next)
                                     (mfc 'expr_ 'next))
                                (mfc 'expr_ 'eval)
                                (r-fcn-def (constize (fcn-dcl 'check (tc 'bool)))
                                           null
                                           (mfc 'test_ 'eval))
                                (list (ad 'Test 'test_)
                                      (ad 'Expr 'expr_)))
                    (bs-Reduction (typedef (scope (tpl-pmtr FT-chunk)
                                                  'value_type)
                                           'AtomicType)
                                  (bm-constructor (list (adcr 'Test 'test)
                                                        (adcr 'Expr 'expr))
                                                  (list (cons-asgn 'test_ 'test)
                                                        (cons-asgn 'expr_ 'expr))
                                                  null)
                                  (ccs (mfc 'test_ 'next)
                                       (mfc 'expr_ 'next))
                                  (par (n-or (mfc 'test_ 'at_end)
                                             (mfc 'expr_ 'at_end)))
                                  (par (n-or (mfc 'test_ 'has_length)
                                             (mfc 'expr_ 'has_length)))
                                  'AtomicType
                                  (mfc 'expr_ 'eval)
                                  (r-fcn-def (constize (fcn-dcl 'check (tc 'bool)))
                                             null
                                             (mfc 'test_ 'eval))
                                  (list (ad 'Test 'test_)
                                        (ad 'Expr 'expr_))))
      (build-struct Cond-chunk
                    null
                    (list CT-chunk 'Otherwise)
                    (bs-Initial-rhs null
                                    null
                                    (tpl-pmtr (scope (scope 'structured (tpl-use 'Minimum
                                                                                 (tpl-pmtr (scope CT-chunk report-VG-chunk))
                                                                                 (tpl-pmtr (scope 'Otherwise report-VG-chunk))))
                                                     'result))
                                    (bm-constructor (list (adcr CT-chunk 'c)
                                                          (adcr 'Otherwise 'e))
                                                    (list (cons-asgn 'clause_ 'c)
                                                          (cons-asgn 'otherwise_ 'e))
                                                    null)
                                    (list (mfc 'clause_ (tpl-fcn-use 'init VG-chunk SH-chunk))
                                          (mfc 'otherwise_ (tpl-fcn-use 'init VG-chunk SH-chunk)))
                                    (list (mfc 'clause_ (tpl-fcn-use 'resize VG-chunk))
                                          (mfc 'otherwise_ (tpl-fcn-use 'resize VG-chunk)))
                                    (n-and (mfc 'clause_ 'gpu_ready DI-chunk)
                                           (mfc 'otherwise_ 'gpu_ready DI-chunk))
                                    (list (mfc 'clause_
                                               (tpl-fcn-use 'gpu_init VG-chunk SH-chunk)
                                               DI-chunk)
                                          (mfc 'otherwise_
                                               (tpl-fcn-use 'gpu_init VG-chunk SH-chunk)
                                               DI-chunk))
                                    (list (mfc 'clause_ (tpl-fcn-use 'reduce_init VG-chunk SH-chunk))
                                          (mfc 'otherwise_ (tpl-fcn-use 'reduce_init VG-chunk SH-chunk)))
                                    (list (r-fcn-def (constize (fcn-dcl 'clause (cref CT-chunk)))
                                                     null
                                                     'clause_)
                                          (r-fcn-def (constize (fcn-dcl 'otherwise (cref 'Otherwise)))
                                                     null
                                                     'otherwise_))
                                    (list (adc CT-chunk 'clause_)
                                          (adc 'Otherwise 'otherwise_)))
                    (bs-Resize-rhs null
                                   null
                                   (bm-constructor (list (adcr CT-chunk 'clause)
                                                         (adcr 'Otherwise 'otherwise))
                                                   (list (cons-asgn 'clause_ 'clause)
                                                         (cons-asgn 'otherwise_ 'otherwise))
                                                   null)
                                   (list (mfc 'clause_
                                              (tpl-fcn-use 'init SH-chunk)
                                              'split
                                              'location)
                                         (mfc 'otherwise_
                                              (tpl-fcn-use 'init SH-chunk)
                                              'split
                                              'location))
                                   null
                                   (list (adc CT-chunk 'clause_)
                                         (adc 'Otherwise 'otherwise_)))
                    (bs-SeqWalk-rhs (typedef (scope (tpl-pmtr FT-chunk)
                                                    'value_type)
                                             'AtomicType)
                                    (bm-constructor (list (adcr CT-chunk 'clause)
                                                          (adcr 'Otherwise 'otherwise))
                                                    (list (cons-asgn 'clause_ 'clause)
                                                          (cons-asgn 'otherwise_ 'otherwise))
                                                    null)
                                    (ccs (mfc 'clause_ 'next)
                                         (mfc 'otherwise_ 'next))
                                    'AtomicType
                                    (ter-cond (mfc 'clause_ 'check)
                                              (mfc 'clause_ 'eval)
                                              (mfc 'otherwise_ 'eval))
                                    null
                                    (list (ad CT-chunk 'clause_)
                                          (ad 'Otherwise 'otherwise_)))
                    (bs-GPU-rhs null
                                (bm-constructor (list (adcr CT-chunk 'clause)
                                                      (adcr 'Otherwise 'otherwise))
                                                (list (cons-asgn 'clause_ 'clause)
                                                      (cons-asgn 'otherwise_ 'otherwise))
                                                null)
                                (ccs (mfc 'clause_ 'start 'x 'y)
                                     (mfc 'otherwise_ 'start 'x 'y))
                                (ccs (mfc 'clause_ 'next)
                                     (mfc 'otherwise_ 'next))
                                (ter-cond (mfc 'clause_ 'check)
                                          (mfc 'clause_ 'eval)
                                          (mfc 'otherwise_ 'eval))
                                null
                                (list (ad CT-chunk 'clause_)
                                      (ad 'Otherwise 'otherwise_)))
                    (bs-Reduction (typedef (scope (tpl-pmtr FT-chunk)
                                                  'value_type)
                                           'AtomicType)
                                  (bm-constructor (list (adcr CT-chunk 'clause)
                                                        (adcr 'Otherwise 'otherwise))
                                                  (list (cons-asgn 'clause_ 'clause)
                                                        (cons-asgn 'otherwise_ 'otherwise))
                                                  null)
                                  (ccs (mfc 'clause_ 'next)
                                       (mfc 'otherwise_ 'next))
                                  (par (n-or (mfc 'clause_ 'at_end)
                                             (mfc 'otherwise_ 'at_end)))
                                  (par (n-or (mfc 'clause_ 'has_length)
                                             (mfc 'otherwise_ 'has_length)))
                                  'AtomicType
                                  (ter-cond (mfc 'clause_ 'check)
                                            (mfc 'clause_ 'eval)
                                            (mfc 'otherwise_ 'eval))
                                  null
                                  (list (ad CT-chunk 'clause_)
                                        (ad 'Otherwise 'otherwise_))))
      (srt-def (srt-dcl SClause-chunk)
               (sec-def public-chunk
                        (constructor-chunk SClause-chunk
                                           (list (adcr 'bool 'b)
                                                 (adcr 'double 'd))
                                           (list (cons-asgn 'b_ 'b)
                                                 (cons-asgn 'd_ 'd)))
                        (r-fcn-def (constize (fcn-dcl 'check
                                                      'bool))
                                   null
                                   'b_)
                        (r-fcn-def (constize (fcn-dcl 'eval
                                                      'double))
                                   null
                                   'd_)
                        (tpl-srt-def 'Convert
                                     (tpl-pmtr FT-chunk)
                                     null
                                     (typedef (tpl-use NB-chunk 'Initial FT-chunk)
                                              'Boolean)
                                     (typedef (tpl-use NS-chunk 'Initial FT-chunk)
                                              'Scalar)
                                     (typedef (tpl-use Clause-chunk 'Initial 'Boolean 'Scalar FT-chunk)
                                              'Converted)
                                     (r-fcn-def (s-fcn-dcl 'convert
                                                           'Converted
                                                           (list (adc 'bool 'b)
                                                                 (adc 'double 'd)))
                                                null
                                                (fc 'Converted
                                                    (fc 'Boolean 'b)
                                                    (fc 'Scalar 'd)))))
               (sec-def private-chunk
                        (adc 'bool 'b_)
                        (adc 'double 'd_)))
      (srt-def (srt-dcl SFClause-chunk)
               (sec-def public-chunk
                        (constructor-chunk SFClause-chunk
                                           (adc 'double 'd)
                                           (cons-asgn 'd_ 'd))
                        (r-fcn-def (constize (fcn-dcl 'eval
                                                      'double))
                                   null
                                   'd_))
               (sec-def private-chunk
                        (adc 'double 'd_)))
      (tpl-srt-def SCond-chunk
                   (tpl-pmtr 'Otherwise)
                   null
                   (sec-def public-chunk
                            (constructor-chunk SCond-chunk
                                               (list (adcr SClause-chunk 'c)
                                                     (adcr 'Otherwise 'otherwise))
                                               (list (cons-asgn 'c_ 'c)
                                                     (cons-asgn 'otherwise_ 'otherwise)))
                            (r-fcn-def (constize (fcn-dcl 'eval
                                                          'double
                                                          null))
                                       null
                                       (ter-cond (mfc 'c_ 'check)
                                                 (mfc 'c_ 'eval)
                                                 (mfc 'otherwise_ 'eval)))
                            (tpl-srt-def 'Convert
                                         (tpl-pmtr FT-chunk)
                                         null
                                         (typedef (scope SClause-chunk
                                                         (tpl-fcn-use 'Convert FT-chunk))
                                                  'ConvertingClause)
                                         (typedef (tpl-pmtr (scope 'ConvertingClause
                                                                   'Converted))
                                                  'ConvertedClause)
                                         (typedef (tpl-pmtr (scope 'Otherwise
                                                                   (tpl-fcn-use 'Convert FT-chunk)))
                                                  'ConvertingClauses)
                                         (typedef (tpl-pmtr (scope 'ConvertingClauses 'Converted))
                                                  'ConvertedClauses)
                                         (typedef (tpl-use Cond-chunk 'Initial 'ConvertedClause 'ConvertedClauses FT-chunk)
                                                  'Converted)
                                         (r-fcn-def (s-fcn-dcl 'convert
                                                               'Converted
                                                               (list (adcr SClause-chunk 'c)
                                                                     (adcr 'Otherwise 'o)))
                                                    null
                                                    (fc 'Converted
                                                        (fc (scope 'ConvertingClause 'convert)
                                                            (mfc 'c 'check)
                                                            (mfc 'c 'eval))
                                                        (mfc 'o (tpl-fcn-use 'convert FT-chunk)))))
                            (tpl-def (tpl-pmtr FT-chunk)
                                     (r-fcn-def (constize (fcn-dcl 'convert
                                                                   (tpl-pmtr (scope (tpl-use 'Convert FT-chunk)
                                                                                    'Converted))))
                                                (typedef (tpl-use 'Convert FT-chunk)
                                                         'Convert)
                                                (fc (scope 'Convert 'convert)
                                                    (fc 'clause)
                                                    (fc 'otherwise))))
                            (r-fcn-def (constize (fcn-dcl 'clause (cref SClause-chunk)))
                                       null
                                       'c_)
                            (r-fcn-def (constize (fcn-dcl 'otherwise (cref 'Otherwise)))
                                       null
                                       'otherwise_))
                   (sec-def private-chunk
                            (adc SClause-chunk 'c_)
                            (adc 'Otherwise 'otherwise_)))
      (tpl-srt-def SCond-chunk
                   null
                   Nil-chunk
                   (sec-def public-chunk
                            (constructor-chunk SCond-chunk
                                               (list (adcr SClause-chunk 'c)
                                                     (adcr Nil-chunk 'nil))
                                               (cons-asgn 'c_ 'c))
                            (tpl-srt-def 'Convert
                                         (tpl-pmtr FT-chunk)
                                         null
                                         (typedef (scope SClause-chunk
                                                         (tpl-fcn-use 'Convert FT-chunk))
                                                  'ConvertingClause)
                                         (typedef (tpl-pmtr (scope 'ConvertingClause 'Converted))
                                                  'ConvertedClause)
                                         (typedef Nil-chunk
                                                  'ConvertedClauses)
                                         (typedef (tpl-use Cond-chunk
                                                           'Initial
                                                           'ConvertedClause
                                                           'ConvertedClauses
                                                           FT-chunk)
                                                  'Converted)
                                         (r-fcn-def (s-fcn-dcl 'convert
                                                               'Converted
                                                               (adcr SClause-chunk 'c))
                                                    null
                                                    (fc 'Converted
                                                        (fc (scope 'ConvertingClause 'convert)
                                                            (mfc 'c 'check)
                                                            (mfc 'c 'eval))
                                                        (fc Nil-chunk))))
                            (tpl-def (tpl-pmtr FT-chunk)
                                     (r-fcn-def (constize (fcn-dcl 'convert
                                                                   (tpl-pmtr (scope (tpl-use 'Convert FT-chunk)
                                                                                    'Converted))))
                                                (typedef (tpl-use 'Convert FT-chunk)
                                                         'Convert)
                                                (fc (scope 'Convert 'convert)
                                                    (fc 'clause))))
                            (r-fcn-def (constize (fcn-dcl 'clause (cref SClause-chunk)))
                                       null
                                       'c_)
                            (r-fcn-def (constize (fcn-dcl 'otherwise Nil-chunk))
                                       null
                                       (fc Nil-chunk)))
                   (sec-def private-chunk
                            (adc SClause-chunk 'c_)))
      ;CondBuilder
      (let* ([build-CondBuilder-private
              (lambda (extra-tpl-pmtrs
                       remaining-type
                       new-result-type
                       private)
                (sec-def private-chunk
                         (tpl-srt-dcl 'ReverseClausesRecursive
                                      (list (tpl-pmtr 'Remaining)
                                            (tpl-pmtr 'PreceedingResult)))
                         (tpl-srt-def 'ReverseClausesRecursive
                                      (tpl-pmtr 'PreceedingResult)
                                      (list Nil-chunk 'PreceedingResult)
                                      (typedef 'PreceedingResult
                                               'Result)
                                      (r-fcn-def (s-fcn-dcl 'reverse
                                                            'Result
                                                            (adcr Nil-chunk 'nil)
                                                            (adcr 'PreceedingResult 'r))
                                                 null
                                                 'r))
                         (tpl-srt-def 'ReverseClausesRecursive
                                      (list extra-tpl-pmtrs
                                            (tpl-pmtr 'Following)
                                            (tpl-pmtr 'PreceedingResult))
                                      (list remaining-type
                                            'PreceedingResult)
                                      (typedef remaining-type
                                               'Remaining)
                                      (typedef new-result-type
                                               'NewResult)
                                      (typedef (tpl-use 'ReverseClausesRecursive 'Following 'NewResult)
                                               'InternalCall)
                                      (typedef (tpl-pmtr (scope 'InternalCall 'Result))
                                               'Result)
                                      (r-fcn-def (s-fcn-dcl 'reverse
                                                            'Result
                                                            (adcr 'Remaining 'l)
                                                            (adcr 'PreceedingResult 'r))
                                                 null
                                                 (fc (scope 'InternalCall 'reverse)
                                                     (mfc 'l 'otherwise)
                                                     (fc 'NewResult
                                                         (mfc 'l 'clause)
                                                         'r))))
                         private))]
             [build-CondBuilder-public
              (lambda (construct-args
                       construct-asgns
                       public)
                (sec-def public-chunk
                         (constructor-chunk 'CondBuilder
                                            construct-args
                                            construct-asgns)
                         (tpl-srt-dcl 'ReverseClauses
                                      (tpl-pmtr 'Final))
                         (tpl-srt-def 'ReverseClauses
                                      (tpl-pmtr 'Final)
                                      null
                                      (typedef  (tpl-use 'ReverseClausesRecursive 'Clauses 'Final)
                                                'InternalCall)
                                      (typedef  (tpl-pmtr (scope 'InternalCall 'Result))
                                                'Result)
                                      (r-fcn-def (s-fcn-dcl 'reverse
                                                            'Result
                                                            (adcr 'Clauses 'cs)
                                                            (adcr 'Final 'f))
                                                 null
                                                 (fc (scope 'InternalCall 'reverse)
                                                     'cs
                                                     'f)))
                         (tpl-def (tpl-pmtr 'Final)
                                  (r-fcn-def (fcn-dcl 'reverse
                                                      (tpl-pmtr (scope (tpl-use 'ReverseClauses 'Final)
                                                                       'Result))
                                                      (adcr 'Final 'f))
                                             (typedef (tpl-use 'ReverseClauses 'Final)
                                                      'InternalCall)
                                             (fc (scope 'InternalCall 'reverse)
                                                 'clauses_
                                                 'f)))
                         public))]
             [build-CondBuilder
              (lambda (extra-tpl-pmtrs
                       remaining-type
                       new-result-type
                       tpl-pmtrs
                       tpl-arg
                       private
                       construct-args
                       construct-asgns
                       public)
                (tpl-srt-def 'CondBuilder
                             (map* tpl-pmtr tpl-pmtrs)
                             tpl-arg
                             (sec-def 'public
                                      (typedef tpl-arg
                                               'Clauses))
                             (build-CondBuilder-private extra-tpl-pmtrs
                                                        remaining-type
                                                        new-result-type
                                                        private)
                             (build-CondBuilder-public construct-args
                                                       construct-asgns
                                                       public)))]
             [FT-arg (lambda (FT-defined?) (if FT-defined? FT-chunk (tpl-pmtr (scope (tpl-use 'NeboFieldCheck
                                                                                              (tpl-pmtr (scope FT-chunk 'field_type))
                                                                                              FT-chunk)
                                                                                     'Result))))]
             [tpl-FT-def-proc (lambda (FT-defined? fcn-def) (if FT-defined? fcn-def (tpl-def (tpl-pmtr FT-chunk)
                                                                                             fcn-def)))]
             [build-cond-end-val ; end case - given scalar value
              (lambda (name
                       FT-defined?
                       return-type
                       return-expr)
                (r-fcn-def (fcn-dcl name
                                    return-type
                                    (adc 'double 'd))
                           null
                           return-expr))]
             [bcev (arg-swap build-cond-end-val 2 2 "build-cond-end-val")]
             [build-cond-end-field ; end case - given field
              (lambda (name
                       FT-defined?
                       return-type
                       return-expr)
                (tpl-FT-def-proc FT-defined?
                                 (r-fcn-def (fcn-dcl name
                                                     (tpl-use NE-chunk return-type (FT-arg FT-defined?))
                                                     (adcr FT-chunk 'f))
                                            (list (typedef (tpl-use NCF-chunk 'Initial FT-chunk)
                                                           'Field)
                                                  (typedef (tpl-use NE-chunk 'Field FT-chunk)
                                                           'Expression))
                                            return-expr)))]
             [bcef (arg-swap build-cond-end-field 2 2 "build-cond-end-field")]
             [build-cond-end-expr ; end case - given expression
              (lambda (name
                       FT-defined?
                       return-type
                       return-expr)
                (tpl-def (list (tpl-pmtr 'Expr)
                               (if FT-defined? null (tpl-pmtr FT-chunk)))
                         (r-fcn-def (fcn-dcl name
                                             (tpl-use NE-chunk return-type FT-chunk)
                                             (adcr (tpl-use NE-chunk 'Expr FT-chunk) 'e))
                                    null
                                    return-expr)))]
             [bcee (arg-swap build-cond-end-expr 2 2 "build-cond-end-expr")]
             [build-cond-bool-val ; conditional case - given a boolean value and a scalar value
              (lambda (name
                       FT-defined?
                       return-type
                       internals
                       cond-type
                       clause-expr
                       clauses-expr)
                (r-fcn-def (fcn-dcl name
                                    (tpl-use 'CondBuilder (cs return-type))
                                    (list (adc 'bool 'b)
                                          (adc 'double 'd)))
                           (list internals
                                 (typedef cond-type 'Cond)
                                 (typedef (tpl-use 'CondBuilder 'Cond)
                                          'ReturnType))
                           (fc 'ReturnType
                               (fc 'Cond
                                   clause-expr
                                   clauses-expr))))]
             [bcbv (arg-swap build-cond-bool-val 5 2 "build-cond-bool-val")]
             [build-cond-bool-field ; conditional case - given a boolean value and a field
              (lambda (name
                       FT-defined?
                       clauses-type
                       clauses-expr)
                (tpl-FT-def-proc FT-defined?
                                 (r-fcn-def (fcn-dcl name
                                                     (tpl-use 'CondBuilder (cs (tpl-use Cond-chunk
                                                                                        'Initial
                                                                                        (tpl-use Clause-chunk
                                                                                                 'Initial
                                                                                                 (tpl-use NB-chunk 'Initial FT-chunk)
                                                                                                 (tpl-use NCF-chunk 'Initial (FT-arg FT-defined?))
                                                                                                 FT-chunk)
                                                                                        clauses-type
                                                                                        FT-chunk)))
                                                     (list (adc 'bool 'b)
                                                           (adcr FT-chunk 'f)))
                                            (list (typedef (tpl-use NB-chunk 'Initial FT-chunk)
                                                           'Boolean)
                                                  (typedef (tpl-use NCF-chunk 'Initial FT-chunk)
                                                           'Field)
                                                  (typedef (tpl-use Clause-chunk 'Initial 'Boolean 'Field FT-chunk)
                                                           'Clause)
                                                  (typedef (tpl-use Cond-chunk 'Initial 'Clause clauses-type FT-chunk)
                                                           'Cond)
                                                  (typedef (tpl-use 'CondBuilder 'Cond)
                                                           'ReturnType))
                                            (fc 'ReturnType
                                                (fc 'Cond
                                                    (fc 'Clause
                                                        (fc 'Boolean 'b)
                                                        (fc 'Field 'f))
                                                    clauses-expr)))))]
             [bcbf (arg-swap build-cond-bool-field 2 2 "build-cond-bool-field")]
             [build-cond-bool-expr ; conditional case - given a boolean value and an expression
              (lambda (name
                       FT-defined?
                       clauses-type
                       clauses-expr)
                (tpl-def (list (tpl-pmtr 'Expr)
                               (if FT-defined? null (tpl-pmtr FT-chunk)))
                         (r-fcn-def (fcn-dcl name
                                             (tpl-use 'CondBuilder (cs (tpl-use Cond-chunk
                                                                                'Initial
                                                                                (tpl-use Clause-chunk
                                                                                         'Initial
                                                                                         (tpl-use NB-chunk 'Initial FT-chunk)
                                                                                         'Expr
                                                                                         FT-chunk)
                                                                                clauses-type
                                                                                FT-chunk)))
                                             (list (adc 'bool 'b)
                                                   (adcr (tpl-use NE-chunk 'Expr FT-chunk) 'e)))
                                    (list (typedef (tpl-use NB-chunk 'Initial FT-chunk)
                                                   'Boolean)
                                          (typedef (tpl-use Clause-chunk 'Initial 'Boolean 'Expr FT-chunk)
                                                   'Clause)
                                          (typedef (tpl-use Cond-chunk 'Initial 'Clause clauses-type FT-chunk)
                                                   'Cond)
                                          (typedef (tpl-use 'CondBuilder 'Cond)
                                                   'ReturnType))
                                    (fc 'ReturnType
                                        (fc 'Cond
                                            (fc 'Clause
                                                (fc 'Boolean 'b)
                                                (mfc 'e 'expr))
                                            clauses-expr)))))]
             [bcbe (arg-swap build-cond-bool-expr 2 2 "build-cond-bool-expr")]
             [build-cond-NBE-val ; conditional case - given a boolean expression and a scalar value
              (lambda (name
                       FT-defined?
                       clauses-type
                       clauses-expr)
                (tpl-def (list (tpl-pmtr 'BoolExpr)
                               (if FT-defined? null (tpl-pmtr FT-chunk)))
                         (r-fcn-def (fcn-dcl name
                                             (tpl-use 'CondBuilder (cs (tpl-use Cond-chunk
                                                                                'Initial
                                                                                (tpl-use Clause-chunk
                                                                                         'Initial
                                                                                         'BoolExpr
                                                                                         (tpl-use NS-chunk 'Initial FT-chunk)
                                                                                         FT-chunk)
                                                                                clauses-type
                                                                                FT-chunk)))
                                             (list (adcr (tpl-use NBE-chunk 'BoolExpr FT-chunk) 'nb)
                                                   (adc 'double 'd)))
                                    (list (typedef (tpl-use NS-chunk 'Initial FT-chunk)
                                                   'Scalar)
                                          (typedef (tpl-use Clause-chunk 'Initial 'BoolExpr 'Scalar FT-chunk)
                                                   'Clause)
                                          (typedef (tpl-use Cond-chunk 'Initial 'Clause clauses-type FT-chunk)
                                                   'Cond)
                                          (typedef (tpl-use 'CondBuilder 'Cond)
                                                   'ReturnType))
                                    (fc 'ReturnType
                                        (fc 'Cond
                                            (fc 'Clause
                                                (mfc 'nb 'expr)
                                                (fc 'Scalar 'd))
                                            clauses-expr)))))]
             [bcnv (arg-swap build-cond-NBE-val 2 2 "build-cond-NBE-val")]
             [build-cond-NBE-field ; conditional case - given a boolean expression and a field
              (lambda (name
                       FT-defined?
                       clauses-type
                       clauses-expr)
                (tpl-def (list (tpl-pmtr 'BoolExpr)
                               (if FT-defined? null (tpl-pmtr FT-chunk)))
                         (r-fcn-def (fcn-dcl name
                                             (tpl-use 'CondBuilder (cs (tpl-use Cond-chunk
                                                                                'Initial
                                                                                (tpl-use Clause-chunk
                                                                                         'Initial
                                                                                         'BoolExpr
                                                                                         (tpl-use NCF-chunk 'Initial (FT-arg FT-defined?))
                                                                                         FT-chunk)
                                                                                clauses-type
                                                                                FT-chunk)))
                                             (list (adcr (tpl-use NBE-chunk 'BoolExpr FT-chunk) 'nb)
                                                   (adcr FT-chunk 'f)))
                                    (list (typedef (tpl-use NCF-chunk 'Initial FT-chunk)
                                                   'Field)
                                          (typedef (tpl-use Clause-chunk 'Initial 'BoolExpr 'Field FT-chunk)
                                                   'Clause)
                                          (typedef (tpl-use Cond-chunk 'Initial 'Clause clauses-type FT-chunk)
                                                   'Cond)
                                          (typedef (tpl-use 'CondBuilder 'Cond)
                                                   'ReturnType))
                                    (fc 'ReturnType
                                        (fc 'Cond
                                            (fc 'Clause
                                                (mfc 'nb 'expr)
                                                (fc 'Field 'f))
                                            clauses-expr)))))]
             [bcnf (arg-swap build-cond-NBE-field 2 2 "build-cond-NBE-field")]
             [build-cond-NBE-expr ; conditional case - given a boolean expression and an expression
              (lambda (name
                       FT-defined?
                       clauses-type
                       clauses-expr)
                (tpl-def (list (tpl-pmtr 'BoolExpr)
                               (tpl-pmtr 'Expr)
                               (if FT-defined? null (tpl-pmtr FT-chunk)))
                         (r-fcn-def (fcn-dcl name
                                             (tpl-use 'CondBuilder (cs (tpl-use Cond-chunk
                                                                                'Initial
                                                                                (tpl-use Clause-chunk 'Initial 'BoolExpr 'Expr FT-chunk)
                                                                                clauses-type
                                                                                FT-chunk)))
                                             (list (adcr (tpl-use NBE-chunk 'BoolExpr FT-chunk) 'nb)
                                                   (adcr (tpl-use NE-chunk 'Expr FT-chunk) 'e)))
                                    (list (typedef (tpl-use Clause-chunk 'Initial 'BoolExpr 'Expr FT-chunk)
                                                   'Clause)
                                          (typedef (tpl-use Cond-chunk 'Initial 'Clause clauses-type FT-chunk)
                                                   'Cond)
                                          (typedef (tpl-use 'CondBuilder 'Cond)
                                                   'ReturnType))
                                    (fc 'ReturnType
                                        (fc 'Cond
                                            (fc 'Clause
                                                (mfc 'nb 'expr)
                                                (mfc 'e 'expr))
                                            clauses-expr)))))]
             [bcne (arg-swap build-cond-NBE-expr 2 2 "build-cond-NBE-expr")]
             [build-cond-app (lambda (name
                                      FT-defined?
                                      end-val
                                      end-field
                                      end-expr
                                      bool-val
                                      bool-field
                                      bool-expr
                                      NBE-val
                                      NBE-field
                                      NBE-expr)
                               (map (lambda (given) (given name FT-defined?))
                                    (list end-val
                                          end-field
                                          end-expr
                                          bool-val
                                          bool-field
                                          bool-expr
                                          NBE-val
                                          NBE-field
                                          NBE-expr)))])
        (list (tpl-srt-dcl 'CondBuilder
                           (tpl-pmtr 'Clauses))
                                        ; FT
              (build-CondBuilder (list (tpl-pmtr 'Next) (tpl-pmtr 'Field))
                                 (tpl-use Cond-chunk 'Initial 'Next 'Following 'Field)
                                 (tpl-use Cond-chunk 'Initial 'Next 'PreceedingResult 'Field)
                                 (list CT-chunk 'Otherwise FT-chunk)
                                 (cs (tpl-use Cond-chunk 'Initial CT-chunk 'Otherwise FT-chunk))
                                 (adc 'Clauses 'clauses_)
                                 (adcr (tpl-use Cond-chunk 'Initial CT-chunk 'Otherwise FT-chunk) 'cs)
                                 (cons-asgn 'clauses_ 'cs)
                                 (build-cond-app (bs 'operator (p))
                                                 #true
                                                 (bcev (tpl-use NE-chunk
                                                                (tpl-pmtr (scope (tpl-use 'ReverseClauses
                                                                                          (cs (tpl-use NS-chunk 'Initial FT-chunk)))
                                                                                 'Result))
                                                                FT-chunk)
                                                       (fc (tpl-use NE-chunk (tpl-pmtr (scope (tpl-use 'ReverseClauses
                                                                                                       (cs (tpl-use NS-chunk 'Initial FT-chunk)))
                                                                                              'Result))
                                                                    FT-chunk)
                                                           (fc 'reverse (fc (tpl-use NS-chunk 'Initial FT-chunk)
                                                                            'd))))
                                                 (bcef (tpl-pmtr (scope (tpl-use 'ReverseClauses (cs (tpl-use NCF-chunk 'Initial FT-chunk)))
                                                                        'Result))
                                                       (fc (tpl-use NE-chunk
                                                                    (tpl-pmtr (scope (tpl-use 'ReverseClauses 'Field)
                                                                                     'Result))
                                                                    FT-chunk)
                                                           (fc 'reverse (fc 'Field 'f))))
                                                 (bcee (tpl-pmtr (scope (tpl-use 'ReverseClauses 'Expr)
                                                                        'Result))
                                                       (fc (tpl-use NE-chunk
                                                                    (tpl-pmtr (scope (tpl-use 'ReverseClauses 'Expr)
                                                                                     'Result))
                                                                    FT-chunk)
                                                           (fc 'reverse (mfc 'e 'expr))))
                                                 (bcbv (tpl-use Cond-chunk
                                                                'Initial
                                                                (tpl-use Clause-chunk
                                                                         'Initial
                                                                         (tpl-use NB-chunk 'Initial FT-chunk)
                                                                         (tpl-use NS-chunk 'Initial FT-chunk)
                                                                         FT-chunk)
                                                                'Clauses
                                                                FT-chunk)
                                                       (list (typedef (tpl-use NB-chunk 'Initial FT-chunk)
                                                                      'Boolean)
                                                             (typedef (tpl-use NS-chunk 'Initial FT-chunk)
                                                                      'Scalar)
                                                             (typedef (tpl-use Clause-chunk 'Initial 'Boolean 'Scalar FT-chunk)
                                                                      'NewClause))
                                                       (tpl-use Cond-chunk 'Initial 'NewClause 'Clauses FT-chunk)
                                                       (fc 'NewClause
                                                           (fc 'Boolean 'b)
                                                           (fc 'Scalar 'd))
                                                       'clauses_)
                                                 (bcbf 'Clauses 'clauses_)
                                                 (bcbe 'Clauses 'clauses_)
                                                 (bcnv 'Clauses 'clauses_)
                                                 (bcnf 'Clauses 'clauses_)
                                                 (bcne 'Clauses 'clauses_)))
                                        ; no FT
              (build-CondBuilder null
                                 (tpl-use SCond-chunk 'Following)
                                 (tpl-use SCond-chunk 'PreceedingResult)
                                 'Otherwise
                                 (cs (tpl-use SCond-chunk 'Otherwise))
                                 (adc 'Clauses 'clauses_)
                                 (adcr (tpl-use SCond-chunk 'Otherwise) 'cs)
                                 (cons-asgn 'clauses_ 'cs)
                                 (build-cond-app (bs 'operator (p))
                                                 #false
                                                 (bcev 'double (mfc (fc 'reverse (fc SFClause-chunk 'd))
                                                                    'eval))
                                                 (bcef (tpl-pmtr (scope (scope (tpl-use 'CondBuilder (tpl-pmtr (scope (scope 'Clauses (tpl-fcn-use 'Convert FT-chunk))
                                                                                                                      'Converted)))
                                                                               (tpl-fcn-use 'ReverseClauses (cs (tpl-use NCF-chunk 'Initial (FT-arg #false)))))
                                                                        'Result))
                                                       (fc (fc (tpl-use 'CondBuilder (tpl-pmtr (scope (scope 'Clauses (tpl-fcn-use 'Convert FT-chunk))
                                                                                                      'Converted)))
                                                               (mfc 'clauses_ (tpl-fcn-use 'convert FT-chunk)))
                                                           'f))
                                                 (bcee (tpl-pmtr (scope (scope (tpl-use 'CondBuilder (tpl-pmtr (scope (scope 'Clauses (tpl-fcn-use 'Convert FT-chunk))
                                                                                                                      'Converted)))
                                                                               (tpl-fcn-use 'ReverseClauses 'Expr))
                                                                        'Result))
                                                       (fc (fc (tpl-use 'CondBuilder (tpl-pmtr (scope (scope 'Clauses (tpl-fcn-use 'Convert FT-chunk))
                                                                                                      'Converted)))
                                                               (mfc 'clauses_ (tpl-fcn-use 'convert FT-chunk)))
                                                           'e))
                                                 (bcbv (tpl-use SCond-chunk 'Clauses)
                                                       null
                                                       (tpl-use SCond-chunk 'Clauses)
                                                       (fc SClause-chunk 'b 'd)
                                                       'clauses_)
                                                 (bcbf (tpl-pmtr (scope (scope 'Clauses (tpl-fcn-use 'Convert FT-chunk))
                                                                        'Converted))
                                                       (mfc 'clauses_ (tpl-fcn-use 'convert FT-chunk)))
                                                 (bcbe (tpl-pmtr (scope (scope 'Clauses (tpl-fcn-use 'Convert FT-chunk))
                                                                        'Converted))
                                                       (mfc 'clauses_ (tpl-fcn-use 'convert FT-chunk)))
                                                 (bcnv (tpl-pmtr (scope (scope 'Clauses (tpl-fcn-use 'Convert FT-chunk))
                                                                        'Converted))
                                                       (mfc 'clauses_ (tpl-fcn-use 'convert FT-chunk)))
                                                 (bcnf (tpl-pmtr (scope (scope 'Clauses (tpl-fcn-use 'Convert FT-chunk))
                                                                        'Converted))
                                                       (mfc 'clauses_ (tpl-fcn-use 'convert FT-chunk)))
                                                 (bcne (tpl-pmtr (scope (scope 'Clauses (tpl-fcn-use 'Convert FT-chunk))
                                                                        'Converted))
                                                       (mfc 'clauses_ (tpl-fcn-use 'convert FT-chunk)))))
                                        ; Nil
              (tpl-srt-def 'CondBuilder
                           null
                           Nil-chunk
                           (sec-def 'public
                                    (constructor-chunk 'CondBuilder null null)))
              (build-cond-app 'cond
                              #false
                              (bcev 'double 'd)
                              (bcef (tpl-use NCF-chunk 'Initial FT-chunk)
                                    (fc 'Expression (fc 'Field 'f)))
                              (bcee 'Expr 'e)
                              (bcbv (tpl-use SCond-chunk Nil-chunk)
                                    null
                                    (tpl-use SCond-chunk Nil-chunk)
                                    (fc SClause-chunk 'b 'd)
                                    (fc Nil-chunk))
                              (bcbf Nil-chunk (fc Nil-chunk))
                              (bcbe Nil-chunk (fc Nil-chunk))
                              (bcnv Nil-chunk (fc Nil-chunk))
                              (bcnf Nil-chunk (fc Nil-chunk))
                              (bcne Nil-chunk (fc Nil-chunk)))))
      (m 'nebo_cond null (l 'cond '//))
      (build-struct NSP
                    'Point
                    'Arg
                    (bs-Initial-rhs null
                                    (list 'Point 'Point 'Point 'Point)
                                    (tpl-pmtr (scope (scope 'structured
                                                            (tpl-use 'Invalidate
                                                                     (tpl-pmtr (scope 'Arg report-VG-chunk))
                                                                     'Point))
                                                     'result))
                                    (bm-constructor (adcr 'Arg 'a)
                                                    (cons-asgn 'arg_ 'a)
                                                    null)
                                    (mfc 'arg_ (tpl-fcn-use 'init VG-chunk (tpl-pmtr (scope (scope 'structured (tpl-use 'Add SH-chunk 'Point))
                                                                                            'result))))
                                    (mfc 'arg_ (tpl-fcn-use 'resize VG-chunk))
                                    (mfc 'arg_ 'gpu_ready DI-chunk)
                                    (mfc 'arg_
                                         (tpl-fcn-use 'gpu_init VG-chunk (tpl-pmtr (scope (scope 'structured (tpl-use 'Add SH-chunk 'Point))
                                                                                          'result)))
                                         DI-chunk)
                                    (mfc 'arg_ (tpl-fcn-use 'reduce_init VG-chunk (tpl-pmtr (scope (scope 'structured (tpl-use 'Add SH-chunk 'Point))
                                                                                                   'result))))
                                    null
                                    (adc 'Arg 'arg_))
                    (bs-Resize-rhs null
                                   'Point
                                   (bm-constructor (adcr 'Arg 'a)
                                                   (cons-asgn 'arg_ 'a)
                                                   null)
                                   (mfc 'arg_
                                        (tpl-fcn-use 'init (tpl-pmtr (scope (scope 'structured (tpl-use 'Add SH-chunk 'Point))
                                                                            'result)))
                                        'split
                                        'location)
                                   null
                                   (adc 'Arg 'arg_))
                    (bs-SeqWalk-rhs (typedef (scope (tpl-pmtr FT-chunk)
                                                    'value_type)
                                             'AtomicType)
                                    (bm-constructor (adcr 'Arg 'a)
                                                    (cons-asgn 'arg_ 'a)
                                                    null)
                                    (mfc 'arg_ 'next)
                                    'AtomicType
                                    (mfc 'arg_ 'eval)
                                    null
                                    (ad 'Arg 'arg_))
                    (bs-GPU-rhs null
                                (bm-constructor (adcr 'Arg 'a)
                                                (cons-asgn 'arg_ 'a)
                                                null)
                                (mfc 'arg_ 'start 'x 'y)
                                (mfc 'arg_ 'next)
                                (mfc 'arg_ 'eval)
                                null
                                (ad 'Arg 'arg_))
                    (bs-Reduction (typedef (scope (tpl-pmtr FT-chunk)
                                                  'value_type)
                                           'AtomicType)
                                  (bm-constructor (adcr 'Arg 'a)
                                                  (cons-asgn 'arg_ 'a)
                                                  null)
                                  (mfc 'arg_ 'next)
                                  (mfc 'arg_ 'at_end)
                                  (mfc 'arg_ 'has_length)
                                  'AtomicType
                                  (mfc 'arg_ 'eval)
                                  null
                                  (ad 'Arg 'arg_)))
      (tpl-srt-def NSCC
                   (bs 'int 'Length)
                   null
                   (sec-def public-chunk
                            (constructor-chunk NSCC
                                               (list (adcr (tpl-use NSCC (n- 'Length "1")) 'o)
                                                     (adc 'double 'c))
                                               (list (cons-asgn 'others_ 'o)
                                                     (cons-asgn 'coef_ 'c))
                                               null)
                            (r-fcn-def (constize (fcn-dcl (bs 'operator (p))
                                                          (tc (tpl-use NSCC (n+ 'Length "1")))
                                                          (adc 'double 'c)))
                                       null
                                       (fc (tpl-use NSCC (n+ 'Length "1"))
                                           '*this
                                           'c))
                            (r-fcn-def (constize (fcn-dcl 'coef (tc 'double)))
                                       null
                                       'coef_)
                            (r-fcn-def (constize (fcn-dcl 'others (tc (tpl-use NSCC (n- 'Length "1")))))
                                       null
                                       'others_))
                   (sec-def private-chunk
                            (adc (tpl-use NSCC (n- 'Length "1")) 'others_)
                            (adc 'double 'coef_)))
      (tpl-srt-def NSCC
                   null
                   "1"
                   (sec-def public-chunk
                            (constructor-chunk NSCC
                                               (adc 'double 'c)
                                               (cons-asgn 'coef_ 'c)
                                               null)
                            (r-fcn-def (constize (fcn-dcl (bs 'operator (p))
                                                          (tc (tpl-use NSCC "2"))
                                                          (adc 'double 'c)))
                                       null
                                       (fc (tpl-use NSCC "2")
                                           '*this
                                           'c))
                            (r-fcn-def (constize (fcn-dcl 'coef (tc 'double)))
                                       null
                                       'coef_))
                   (sec-def private-chunk
                            (adc 'double 'coef_)))
      (r-fcn-def (fcn-dcl 'build_coef_collection
                          (tc (tpl-use NSCC "1"))
                          (adc 'double 'c))
                 null
                 (fc (tpl-use NSCC "1")
                     'c))
      (r-fcn-def (fcn-dcl 'build_two_point_coef_collection
                          (tc (tpl-use NSCC "2"))
                          (adc 'double 'c1)
                          (adc 'double 'c2))
                 null
                 (fc (fc (tpl-use NSCC "1")
                         'c1)
                     'c2))
      (r-fcn-def (fcn-dcl 'build_four_point_coef_collection
                          (tc (tpl-use NSCC "4"))
                          (adc 'double 'c1)
                          (adc 'double 'c2)
                          (adc 'double 'c3)
                          (adc 'double 'c4))
                 null
                 (fc (fc (fc (fc (tpl-use NSCC "1")
                                 'c1)
                             'c2)
                         'c3)
                     'c4))
      (tpl-srt-def NSPC
                   (list (tpl-pmtr 'PointType)
                         (tpl-pmtr 'CollectionType))
                   null
                   (sec-def public-chunk
                            (typedef 'PointType 'Point)
                            (typedef 'CollectionType 'Collection)
                            (typedef (tpl-use NSPC 'Point 'Collection)
                                     'MyType)
                            (enum (n= 'length (n+ "1" (scope 'Collection 'length))))
                            (tpl-srt-def 'AddPoint
                                         (tpl-pmtr 'NewPoint)
                                         null
                                         (typedef (tpl-use NSPC 'NewPoint 'MyType)
                                                  'Result))
                            (tpl-srt-def 'PossibleGhost
                                         (tpl-pmtr 'GivenPossibleValidGhost)
                                         null
                                         (typedef (tpl-pmtr (scope (scope 'structured (tpl-use 'Invalidate 'GivenPossibleValidGhost 'Point))
                                                                   'result))
                                                  'CurrentPossibleValidGhost)
                                         (typedef (tpl-pmtr (scope 'Collection (tpl-fcn-use 'PossibleGhost 'GivenPossibleValidGhost)))
                                                  'EarlierPointsPossibleGhost)
                                         (typedef (tpl-pmtr (scope 'EarlierPointsPossibleGhost 'Result))
                                                  'EarlierPointsPossibleValidGhost)
                                         (typedef (tpl-pmtr (scope (scope 'structured (tpl-use 'Minimum 'CurrentPossibleValidGhost 'EarlierPointsPossibleValidGhost))
                                                                   'result))
                                                  'Result))
                            (tpl-srt-def 'ConstructExpr
                                         (list (tpl-pmtr 'ArgPreSeqWalk)
                                               (tpl-pmtr 'DestType))
                                         null
                                         (typedef (tpl-use NS-chunk 'SeqWalk 'DestType)
                                                  'Coef)
                                         (typedef (tpl-pmtr (scope 'ArgPreSeqWalk 'SeqWalkType))
                                                  'Arg)
                                         (typedef (tpl-use 'ProdOp 'SeqWalk 'Arg 'Coef 'DestType)
                                                  'MultiplyType)
                                         (typedef (tpl-pmtr (scope 'Collection (tpl-fcn-use 'ConstructExpr 'ArgPreSeqWalk 'DestType)))
                                                  'EarlierPointsType)
                                         (typedef (tpl-pmtr (scope 'EarlierPointsType
                                                                   'Result))
                                                  'EarlierPointsResult)
                                         (typedef (tpl-use 'SumOp 'SeqWalk 'EarlierPointsResult 'MultiplyType 'DestType)
                                                  'Result)
                                         (tpl-def (list (tpl-pmtr VG-chunk)
                                                        (tpl-pmtr SH-chunk))
                                                  (r-fcn-def (s-fcn-dcl 'in_sq_construct
                                                                        (tc 'Result)
                                                                        (adcr 'ArgPreSeqWalk 'arg)
                                                                        (adcr (tpl-use NSCC 'length) 'coefs))
                                                             (typedef (tpl-pmtr (scope (scope 'structured (tpl-use 'Add SH-chunk 'Point))
                                                                                       'result))
                                                                      'NewShift)
                                                             (fc 'Result
                                                                 (fc (scope 'EarlierPointsType
                                                                            (tpl-fcn-use 'in_sq_construct VG-chunk SH-chunk))
                                                                     'arg
                                                                     (mfc 'coefs 'others))
                                                                 (fc 'MultiplyType
                                                                     (mfc 'arg (tpl-fcn-use 'init VG-chunk 'NewShift))
                                                                     (fc 'Coef (mfc 'coefs 'coef))))))
                                         (tpl-def (tpl-pmtr SH-chunk)
                                                  (r-fcn-def (s-fcn-dcl 'rs_sq_construct
                                                                        (tc 'Result)
                                                                        (adcr 'ArgPreSeqWalk 'arg)
                                                                        (adcr (tpl-use NSCC 'length) 'coefs)
                                                                        (adcr IntVec 'split)
                                                                        (adcr IntVec 'location))
                                                             (typedef (tpl-pmtr (scope (scope 'structured (tpl-use 'Add SH-chunk 'Point))
                                                                                       'result))
                                                                      'NewShift)
                                                             (fc 'Result
                                                                 (fc (scope 'EarlierPointsType (tpl-fcn-use 'rs_sq_construct SH-chunk))
                                                                     'arg
                                                                     (mfc 'coefs 'others)
                                                                     'split
                                                                     'location)
                                                                 (fc 'MultiplyType
                                                                     (mfc 'arg
                                                                          (tpl-fcn-use 'init 'NewShift)
                                                                          'split
                                                                          'location)
                                                                     (fc 'Coef (mfc 'coefs 'coef)))))))
                            (gpu-only
                             (tpl-srt-def 'ConstructGPUExpr
                                          (list (tpl-pmtr 'ArgPreGPUWalk)
                                                (tpl-pmtr 'DestType))
                                          null
                                          (typedef (tpl-use NS-chunk 'GPUWalk 'DestType)
                                                   'Coef)
                                          (typedef (tpl-pmtr (scope 'ArgPreGPUWalk 'GPUWalkType))
                                                   'Arg)
                                          (typedef (tpl-use 'ProdOp 'GPUWalk 'Arg 'Coef 'DestType)
                                                   'MultiplyType)
                                          (typedef (tpl-pmtr (scope 'Collection (tpl-fcn-use 'ConstructExpr 'ArgPreGPUWalk 'DestType)))
                                                   'EarlierPointsType)
                                          (typedef (tpl-pmtr (scope 'EarlierPointsType
                                                                    'Result))
                                                   'EarlierPointsResult)
                                          (typedef (tpl-use 'SumOp 'GPUWalk 'EarlierPointsResult 'MultiplyType 'DestType)
                                                   'Result)
                                          (tpl-def (list (tpl-pmtr VG-chunk)
                                                         (tpl-pmtr SH-chunk))
                                                   (r-fcn-def (s-fcn-dcl 'in_gpu_construct
                                                                         (tc 'Result)
                                                                         (adc 'int DI-chunk)
                                                                         (adcr 'ArgPreGPUWalk 'arg)
                                                                         (adcr (tpl-use NSCC 'length) 'coefs))
                                                              (typedef (tpl-pmtr (scope (scope 'structured (tpl-use 'Add SH-chunk 'Point))
                                                                                        'result))
                                                                       'NewShift)
                                                              (fc 'Result
                                                                  (fc (scope 'EarlierPointsType (tpl-fcn-use 'in_gpu_construct VG-chunk SH-chunk))
                                                                      DI-chunk
                                                                      'arg
                                                                      (mfc 'coefs 'others))
                                                                  (fc 'MultiplyType
                                                                      (mfc 'arg
                                                                           (tpl-fcn-use 'gpu_init VG-chunk 'NewShift)
                                                                           DI-chunk)
                                                                      (fc 'Coef (mfc 'coefs 'coef))))))))
                            (tpl-srt-def 'ConstructReductionExpr
                                         (list (tpl-pmtr 'ArgPreReduction)
                                               (tpl-pmtr 'DestType))
                                         null
                                         (typedef (tpl-use NS-chunk 'Reduction 'DestType)
                                                  'Coef)
                                         (typedef (tpl-pmtr (scope 'ArgPreReduction 'ReductionType))
                                                  'Arg)
                                         (typedef (tpl-use 'ProdOp 'Reduction 'Arg 'Coef 'DestType)
                                                  'MultiplyType)
                                         (typedef (tpl-pmtr (scope 'Collection (tpl-fcn-use 'ConstructReductionExpr 'ArgPreReduction 'DestType)))
                                                  'EarlierPointsType)
                                         (typedef (tpl-pmtr (scope 'EarlierPointsType
                                                                   'Result))
                                                  'EarlierPointsResult)
                                         (typedef (tpl-use 'SumOp 'Reduction 'EarlierPointsResult 'MultiplyType 'DestType)
                                                  'Result)
                                         (tpl-def (list (tpl-pmtr VG-chunk)
                                                        (tpl-pmtr SH-chunk))
                                                  (r-fcn-def (s-fcn-dcl 'in_rd_construct
                                                                        (tc 'Result)
                                                                        (adcr 'ArgPreReduction 'arg)
                                                                        (adcr (tpl-use NSCC 'length) 'coefs))
                                                             (typedef (tpl-pmtr (scope (scope 'structured (tpl-use 'Add SH-chunk 'Point))
                                                                                       'result))
                                                                      'NewShift)
                                                             (fc 'Result
                                                                 (fc (scope 'EarlierPointsType (tpl-fcn-use 'in_rd_construct VG-chunk SH-chunk))
                                                                     'arg
                                                                     (mfc 'coefs 'others))
                                                                 (fc 'MultiplyType
                                                                     (mfc 'arg (tpl-fcn-use 'reduce_init VG-chunk 'NewShift))
                                                                     (fc 'Coef (mfc 'coefs 'coef))))))
                                         (tpl-def (tpl-pmtr SH-chunk)
                                                  (r-fcn-def (s-fcn-dcl 'rs_rd_construct
                                                                        (tc 'Result)
                                                                        (adcr 'ArgPreReduction 'arg)
                                                                        (adcr (tpl-use NSCC 'length) 'coefs))
                                                             (typedef (tpl-pmtr (scope (scope 'structured (tpl-use 'Add SH-chunk 'Point))
                                                                                       'result))
                                                                      'NewShift)
                                                             (fc 'Result
                                                                 (fc (scope 'EarlierPointsType (tpl-fcn-use 'rs_rd_construct SH-chunk))
                                                                     'arg
                                                                     (mfc 'coefs 'others))
                                                                 (fc 'MultiplyType
                                                                     (mfc 'arg (tpl-fcn-use 'reduce_init 'NewShift))
                                                                     (fc 'Coef (mfc 'coefs 'coef)))))))))
      (tpl-srt-def NSPC
                   (tpl-pmtr 'PointType)
                   (list 'PointType Nil-chunk)
                   (sec-def public-chunk
                            (typedef 'PointType 'Point)
                            (typedef Nil-chunk 'Collection)
                            (typedef (tpl-use NSPC 'Point 'Collection)
                                     'MyType)
                            (enum (n= 'length "1"))
                            (tpl-srt-def 'AddPoint
                                         (tpl-pmtr 'NewPoint)
                                         null
                                         (typedef (tpl-use NSPC 'NewPoint 'MyType)
                                                  'Result))
                            (tpl-srt-def 'PossibleGhost
                                         (tpl-pmtr 'GivenPossibleValidGhost)
                                         null
                                         (typedef (tpl-pmtr (scope (scope 'structured
                                                                          (tpl-use 'Invalidate 'GivenPossibleValidGhost 'Point))
                                                                   'result))
                                                  'Result))
                            (tpl-srt-def 'ConstructExpr
                                         (list (tpl-pmtr 'ArgPreSeqWalk)
                                               (tpl-pmtr 'DestType))
                                         null
                                         (typedef (tpl-use NS-chunk 'SeqWalk 'DestType)
                                                  'Coef)
                                         (typedef (tpl-pmtr (scope 'ArgPreSeqWalk 'SeqWalkType))
                                                  'Arg)
                                         (typedef (tpl-use 'ProdOp 'SeqWalk 'Arg 'Coef 'DestType)
                                                  'Result)
                                         (tpl-def (list (tpl-pmtr VG-chunk)
                                                        (tpl-pmtr SH-chunk))
                                                  (r-fcn-def (s-fcn-dcl 'in_sq_construct
                                                                        (tc 'Result)
                                                                        (adcr 'ArgPreSeqWalk 'arg)
                                                                        (adcr (tpl-use NSCC "1") 'coefs))
                                                             (typedef (tpl-pmtr (scope (scope 'structured (tpl-use 'Add SH-chunk 'Point))
                                                                                       'result))
                                                                      'NewShift)
                                                             (fc 'Result
                                                                 (mfc 'arg (tpl-fcn-use 'init VG-chunk 'NewShift))
                                                                 (fc 'Coef (mfc 'coefs 'coef)))))
                                         (tpl-def (tpl-pmtr SH-chunk)
                                                  (r-fcn-def (s-fcn-dcl 'rs_sq_construct
                                                                        (tc 'Result)
                                                                        (adcr 'ArgPreSeqWalk 'arg)
                                                                        (adcr (tpl-use NSCC "1") 'coefs)
                                                                        (adcr IntVec 'split)
                                                                        (adcr IntVec 'location))
                                                             (typedef (tpl-pmtr (scope (scope 'structured (tpl-use 'Add SH-chunk 'Point))
                                                                                       'result))
                                                                      'NewShift)
                                                             (fc 'Result
                                                                 (mfc 'arg
                                                                      (tpl-fcn-use 'init 'NewShift)
                                                                      'split
                                                                      'location)
                                                                 (fc 'Coef (mfc 'coefs 'coef))))))
                            (gpu-only
                             (tpl-srt-def 'ConstructGPUExpr
                                          (list (tpl-pmtr 'ArgPreGPUWalk)
                                                (tpl-pmtr 'DestType))
                                          null
                                          (typedef (tpl-use NS-chunk 'GPUWalk 'DestType)
                                                   'Coef)
                                          (typedef (tpl-pmtr (scope 'ArgPreGPUWalk 'GPUWalkType))
                                                   'Arg)
                                          (typedef (tpl-use 'ProdOp 'GPUWalk 'Arg 'Coef 'DestType)
                                                   'Result)
                                          (tpl-def (list (tpl-pmtr VG-chunk)
                                                         (tpl-pmtr SH-chunk))
                                                   (r-fcn-def (s-fcn-dcl 'in_gpu_construct
                                                                         (tc 'Result)
                                                                         (adc 'int DI-chunk)
                                                                         (adcr 'ArgPreGPUWalk 'arg)
                                                                         (adcr (tpl-use NSCC "1") 'coefs))
                                                              (typedef (tpl-pmtr (scope (scope 'structured (tpl-use 'Add SH-chunk 'Point))
                                                                                        'result))
                                                                       'NewShift)
                                                              (fc 'Result
                                                                  (mfc 'arg
                                                                       (tpl-fcn-use 'gpu_init VG-chunk 'NewShift)
                                                                       DI-chunk)
                                                                  (fc 'Coef (mfc 'coefs 'coef)))))))
                            (tpl-srt-def 'ConstructReductionExpr
                                         (list (tpl-pmtr 'ArgPreReduction)
                                               (tpl-pmtr 'DestType))
                                         null
                                         (typedef (tpl-use NS-chunk 'Reduction 'DestType)
                                                  'Coef)
                                         (typedef (tpl-pmtr (scope 'ArgPreReduction 'ReductionType))
                                                  'Arg)
                                         (typedef (tpl-use 'ProdOp 'Reduction 'Arg 'Coef 'DestType)
                                                  'Result)
                                         (tpl-def (list (tpl-pmtr VG-chunk)
                                                        (tpl-pmtr SH-chunk))
                                                  (r-fcn-def (s-fcn-dcl 'in_rd_construct
                                                                        (tc 'Result)
                                                                        (adcr 'ArgPreReduction 'arg)
                                                                        (adcr (tpl-use NSCC "1") 'coefs))
                                                             (typedef (tpl-pmtr (scope (scope 'structured (tpl-use 'Add SH-chunk 'Point))
                                                                                       'result))
                                                                      'NewShift)
                                                             (fc 'Result
                                                                 (mfc 'arg (tpl-fcn-use 'reduce_init VG-chunk 'NewShift))
                                                                 (fc 'Coef (mfc 'coefs 'coef)))))
                                         (tpl-def (tpl-pmtr SH-chunk)
                                                  (r-fcn-def (s-fcn-dcl 'rs_rd_construct
                                                                        (tc 'Result)
                                                                        (adcr 'ArgPreReduction 'arg)
                                                                        (adcr (tpl-use NSCC "1") 'coefs))
                                                             (typedef (tpl-pmtr (scope (scope 'structured (tpl-use 'Add SH-chunk 'Point))
                                                                                       'result))
                                                                      'NewShift)
                                                             (fc 'Result
                                                                 (mfc 'arg (tpl-fcn-use 'reduce_init 'NewShift))
                                                                 (fc 'Coef (mfc 'coefs 'coef))))))))
      (tpl-srt-def 'BuildStencilPointCollection
                   (tpl-pmtr 'First)
                   null
                   (typedef (tpl-use NSPC 'First Nil-chunk)
                            'Result))
      (tpl-srt-def 'BuildTwoPointCollection
                   (list (tpl-pmtr 'First)
                         (tpl-pmtr 'Second))
                   null
                   (typedef (tpl-pmtr (scope (tpl-use 'BuildStencilPointCollection 'First)
                                             'Result))
                            'FirstPoint)
                   (typedef (tpl-pmtr (scope (scope 'FirstPoint (tpl-fcn-use 'AddPoint 'Second))
                                             'Result))
                            'Result))
      (tpl-srt-def 'BuildFourPointCollection
                   (list (tpl-pmtr 'First)
                         (tpl-pmtr 'Second)
                         (tpl-pmtr 'Third)
                         (tpl-pmtr 'Fourth))
                   null
                   (typedef (tpl-pmtr (scope (tpl-use 'BuildStencilPointCollection 'First)
                                             'Result))
                            'FirstPoint)
                   (typedef (tpl-pmtr (scope (scope 'FirstPoint (tpl-fcn-use 'AddPoint 'Second))
                                             'Result))
                            'SecondFirstCollection)
                   (typedef (tpl-pmtr (scope (scope 'SecondFirstCollection (tpl-fcn-use 'AddPoint 'Third))
                                             'Result))
                            'ThirdSecondFirstCollection)
                   (typedef (tpl-pmtr (scope (scope 'ThirdSecondFirstCollection (tpl-fcn-use 'AddPoint 'Fourth))
                                             'Result))
                            'Result))
      (build-struct NSt
                    (list 'Pts 'Arg)
                    null
                    (bs-Initial-rhs (list (typedef (tpl-use NSCC (scope 'Pts 'length))
                                                   'Coefs)
                                          (typedef (tpl-pmtr (scope 'Pts (tpl-fcn-use 'ConstructExpr 'Arg FT-chunk)))
                                                   'ConstructExpr)
                                          (typedef (tpl-pmtr (scope 'ConstructExpr
                                                                    'Result))
                                                   'ArgSeqWalkType)
                                          (gpu-only (smt-list-chunk new-line-chunk
                                                                    (typedef (tpl-pmtr (scope 'Pts (tpl-fcn-use 'ConstructGPUExpr 'Arg FT-chunk)))
                                                                             'ConstructGPUExpr)
                                                                    (typedef (tpl-pmtr (scope 'ConstructGPUExpr 'Result))
                                                                             'ArgGPUWalkType)))
                                          (typedef (tpl-pmtr (scope 'Pts (tpl-fcn-use 'ConstructReductionExpr 'Arg FT-chunk)))
                                                   'ConstructReductionExpr)
                                          (typedef (tpl-pmtr (scope 'ConstructReductionExpr 'Result))
                                                   'ArgReductionType))
                                    (list (list 'Pts 'ArgSeqWalkType)
                                          (list 'Pts (tpl-pmtr (scope 'Arg 'ResizeType)))
                                          (list 'Pts 'ArgGPUWalkType)
                                          (list 'Pts 'ArgReductionType))
                                    (tpl-pmtr (scope (scope 'Pts (tpl-fcn-use 'PossibleGhost (tpl-pmtr (scope 'Arg report-VG-chunk))))
                                                     'Result))
                                    (bm-constructor (list (adcr 'Arg 'a)
                                                          (adcr 'Coefs 'coefs))
                                                    (list (cons-asgn 'arg_ 'a)
                                                          (cons-asgn 'coefs_ 'coefs))
                                                    null)
                                    (fc (scope 'ConstructExpr (tpl-fcn-use 'in_sq_construct VG-chunk SH-chunk))
                                        'arg_
                                        'coefs_)
                                    (list (mfc 'arg_ (tpl-fcn-use 'resize VG-chunk))
                                          'coefs_)
                                    (mfc 'arg_ 'gpu_ready DI-chunk)
                                    (fc (scope 'ConstructGPUExpr (tpl-fcn-use 'in_gpu_construct VG-chunk SH-chunk))
                                        DI-chunk
                                        'arg_
                                        'coefs_)
                                    (fc (scope 'ConstructExpr (tpl-fcn-use 'in_reduce_construct VG-chunk SH-chunk))
                                        'arg_
                                        'coefs_)
                                    null
                                    (list (adc 'Arg 'arg_)
                                          (adc 'Coefs 'coefs_)))
                    (bs-Resize-rhs (list (typedef (tpl-use NSCC (scope 'Pts 'length))
                                                  'Coefs)
                                         (typedef (tpl-pmtr (scope 'Pts (tpl-fcn-use 'ConstructExpr 'Arg FT-chunk)))
                                                  'ConstructExpr)
                                         (typedef (tpl-pmtr (scope 'ConstructExpr
                                                                   'Result))
                                                  'ArgSeqWalkType))
                                   (list 'Pts 'ArgSeqWalkType)
                                   (bm-constructor (list (adcr 'Arg 'arg)
                                                         (adcr 'Coefs 'coefs))
                                                   (list (cons-asgn 'arg_ 'arg)
                                                         (cons-asgn 'coefs_ 'coefs))
                                                   null)
                                   (fc (scope 'ConstructExpr (tpl-fcn-use 'rs_sq_construct SH-chunk))
                                       'arg_
                                       'coefs_
                                       'split
                                       'location)
                                   null
                                   (list (adc 'Arg 'arg_)
                                         (adc 'Coefs 'coefs_)))
                    (bs-SeqWalk-rhs (typedef (scope (tpl-pmtr FT-chunk)
                                                    'value_type)
                                             'AtomicType)
                                    (bm-constructor (adcr 'Arg 'arg)
                                                    (cons-asgn 'arg_ 'arg)
                                                    null)
                                    (mfc 'arg_ 'next)
                                    'AtomicType
                                    (mfc 'arg_ 'eval)
                                    null
                                    (ad 'Arg 'arg_))
                    (bs-GPU-rhs null
                                (bm-constructor (adcr 'Arg 'a)
                                                (cons-asgn 'arg_ 'a)
                                                null)
                                (mfc 'arg_ 'start 'x 'y)
                                (mfc 'arg_ 'next)
                                (mfc 'arg_ 'eval)
                                null
                                (ad 'Arg 'arg_))
                    (bs-Reduction (typedef (scope (tpl-pmtr FT-chunk)
                                                  'value_type)
                                           'AtomicType)
                                  (bm-constructor (adcr 'Arg 'arg)
                                                  (cons-asgn 'arg_ 'arg)
                                                  null)
                                  (mfc 'arg_ 'next)
                                  (mfc 'arg_ 'at_end)
                                  (mfc 'arg_ 'has_length)
                                  'AtomicType
                                  (mfc 'arg_ 'eval)
                                  null
                                  (ad 'Arg 'arg_)))
      (let ([assign (lambda (name iterator)
                      (let ([def (lambda (tpl-pmtrs
                                          rhs-input-type
                                          rhs-type
                                          rhs-expr)
                                   (tpl-def (map tpl-pmtr (flatten* tpl-pmtrs FT-chunk))
                                            (r-fcn-def (fcn-dcl name
                                                                (cref FT-chunk)
                                                                (adr FT-chunk 'lhs)
                                                                (adcr rhs-input-type 'rhs))
                                                       (list (if rhs-type
                                                                 (typedef rhs-type 'RhsType)
                                                                 null)
                                                             (mfc (fc (tpl-use NF-chunk 'Initial FT-chunk)
                                                                      'lhs)
                                                                  (tpl-fcn-use 'assign iterator 'RhsType)
                                                                  rhs-expr))
                                                       'lhs)))])
                        (bl-smts (def null
                                      (tpl-pmtr (scope FT-chunk 'value_type))
                                      (tpl-use NS-chunk 'Initial FT-chunk)
                                      (fc 'RhsType 'rhs))
                                 (def null
                                      FT-chunk
                                      (tpl-use NCF-chunk 'Initial FT-chunk)
                                      (fc 'RhsType 'rhs))
                                 (def 'RhsType
                                      (tpl-use NE-chunk 'RhsType FT-chunk)
                                      #false
                                      (mfc 'rhs 'expr)))))])
        (list (assign (bs 'operator '<<=)
                      'All)
              (assign 'interior_assign
                      'InteriorOnly)))
      )))
