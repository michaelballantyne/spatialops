 ; Copyright (c) 2014 The University of Utah
 ;
 ; Permission is hereby granted, free of charge, to any person obtaining a copy
 ; of this software and associated documentation files (the "Software"), to
 ; deal in the Software without restriction, including without limitation the
 ; rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ; sell copies of the Software, and to permit persons to whom the Software is
 ; furnished to do so, subject to the following conditions:
 ;
 ; The above copyright notice and this permission notice shall be included in
 ; all copies or substantial portions of the Software.
 ;
 ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ; IN THE SOFTWARE.

(include "spatialops/FulmarAbbreviations.fmr")
(include "spatialops/NeboCore.fmr")

(define (single-assign name
                       lhs-pmtr
                       lhs-type
                       lhs-type-s
                       use-ghost
                       tpl-pmtrs
                       rhs-input-type
                       rhs-type
                       rhs-expr)
  (tpl-def (map tpl-pmtr (flatten* tpl-pmtrs lhs-pmtr))
           (r-fcn-def (fcn-dcl name
                               (cref lhs-type)
                               (adr lhs-type 'lhs)
                               (adcr rhs-input-type 'rhs))
                      (list (if rhs-type
                                (typedef rhs-type 'RhsType)
                                null)
                            (mfc (fc (tpl-use NF-chunk 'Initial lhs-type-s)
                                     'lhs)
                                 (tpl-fcn-use 'assign 'RhsType)
                                 use-ghost
                                 rhs-expr))
                      'lhs)))
(define (assigns name use-ghost)
  (internal-smt-list-chunk
   blank-line-chunk
   (single-assign name
                  FT-chunk
                  FT-chunk
                  FT-chunk
                  use-ghost
                  null
                  (tpl-pmtr (scope FT-chunk vt-chunk))
                  (tpl-use NS-chunk 'Initial (tpl-pmtr (scope FT-chunk vt-chunk)))
                  (fc 'RhsType 'rhs))
   (single-assign name
                  FT-chunk
                  FT-chunk
                  FT-chunk
                  use-ghost
                  null
                  FT-chunk
                  (tpl-use NCF-chunk 'Initial FT-chunk)
                  (fc 'RhsType 'rhs))
   (single-assign name
                  FT-chunk
                  FT-chunk
                  FT-chunk
                  use-ghost
                  'RhsType
                  (tpl-use NE-chunk 'RhsType FT-chunk)
                  #false
                  (mfc 'rhs 'expr))
   (single-assign name
                  FT-chunk
                  FT-chunk
                  FT-chunk
                  use-ghost
                  null
                  (SVFT-def-with-T (tpl-pmtr (scope FT-chunk vt-chunk)))
                  (tpl-use NCSVF-chunk 'Initial (tpl-pmtr (scope FT-chunk vt-chunk)))
                  (fc 'RhsType 'rhs))
   (single-assign name
                  FT-chunk
                  FT-chunk
                  FT-chunk
                  use-ghost
                  'RhsType
                  (tpl-use NSVE-chunk 'RhsType (tpl-pmtr (scope FT-chunk vt-chunk)))
                  #false
                  (mfc 'rhs 'expr))
   (single-assign name
                  'T
                  SVFT-def-chunk
                  (cs SVFT-def-chunk)
                  use-ghost
                  null
                  (tpl-pmtr (scope SVFT-def-chunk vt-chunk))
                  (tpl-use NS-chunk 'Initial (tpl-pmtr (scope SVFT-def-chunk vt-chunk)))
                  (fc 'RhsType 'rhs))
   (single-assign name
                  'T
                  SVFT-def-chunk
                  (cs SVFT-def-chunk)
                  use-ghost
                  null
                  SVFT-def-chunk
                  (tpl-use NCSVF-chunk 'Initial 'T)
                  (fc 'RhsType 'rhs))
   (single-assign name
                  'T
                  SVFT-def-chunk
                  (cs SVFT-def-chunk)
                  use-ghost
                  'RhsType
                  (tpl-use NSVE-chunk 'RhsType 'T)
                  #false
                  (mfc 'rhs 'expr))))

(n 'SpatialOps
   (assigns (bs 'operator '<<=)
            'true)
   (assigns 'interior_assign
            'false))
